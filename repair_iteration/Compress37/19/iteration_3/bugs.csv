bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ch  ==  ']'  ||  ch  ==  '[')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ']'  ||  ch  ==  '[')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ']'  ||  ch  ==  '[')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  if(ch  ==  '['  &&  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  &&  ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  &&  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  if(ch  >=  '['  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '['  ||  ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  '['  ||  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
6	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
7	[BUG]  [BUGGY]  if(ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
8	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
9	[BUG]  [BUGGY]  if((  ch  =  i.getValue())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.getValue())  ==  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.getValue())  ==  -1)  {	  if((    ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
10	[BUG]  [BUGGY]  if((  ch  =  i.next())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.next())  ==  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.next())  ==  -1)  {	  if((    ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
11	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
12	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    't'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
13	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
14	[BUG]  [BUGGY]  if(ch  ==  't'  &&  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  &&  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  &&  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
15	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
17	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
18	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
19	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordS  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordS  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordS	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
20	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).record  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).record  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).record	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
21	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
22	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch!=  ']')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch!=  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch!=  ']')  {	  if(ch!=    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
23	[BUG]  [BUGGY]  if(ch!=  ']'  ||  ch  ==  '[')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  ']'  ||  ch  ==  '[')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  ']'  ||  ch  ==  '[')  {	  if(ch!=    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
24	[BUG]  [BUGGY]  if(ch  ==  '@'  ||  ch  ==  '.')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@'  ||  ch  ==  '.')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '@'  ||  ch  ==  '.')  {	  if(ch!=    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
25	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '@')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '@')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  ||  ch  ==  '@')  {	  if(ch!=    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
26	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  '@')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  '@')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ','  ||  ch  ==  '@')  {	  if(ch!=    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
27	[BUG]  [BUGGY]  if((  ch  =  i.getKey())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.getKey())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.getKey())!=  -1)  {	  if((    ch    =    i.getValue())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
28	[BUG]  [BUGGY]  if((  ch  =  i.recordSize())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.recordSize())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.recordSize())!=  -1)  {	  if((    ch    =    i.getValue())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
29	[BUG]  [BUGGY]  if((  ch  =  i.getSize())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.getSize())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.getSize())!=  -1)  {	  if((    ch    =    i.getValue())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
30	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
31	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
32	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'z')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'z')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
33	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  =='m')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  =='m')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  =='m')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
34	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
35	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
36	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
37	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
38	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
39	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
40	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
41	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
42	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
44	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
45	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
46	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].toString());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
47	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
48	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
49	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
50	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  =='m')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  =='m')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  =='m')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
51	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
52	[BUG]  [BUGGY]  if(ch!=  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
53	[BUG]  [BUGGY]  if(ch  >=  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
54	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
55	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {	  if(ch    ==    'u'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
56	[BUG]  [BUGGY]  if(ch  <  'u'  ||  ch  >  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'u'  ||  ch  >  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'u'  ||  ch  >  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
57	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
58	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
59	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
60	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
61	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
62	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch!=  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch!=  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch!=  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
63	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
65	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
66	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
67	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
68	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[0]);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[0]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[0]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
69	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
70	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
71	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
72	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
73	[BUG]  [BUGGY]  if(headers!=  null)  {  final  int  len  =  headers.size();  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  final  int  len  =  headers.size();  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  final  int  len  =  headers.size();  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
74	[BUG]  [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  if(ch!=  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
76	[BUG]  [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'e')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
77	[BUG]  [BUGGY]  if(ch  ==  '-'  ||  ch  ==  '+'  ||  ch  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '-'  ||  ch  ==  '+'  ||  ch  ==  '+')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '-'  ||  ch  ==  '+'  ||  ch  ==  '+')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
78	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
79	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'e'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
80	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
81	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
82	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'e')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
83	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
84	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
86	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword()  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword()  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword()	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
87	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getName());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getName());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
88	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].get  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].get  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
89	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
90	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
91	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
92	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
93	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
94	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
95	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
96	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'A')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'A')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'A')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
97	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    'n'    ||    ch    ==    'n'    ||    ch!=    'r')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
98	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
99	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
100	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
101	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
102	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  '0')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  '0')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  '0')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
103	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
104	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
105	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
106	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
107	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
108	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
109	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
110	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'a')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
111	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
112	[BUG]  [BUGGY]  if((  ch  =  i.next())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.next())  >=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.next())  >=  -1)  {	  if((    ch    =    i.next())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
113	[BUG]  [BUGGY]  if((  ch  =  i.read())  >>  -1)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.read())  >>  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.read())  >>  -1)  {	  if((    ch    =    i.read())    >=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
114	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  ','  ||  ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  ','  ||  ch  ==  '>')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  ||  ch  ==  ','  ||  ch  ==  '>')  {	  if(ch    ==    '.'    ||    ch    ==    ','    ||    ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
115	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  ','  ||  ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  ','  ||  ch  ==  '>')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  ||  ch  ==  ','  ||  ch  ==  '>')  {	  if(ch    ==    '.'    ||    ch    ==    ','    ||    ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
116	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ','  ||  ch!=  '>')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ','  ||  ch!=  '>')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  ','  ||  ch!=  '>')  {	  if(ch    ==    '.'    ||    ch    ==    ','    ||    ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
117	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  '>')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ','  ||  ch  ==  '>')  {	  if(ch    ==    '.'    ||    ch    ==    ','    ||    ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
118	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch!=    't')    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
119	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
120	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
121	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
122	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
123	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
124	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
125	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
126	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
127	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
128	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
129	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
130	[BUG]  [BUGGY]  if(ch!=  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
131	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r')  {	  if(ch    ==    'u'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
132	[BUG]  [BUGGY]  if(ch  >=  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
133	[BUG]  [BUGGY]  if(ch  <  'u'  ||  ch  >  'r'  ||  ch  >=  't')  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'u'  ||  ch  >  'r'  ||  ch  >=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'u'  ||  ch  >  'r'  ||  ch  >=  't')  {	  if(ch    ==    'u'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
134	[BUG]  [BUGGY]  if(ch  ==  ':'  &&  ch  =='<  ')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  &&  ch  =='<  ')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  &&  ch  =='<  ')  {	  if(ch    ==    ':'    ||    ch    =='<    ')    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
135	[BUG]  [BUGGY]  if(ch!=  ':'  ||  ch  =='<  ')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  ':'  ||  ch  =='<  ')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  ':'  ||  ch  =='<  ')  {	  if(ch    ==    ':'    ||    ch    =='<    ')    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
136	[BUG]  [BUGGY]  if(ch  <  ':'  ||  ch  >'<  ')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  ':'  ||  ch  >'<  ')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  ':'  ||  ch  >'<  ')  {	  if(ch    ==    ':'    ||    ch    =='<    ')    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
137	[BUG]  [BUGGY]  if(ch  ==  ':'  &&  ch!='<  ')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  &&  ch!='<  ')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  &&  ch!='<  ')  {	  if(ch    ==    ':'    ||    ch    =='<    ')    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
138	[BUG]  [BUGGY]  if(ch  >=  ':'  ||  ch  =='<  ')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  ':'  ||  ch  =='<  ')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  ':'  ||  ch  =='<  ')  {	  if(ch    ==    ':'    ||    ch    =='<    ')    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
139	[BUG]  [BUGGY]  if(ch  ==  ':'  &&  ch  <  =  '>')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  &&  ch  <  =  '>')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  &&  ch  <  =  '>')  {	  if(ch    ==    ':'    ||    ch    =='<    ')    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
140	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
141	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
142	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
143	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
144	[BUG]  [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
145	[BUG]  [BUGGY]  if(ch!=  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
146	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch!=  'E')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch!=  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch!=  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
147	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
148	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch!=  0))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch!=  0))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch!=  0))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
149	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch!=  -1))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch!=  -1))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch!=  -1))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
150	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
151	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  0))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  0))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  0))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
152	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  -1))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  -1))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  -1))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
153	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  'n'  ||  ch!=  'n'))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  'n'  ||  ch!=  'n'))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  'n'  ||  ch!=  'n'))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
154	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
155	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
156	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
157	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
158	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
159	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
160	[BUG]  [BUGGY]  if((  ch  =  i.seek())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.seek())  ==  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.seek())  ==  -1)  {	  if((    ch    =    i.seek())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
161	[BUG]  [BUGGY]  if((  ch  =  coll.seek())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  coll.seek())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  coll.seek())!=  -1)  {	  if((    ch    =    i.seek())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
162	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
163	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
164	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
165	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '+')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  '+')  {	  if(ch    ==    '-'    ||    ch    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
166	[BUG]  [BUGGY]  if(ch  ==  '+'  ||  ch  ==  '-')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '+'  ||  ch  ==  '-')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '+'  ||  ch  ==  '-')  {	  if(ch    ==    '-'    ||    ch    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
167	[BUG]  [BUGGY]  if(ch!=  '-'  ||  ch  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '-'  ||  ch  ==  '+')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '-'  ||  ch  ==  '+')  {	  if(ch    ==    '-'    ||    ch    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
168	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '+')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  ||  ch  ==  '+')  {	  if(ch    ==    '-'    ||    ch    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
169	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
170	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  len  =  headers.size()  -  1;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  len  =  headers.size()  -  1;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
171	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  read;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  len  =  headers.size()  -  read;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  len  =  headers.size()  -  read;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
172	[BUG]  [BUGGY]  final  int  len  =  headers.size()  +  read;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  len  =  headers.size()  +  read;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  len  =  headers.size()  +  read;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
173	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  len  =  headers.size()  -  2;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  len  =  headers.size()  -  2;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
174	[BUG]  [BUGGY]  final  int  len  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  len  =  globalPaxHeaders.size();  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  len  =  globalPaxHeaders.size();	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
175	[BUG]  [BUGGY]  final  int  len  =  headers.size()  *  read;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  len  =  headers.size()  *  read;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  len  =  headers.size()  *  read;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
176	[BUG]  [BUGGY]  if(ch  ==  'a'  &&  ch  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  &&  ch  <  =  'z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  &&  ch  <  =  'z')  {	  if(ch!=    'a'    &&    ch    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
177	[BUG]  [BUGGY]  if(ch!=  'A'  &&  ch  <  =  'Z'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'A'  &&  ch  <  =  'Z'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'A'  &&  ch  <  =  'Z'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {	  if(ch!=    'a'    &&    ch    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
178	[BUG]  [BUGGY]  if(ch  ==  'A'  &&  ch  <  =  'Z'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'A'  &&  ch  <  =  'Z'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'A'  &&  ch  <  =  'Z'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {	  if(ch!=    'a'    &&    ch    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
179	[BUG]  [BUGGY]  if(ch!=  'a'  &&  ch  <  =  'z'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'a'  &&  ch  <  =  'z'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'a'  &&  ch  <  =  'z'  ||  ch  >=  'a'  &&  ch  <  =  'z')  {	  if(ch!=    'a'    &&    ch    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
180	[BUG]  [BUGGY]  if(ch  >=  'a'  &&  ch  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'a'  &&  ch  <  =  'z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'a'  &&  ch  <  =  'z')  {	  if(ch!=    'a'    &&    ch    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
181	[BUG]  [BUGGY]  if(ch!=  'A'  &&  ch  <  =  'Z')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'A'  &&  ch  <  =  'Z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'A'  &&  ch  <  =  'Z')  {	  if(ch!=    'a'    &&    ch    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
182	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
183	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
184	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
185	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
186	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'e'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
187	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
188	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
189	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'e')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
190	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
191	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
192	[BUG]  [BUGGY]  if(ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
193	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
194	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
195	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
196	[BUG]  [BUGGY]  if(ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
197	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
198	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
199	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
200	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch!=  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
201	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'A')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'A')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'A')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
202	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  't')  {	  if(ch!=    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
203	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
204	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
205	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
206	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
207	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
208	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
209	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
210	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e'  ||  ch  ==  'E')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
211	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
212	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
213	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
214	[BUG]  [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
215	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(read  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(read  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(read  =  i.read())!=  -1)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
216	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
217	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch  =  i.read())  ==  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch  =  i.read())  ==  -1)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
218	[BUG]  [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch!=    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
219	[BUG]  [BUGGY]  if(ch!=  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'E'  ||  ch  ==  'E')  {	  if(ch!=    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
220	[BUG]  [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'E'  ||  ch  ==  'e')  {	  if(ch!=    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
221	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
222	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
223	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
224	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
225	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
226	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
227	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
228	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
229	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
230	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
231	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
232	[BUG]  [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
233	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
234	[BUG]  [BUGGY]  if(!stringEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!stringEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!stringEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
235	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES  ||  ch.isEmpty()))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
236	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!recordSize.equals(ch))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!recordSize.equals(ch))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!recordSize.equals(ch))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
237	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
238	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
240	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
241	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
242	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  1)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  1)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  1)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
243	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
244	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
245	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
247	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
248	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
249	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i].toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i].toString());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
250	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
251	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString()  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString()  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString()	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
252	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
253	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
254	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
255	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
256	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).to  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).to  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).to	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
257	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
258	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
259	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
260	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
261	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
262	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
263	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
264	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
265	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
266	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
267	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue()  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue()  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue()	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
268	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValu  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValu  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValu	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
269	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
270	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
271	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
272	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
273	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
274	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch!=    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
275	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
276	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
277	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
278	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
279	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
280	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'z')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'z')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
281	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch!=  ']')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch!=  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch!=  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']'    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
282	[BUG]  [BUGGY]  if(ch!=  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']'    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
283	[BUG]  [BUGGY]  if(ch  >=  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']'    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
284	[BUG]  [BUGGY]  if(ch  ==  ']'  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ']'  ||  ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ']'  ||  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']'    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
285	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch!=  ']'  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch!=  ']'  ||  ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch!=  ']'  ||  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']'    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
286	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
287	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'h')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
288	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'h')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
289	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'h')  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'h')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
290	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'h')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
291	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'h')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
292	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
293	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
294	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
295	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
296	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
297	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
298	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
299	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'p')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
300	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
301	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
302	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
303	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
304	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
305	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
306	[BUG]  [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
307	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
308	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
309	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'a')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
310	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
311	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
312	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
313	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
314	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
315	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
316	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
317	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
318	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
319	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
320	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
321	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
322	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
323	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
324	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
325	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
326	[BUG]  [BUGGY]  if(headers!=  null)  {  final  int  len  =  headers.size();  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  final  int  len  =  headers.size();  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue;  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  final  int  len  =  headers.size();  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
327	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword  ==  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword  ==  null)  {  continue;  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword  ==  null)  {  continue;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
328	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
329	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
330	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
331	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
332	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
333	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  coll.toString(CharsetNames.UTF_8));  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  coll.toString(CharsetNames.UTF_8));  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  coll.toString(CharsetNames.UTF_8));  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
334	[BUG]  [BUGGY]  if(ch  ==  '+'  ||  ch  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '+'  ||  ch  ==  '+')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '+'  ||  ch  ==  '+')  {	  if(ch    ==    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
335	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
336	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
337	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword  ==  null)  {  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword  ==  null)  {  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword  ==  null)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
338	[BUG]  [BUGGY]  final  String  headers  =  headers.get(i);  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  String  headers  =  headers.get(i);  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  String  headers  =  headers.get(i);  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
339	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keywords  =  headers.get(i);  if(keyword!=  null)  {  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keywords  =  headers.get(i);  if(keyword!=  null)  {  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keywords  =  headers.get(i);  if(keyword!=  null)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
340	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i,  read);  if(keyword!=  null)  {  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i,  read);  if(keyword!=  null)  {  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i,  read);  if(keyword!=  null)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
341	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    >=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
342	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
343	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
344	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
345	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
346	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '0')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '0')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '0')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
347	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  =='m')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  =='m')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  =='m')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
348	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
349	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
350	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
351	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
352	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
353	[BUG]  [BUGGY]  if(i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.hasNext())  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.hasNext())  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
354	[BUG]  [BUGGY]  if(!(ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!(ch  =  i.read())  ==  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!(ch  =  i.read())  ==  -1)  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
355	[BUG]  [BUGGY]  if(!i.read()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!i.read()!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!i.read()!=  -1)  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
356	[BUG]  [BUGGY]  if(!(i.read()  ==  -1))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!(i.read()  ==  -1))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!(i.read()  ==  -1))  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
357	[BUG]  [BUGGY]  if(i.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEmpty())  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEmpty())  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
358	[BUG]  [BUGGY]  if(!(i.read()!=  -1))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!(i.read()!=  -1))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!(i.read()!=  -1))  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
359	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(!keyword.equals(keyword))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
360	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!Keyword.equals(keyword))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!Keyword.equals(keyword))  {  continue;  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!Keyword.equals(keyword))  {  continue;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(!keyword.equals(keyword))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
361	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(ch))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(ch))  {  continue;  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(ch))  {  continue;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(!keyword.equals(keyword))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
362	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(url))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(url))  {  continue;  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(url))  {  continue;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(!keyword.equals(keyword))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
363	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  numRecords  =  headers.size()  -  1;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  numRecords  =  headers.size()  -  1;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
364	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  -  read;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  numRecords  =  headers.size()  -  read;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  numRecords  =  headers.size()  -  read;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
365	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  +  read;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  numRecords  =  headers.size()  +  read;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  numRecords  =  headers.size()  +  read;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
366	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  *  read;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  numRecords  =  headers.size()  *  read;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  numRecords  =  headers.size()  *  read;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
367	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  numRecords  =  headers.size()  +  1;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  numRecords  =  headers.size()  +  1;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
368	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  numRecords  =  headers.size()  -  2;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  numRecords  =  headers.size()  -  2;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
369	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
370	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
371	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
372	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
373	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
374	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
375	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
376	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
377	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(0);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(0);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(0);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
378	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(0);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(0);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(0);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
379	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i,  read);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i,  read);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i,  read);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
380	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
381	[BUG]  [BUGGY]  if((  read  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  read  =  i.read())  ==  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  read  =  i.read())  ==  -1)  {	  if((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
382	[BUG]  [BUGGY]  if((  len  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  len  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  len  =  i.read())!=  -1)  {	  if((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
383	[BUG]  [BUGGY]  if((  restLen  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  restLen  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  restLen  =  i.read())!=  -1)  {	  if((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
384	[BUG]  [BUGGY]  if((  i  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  i  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  i  =  i.read())!=  -1)  {	  if((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
385	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
386	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
387	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
388	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
389	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch!=  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch!=  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch!=  'n')  {	  if(ch    ==    't'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
390	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  't'  ||  ch!=  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  't'  ||  ch!=  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  't'  ||  ch!=  'r'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
391	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
392	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
393	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
394	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[0]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[0]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[0]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
395	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
396	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[0]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[0]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[0]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
397	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
398	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
399	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
400	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch!=    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
401	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
402	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
403	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
404	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
405	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
406	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
407	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
408	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
409	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
410	[BUG]  [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
411	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
412	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
413	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
414	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
415	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
416	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
417	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
418	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
419	[BUG]  [BUGGY]  if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
420	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  >=  'r'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
421	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
422	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].toString());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
423	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  heads.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  heads.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  heads.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
424	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
425	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.get(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.get(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.get(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
426	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
427	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >=  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >=  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
428	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
429	[BUG]  [BUGGY]  if(CH!=  '['  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(CH!=  '['  ||  ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(CH!=  '['  ||  ch  ==  ']')  {	  if(ch!=    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
430	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  >=  ']')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  >=  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  >=  ']')  {	  if(ch!=    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
431	[BUG]  [BUGGY]  if(ch!=  '['  ||  ch  >=  ']')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '['  ||  ch  >=  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '['  ||  ch  >=  ']')  {	  if(ch!=    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
432	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
433	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch!=  -1))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch!=  -1))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch!=  -1))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
434	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
435	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
436	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
437	[BUG]  [BUGGY]  final  int  numRecords  =  this.headers.size();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  numRecords  =  this.headers.size();  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  numRecords  =  this.headers.size();	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
438	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
439	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'r')  {	  if(ch    ==    'u'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
440	[BUG]  [BUGGY]  if(ch  <  'u'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'u'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'u'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  't')  {	  if(ch    ==    'u'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
441	[BUG]  [BUGGY]  if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
442	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
443	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
444	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  =  0)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read  <  =  0)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
445	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue;  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(!keyword.equals(keyword))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
446	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(!keyword.equals(keyword))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
447	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue;  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(!keyword.equals(keyword))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
448	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(!keyword.equals(keyword))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
449	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
450	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
451	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
452	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
453	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
454	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
455	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
456	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(0).toString());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(0).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(0).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
457	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
458	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  <  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  <  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  <  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
459	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  >=  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  >=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  >=  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
460	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
461	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
462	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
463	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
464	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
465	[BUG]  [BUGGY]  if(ch!=  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch!=    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
466	[BUG]  [BUGGY]  if(ch!=  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch!=    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
467	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
468	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue;  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
469	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  continue;  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  continue;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
470	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
471	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  continue  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  continue  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  continue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
472	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
473	[BUG]  [BUGGY]  if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
474	[BUG]  [BUGGY]  if(ch!=  '>')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '>')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '>')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
475	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  read  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
476	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  read;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
477	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(0).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(0).recordSize);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(0).recordSize);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
478	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.get(keyword,  headers.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.get(keyword,  headers.get(i).recordSize);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.get(keyword,  headers.get(i).recordSize);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
479	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
480	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
481	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  headers.size();  i  <  read;  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  headers.size();  i  <  read;  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  headers.size();  i  <  read;  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
482	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  headerLimit  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  headerLimit  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  headerLimit  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
483	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
484	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  >=  'a')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  >=  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  >=  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
485	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
486	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
487	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'e')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
488	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
489	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
490	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
491	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
492	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
493	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
494	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
495	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
496	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
497	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'h')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
498	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'h')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
499	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'h')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
500	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'h')  {  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'h')    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
501	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
502	[BUG]  [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
503	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
504	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
505	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
506	[BUG]  [BUGGY]  if((  read  =  i.read(ch))!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  read  =  i.read(ch))!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  read  =  i.read(ch))!=  -1)  {	  if((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
507	[BUG]  [BUGGY]  if((  read  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  read  =  i.read())  >=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  read  =  i.read())  >=  -1)  {	  if((    read    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
508	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
509	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getString());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getString());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
510	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getLength());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getLength());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getLength());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
511	[BUG]  [BUGGY]  if(ch  >=  '.'  ||  ch  ==  '@')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '.'  ||  ch  ==  '@')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  '.'  ||  ch  ==  '@')  {	  if(ch!=    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
512	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch!=  '@')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch!=  '@')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch!=  '@')  {	  if(ch!=    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
513	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
514	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
515	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].getName());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].getName());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
516	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.get(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.get(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.get(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
517	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
518	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
519	[BUG]  [BUGGY]  if(ch  <  =  '['  ||  ch  >  ']'  ||  ch  >=  ']')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  '['  ||  ch  >  ']'  ||  ch  >=  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  =  '['  ||  ch  >  ']'  ||  ch  >=  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']'    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
520	[BUG]  [BUGGY]  if(ch  ==  '-'  ||  ch  ==  '+'  ||  ch  ==  '+'  ||  ch  ==  '+')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '-'  ||  ch  ==  '+'  ||  ch  ==  '+'  ||  ch  ==  '+')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '-'  ||  ch  ==  '+'  ||  ch  ==  '+'  ||  ch  ==  '+')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
521	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
522	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
523	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
524	[BUG]  [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
525	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'f'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'f'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'f'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
526	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
527	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'e'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
528	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
529	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
530	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'f'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'f'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'f'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
531	[BUG]  [BUGGY]  if(ch  <  'u'  ||  ch  >  'r'  ||  ch  >  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'u'  ||  ch  >  'r'  ||  ch  >  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'u'  ||  ch  >  'r'  ||  ch  >  't')  {	  if(ch    ==    'u'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
532	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
533	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  word  =  headers.get(i);  if(keyword!=  null)  {  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  word  =  headers.get(i);  if(keyword!=  null)  {  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  word  =  headers.get(i);  if(keyword!=  null)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
534	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
535	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
536	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
537	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'p')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
538	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
539	[BUG]  [BUGGY]  if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
540	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
541	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'e')  {	  if(ch    ==    't'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
542	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'T')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'T')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'T')  {	  if(ch    ==    't'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
543	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
544	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
545	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  't'  ||  ch  >=  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  't'  ||  ch  >=  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  't'  ||  ch  >=  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
546	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i  +  read);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i  +  read);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i  +  read);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
547	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
548	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(1);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(1);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(1);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
549	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
550	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
551	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >=  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >=  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >=  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
552	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
553	[BUG]  [BUGGY]  if(ch  <  =  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  =  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
554	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
555	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  >=  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  >=  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  >=  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
556	[BUG]  [BUGGY]  if(ch  ==  '0'  ||  ch  ==  '0')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '0'  ||  ch  ==  '0')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '0'  ||  ch  ==  '0')  {	  if(ch    ==    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
557	[BUG]  [BUGGY]  if(ch  >=  'e'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'e'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'e'  ||  ch  ==  'E')  {	  if(ch!=    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
558	[BUG]  [BUGGY]  if(ch!=  'E'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'E'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'E'  ||  ch  ==  'e')  {	  if(ch!=    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
559	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  <  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  <  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  <  =  i.read())!=  -1)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
560	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  <  0))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  <  0))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  <  0))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
561	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  'n'  ||  ch  ==  'r'))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  'n'  ||  ch  ==  'r'))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  'n'  ||  ch  ==  'r'))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
562	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r')  {	  if(ch    >=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
563	[BUG]  [BUGGY]  if(ch  >  'n'  ||  ch  <  'r')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >  'n'  ||  ch  <  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >  'n'  ||  ch  <  'r')  {	  if(ch    >=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
564	[BUG]  [BUGGY]  if(ch  <  =  'n'  ||  ch  >  'r')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  'n'  ||  ch  >  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  =  'n'  ||  ch  >  'r')  {	  if(ch    >=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
565	[BUG]  [BUGGY]  if(ch!=  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
566	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  't')  {	  if(ch!=    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
567	[BUG]  [BUGGY]  if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
568	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
569	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
570	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
571	[BUG]  [BUGGY]  if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
572	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
573	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
574	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
575	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
576	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
577	[BUG]  [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
578	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
579	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  '>')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  ||  ch  ==  '>')  {	  if(ch    ==    '-'    ||    ch    ==    '+')    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
580	[BUG]  [BUGGY]  if(ch  >=  '.'  ||  ch  ==  ','  ||  ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '.'  ||  ch  ==  ','  ||  ch  ==  '>')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  '.'  ||  ch  ==  ','  ||  ch  ==  '>')  {	  if(ch    ==    '.'    ||    ch    ==    ','    ||    ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
581	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='<  ')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='<  ')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='<  ')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch!=    'n')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
582	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  >=  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  >=  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  >=  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
583	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >=  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >=  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >=  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
584	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
585	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
586	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
587	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
588	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
589	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
590	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
591	[BUG]  [BUGGY]  if((  ch  =  i.getChronology())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.getChronology())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.getChronology())!=  -1)  {	  if((    ch    =    i.getValue())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
592	[BUG]  [BUGGY]  if((  ch  =  i.getLength())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.getLength())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.getLength())!=  -1)  {	  if((    ch    =    i.getValue())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
593	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
594	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  read;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
595	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i].getName());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i].getName());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
596	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length();  i++)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length();  i++)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.length();  i++)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
597	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
598	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  '['  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  '['  ||  ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  '['  ||  ch  ==  ']')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
599	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
600	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
601	[BUG]  [BUGGY]  if(ch  <  ':'  ||  ch  >  '>')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  ':'  ||  ch  >  '>')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  ':'  ||  ch  >  '>')  {	  if(ch    ==    ':'    ||    ch    =='<    ')    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
602	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
603	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
604	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
605	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
606	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
607	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
608	[BUG]  [BUGGY]  headers.put(keyword,  headers[i]);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  headers.put(keyword,  headers[i]);  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	headers.put(keyword,  headers[i]);	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
609	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
610	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]	  if(headers.size()    >    0)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
611	[BUG]  [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers  ==  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
612	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKey());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKey());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKey());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
613	[BUG]  [BUGGY]  headers.put(keyword,  headers[i].getValue());  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  headers.put(keyword,  headers[i].getValue());  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	headers.put(keyword,  headers[i].getValue());	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
614	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
615	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
616	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
617	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
618	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
619	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
620	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  key  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
621	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
622	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
623	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
624	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keywords  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keywords  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keywords  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
625	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
626	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
627	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
628	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
629	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
630	[BUG]  [BUGGY]  if(ch  ==  'A'  &&  ch  <  =  'Z')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'A'  &&  ch  <  =  'Z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'A'  &&  ch  <  =  'Z')  {	  if(ch!=    'a'    &&    ch    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
631	[BUG]  [BUGGY]  if((  ch  =  i.seek())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.seek())  >=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.seek())  >=  -1)  {	  if((    ch    =    i.seek())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
632	[BUG]  [BUGGY]  if((  ch  =  i.peek())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.peek())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.peek())!=  -1)  {	  if((    ch    =    i.seek())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
633	[BUG]  [BUGGY]  if(!i.hasNext())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!i.hasNext())  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!i.hasNext())  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
634	[BUG]  [BUGGY]  if(!i.isEmpty())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!i.isEmpty())  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!i.isEmpty())  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
635	[BUG]  [BUGGY]  if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  't'  ||  ch  >  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
636	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
637	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
638	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
639	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
640	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
641	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
642	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
643	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
644	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
645	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
646	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
647	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
648	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch!=    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
649	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  't')  {	  if(ch!=    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
650	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
651	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'f'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'f'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'f'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
652	[BUG]  [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  '.'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
653	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
654	[BUG]  [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
655	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
656	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
657	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
658	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='}  ')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='}  ')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  =='}  ')  {	  if(ch    ==    '.'    ||    ch    ==    ','    ||    ch    ==    '>')    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
659	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  ==  i.read())!=  -1)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
660	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch!=  i.read()))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch!=  i.read()))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch!=  i.read()))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
661	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'u'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
662	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i],  hasHitEOF);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i],  hasHitEOF);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
663	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i].getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i].getKeyword());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i].getKeyword());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
664	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	while((  ch  =  i.read())!=  -1)  {  read++;	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    i++)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
665	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
666	[BUG]  [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
667	[BUG]  [BUGGY]  if(ch  ==  '@')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '@')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
668	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i],  hasHitEOF);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i],  hasHitEOF);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
669	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
670	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  't')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
671	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
672	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
673	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  >=  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
674	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
675	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
676	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
677	[BUG]  [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
678	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(keyword);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(keyword);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(keyword);  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
679	[BUG]  [BUGGY]  if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
680	[BUG]  [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
681	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(ch);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(ch);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(ch);  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
682	[BUG]  [BUGGY]  if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
683	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'T')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'T')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'T')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
684	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
685	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
686	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
687	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
688	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
689	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  '	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
690	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
691	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
692	[BUG]  [BUGGY]  if(ch  <  =  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  =  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
693	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
694	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  'n'  ||  ch  >  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  'n'  ||  ch  >  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  'n'  ||  ch  >  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
695	[BUG]  [BUGGY]  if(ch  >  INT_9  ||  ch  <  INT_0)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >  INT_9  ||  ch  <  INT_0)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >  INT_9  ||  ch  <  INT_0)  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
696	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
697	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
698	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
699	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
700	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
701	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch!=  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
702	[BUG]  [BUGGY]  final  int  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  len  =  headers.size()  +  1;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  len  =  headers.size()  +  1;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
703	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  len  =  headers.size()  -  4;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  len  =  headers.size()  -  4;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
704	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  numRecords  =  headers.size()  *  2;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  numRecords  =  headers.size()  *  2;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
705	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  +  len;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  int  numRecords  =  headers.size()  +  len;  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  numRecords  =  headers.size()  +  len;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
706	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
707	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'a'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
708	[BUG]  [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
709	[BUG]  [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
710	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
711	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  1,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  1,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  1,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
712	[BUG]  [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString()  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString()  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString()	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).toString());    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
713	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
714	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
715	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
716	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
717	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'A')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'A')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'A')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
718	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
719	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
720	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
721	[BUG]  [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
722	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i].toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i].toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
723	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i].getName());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i].getName());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
724	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  1,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  1,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  1,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
725	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
726	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
727	[BUG]  [BUGGY]  if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
728	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
729	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {	  if(ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
730	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
731	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
732	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
733	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
734	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
735	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
736	[BUG]  [BUGGY]  if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(!keyword.equals(keyword))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
737	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(tooltip))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(tooltip))  {  continue;  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(tooltip))  {  continue;  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(!keyword.equals(keyword))    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
738	[BUG]  [BUGGY]  if(ch!=  'a'  &&  ch  <  =  'z'  ||  ch  >  'z')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'a'  &&  ch  <  =  'z'  ||  ch  >  'z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'a'  &&  ch  <  =  'z'  ||  ch  >  'z')  {	  if(ch!=    'a'    &&    ch    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
739	[BUG]  [BUGGY]  if(ch!=  'A'  &&  ch  <  =  'Z'  ||  ch  ==  'a'  &&  ch  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'A'  &&  ch  <  =  'Z'  ||  ch  ==  'a'  &&  ch  <  =  'z')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'A'  &&  ch  <  =  'Z'  ||  ch  ==  'a'  &&  ch  <  =  'z')  {	  if(ch!=    'a'    &&    ch    <    =    'z')    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
740	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'r')  {	  if(ch    ==    'n'    ||    ch    ==    'n'    ||    ch!=    'r')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
741	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'r')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'r')  {	  if(ch    ==    'n'    ||    ch    ==    'n'    ||    ch!=    'r')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
742	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't'  ||  ch  ==  't')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
743	[BUG]  [BUGGY]  if(ch!=  '.'  &&  ch  ==  '@')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  &&  ch  ==  '@')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  &&  ch  ==  '@')  {	  if(ch!=    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
744	[BUG]  [BUGGY]  if(ch!=  '.'  &&  ch  <  =  '@')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  &&  ch  <  =  '@')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  &&  ch  <  =  '@')  {	  if(ch!=    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
745	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  't')  {	  if(ch!=    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
746	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(0,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(0,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(0,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
747	[BUG]  [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
748	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i].getName());  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i].getName());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i].getName());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
749	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i].toString());  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i].toString());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i].toString());  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
750	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
751	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
752	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
753	[BUG]  [BUGGY]  if(ch  >  0x7F  ||  ch  >=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >  0x7F  ||  ch  >=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >  0x7F  ||  ch  >=  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
754	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())  ==  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())  ==  -1)  {	  if((    ch    =    i.read())    ==    -1)    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
755	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'e'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'e'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'e'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
756	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
757	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'e')    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
758	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
759	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
760	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch!=    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
761	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
762	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    final    String    keyword    =    headers.get(i);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
763	[BUG]  [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
764	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getShortName());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getShortName());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getShortName());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
765	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getHeader());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getHeader());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getHeader());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
766	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ':')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  ':')  {	  if(ch    ==    'n'    ||    ch!=    'r')    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
767	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  ','  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
768	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
769	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  'n'  ||  ch  >  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  'n'  ||  ch  >  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  <  'n'  ||  ch  >  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
770	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
771	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  <  'n')  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  <  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  <  'n')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
772	[BUG]  [BUGGY]  if((  ch  =  i.getNext())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.getNext())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.getNext())!=  -1)  {	  if((    ch    =    i.next())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
773	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'n')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
774	[BUG]  [BUGGY]  if((  ch  =  i.skip())!=  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if((  ch  =  i.skip())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.skip())!=  -1)  {	  if((    ch    =    i.seek())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
775	[BUG]  [BUGGY]  if(ch  <  =  '['  ||  ch  >  ']'  ||  ch  >  ']')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  '['  ||  ch  >  ']'  ||  ch  >  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  =  '['  ||  ch  >  ']'  ||  ch  >  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']'    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
776	[BUG]  [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  ']'  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  ' "'  ||  ch  ==  ']'  ||  ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ' "'  ||  ch  ==  ']'  ||  ch  ==  ']')  {	  if(ch    ==    '['    ||    ch    ==    ']'    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
777	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null  ||  headers.size()  ==  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
778	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(ch);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(ch);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(ch);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    return    headers.get(i);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
779	[BUG]  [BUGGY]  if(ch  ==  '@'  ||  ch  ==  ':')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@'  ||  ch  ==  ':')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '@'  ||  ch  ==  ':')  {	  if(ch    ==    '.'    ||    ch    ==    '@')    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
780	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
781	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch  ==  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch  ==  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch  ==  i.read())!=  -1)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
782	[BUG]  [BUGGY]  if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
783	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch!=  i.read()))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch!=  i.read()))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch!=  i.read()))  {	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
784	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  '[')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  '[')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  '[')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
785	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ':')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ':')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ':')  {	  if(ch    ==    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
786	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  ||  ch  ==  'e'  ||  ch  ==  'E')  {	  if(ch!=    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
787	[BUG]  [BUGGY]  if(ch!=  'e'  &&  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  'e'  &&  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'e'  &&  ch  ==  'E')  {	  if(ch!=    'e'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
788	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
789	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >=  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
790	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  <  'n'  ||  ch  >  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  <  'n'  ||  ch  >  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  >  'n'  ||  ch  >  'n'  ||  ch  <  'n'  ||  ch  >  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
791	[BUG]  [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  'n'  ||  ch  >  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  'n'  ||  ch  >  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    >=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
792	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch!=  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch!=  't')  {	  if(ch    ==    'n'    ||    ch    ==    't'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
793	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
794	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'e'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E'    ||    ch    ==    'E')    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
795	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    't'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
796	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!(ch  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!(ch  =  i.read())!=  -1)  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
797	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!(ch  =  i.read())!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!(ch  =  i.read())!=  -1)  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
798	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
799	[BUG]  [BUGGY]  if(!zipEncoding.isEmpty()  &&!i.read()!=  -1)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(!zipEncoding.isEmpty()  &&!i.read()!=  -1)  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!zipEncoding.isEmpty()  &&!i.read()!=  -1)  {	  if(!(ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
800	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    't'    ||    ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
801	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch!=    't')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
802	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
803	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
804	[BUG]  [BUGGY]  if(ch  <  =  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  <  =  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  <  =  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
805	[BUG]  [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
806	[BUG]  [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '@')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
807	[BUG]  [BUGGY]  if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  }	  if(headers!=    null)    {    for(int    i    =    0,    len    =    headers.size();    i    <    len;    ++i)    {    headers.put(keyword,    headers.get(i).recordSize);    }    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
808	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'A')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'A')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'A')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
809	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'a')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'a')    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
810	[BUG]  [BUGGY]  if(ch!=  '['  &&  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '['  &&  ch  ==  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '['  &&  ch  ==  ']')  {	  if(ch!=    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
811	[BUG]  [BUGGY]  if(ch!=  '['  &&  ch  <  =  ']')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '['  &&  ch  <  =  ']')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '['  &&  ch  <  =  ']')  {	  if(ch!=    '['    ||    ch    ==    ']')    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
812	[BUG]  [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'T'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
813	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'T')  {	  if(ch    ==    't'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
814	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch!=  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
815	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
816	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i],  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i],  hasHitEOF);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i],  hasHitEOF);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
817	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(ch,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(ch,  headers[i]);  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(ch,  headers[i]);  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
818	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].getKeyword());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].getKeyword());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(i,    headers[i]);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
819	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
820	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'p')    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
821	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
822	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
823	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'p'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
824	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
825	[BUG]  [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '>')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '>')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
826	[BUG]  [BUGGY]  if(ch  ==  '@')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '@')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '@')  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }	  if(headers!=    null)    {    for(int    i    =    0;    i    <    headers.size();    ++i)    {    headers.put(keyword,    headers[i].getValue());    }    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
827	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'a'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
828	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
829	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
830	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'p'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'p'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'p'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
831	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'h'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
832	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  't'  ||  ch  ==  'r')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
833	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    '.'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
834	[BUG]  [BUGGY]  if(ch  >  '0'  &&  ch  <  =  '9')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;      [BUGGY]  if(ch  >  '0'  &&  ch  <  =  '9')  {  [BUGGY]        final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >  '0'  &&  ch  <  =  '9')  {	  if(ch    >=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
