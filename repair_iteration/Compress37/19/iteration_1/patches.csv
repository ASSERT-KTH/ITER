bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
5	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch!=  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
6	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'r')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  'r')  {	  if(ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
7	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r')  {	  if(ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']')  {	  if(ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
10	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
12	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
13	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
14	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'e'  ||  ch  ==  'E')  {	  if(ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  if(ch  ==  '-'  ||  ch  ==  '+')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '-'  ||  ch  ==  '+')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '-'  ||  ch  ==  '+')  {	  if(ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  final  int  len  =  headers.size();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  final  int  len  =  headers.size();  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  len  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  headers.put(i,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  final  int  numRecords  =  headers.size();  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	final  int  numRecords  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
23	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
25	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch!=  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch!=  'r')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch!=  'r')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch!=  'r')  {	  if(ch!=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
33	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
34	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
35	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
36	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
37	[BUG]  [BUGGY]  if((  ch  =  i.read())  ==  -1)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if((  ch  =  i.read())  ==  -1)  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.read())  ==  -1)  {	  if((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
38	[BUG]  [BUGGY]  if((  ch  =  i.getValue())!=  -1)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if((  ch  =  i.getValue())!=  -1)  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.getValue())!=  -1)  {	  if((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
39	[BUG]  [BUGGY]  if((  ch  =  i.read())  >=  -1)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if((  ch  =  i.read())  >=  -1)  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.read())  >=  -1)  {	  if((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
40	[BUG]  [BUGGY]  if((  ch  =  i.next())!=  -1)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if((  ch  =  i.next())!=  -1)  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.next())!=  -1)  {	  if((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
41	[BUG]  [BUGGY]  if(!(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(!(ch  =  i.read())!=  -1)  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(!(ch  =  i.read())!=  -1)  {	  if((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
42	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
43	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
44	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
45	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
46	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
47	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'e')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
48	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
49	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'h')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
50	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
51	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
53	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
54	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
56	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r')  {	  if(ch!=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
57	[BUG]  [BUGGY]  if(ch!=  'e'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  'e'  ||  ch  ==  'E')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'e'  ||  ch  ==  'E')  {	  if(ch!=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
58	[BUG]  [BUGGY]  if(ch!=  'a'  &&  ch  <  =  'z')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  'a'  &&  ch  <  =  'z')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'a'  &&  ch  <  =  'z')  {	  if(ch!=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
59	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '@')  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '@')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  '@')  {	  if(ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
62	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  =='<  ')  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  ':'  ||  ch  =='<  ')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  ':'  ||  ch  =='<  ')  {	  if(ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
63	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue;  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
64	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  return  headers.get(keyword);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  return  headers.get(i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue;  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(!keyword.equals(keyword))  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  keyword  =  headers.get(i);  if(keyword!=  null)  {  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
68	[BUG]  [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'u'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
69	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
70	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
71	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
72	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
73	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
74	[BUG]  [BUGGY]  if((  ch  =  i.seek())!=  -1)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if((  ch  =  i.seek())!=  -1)  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  ch  =  i.seek())!=  -1)  {	  if((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
75	[BUG]  [BUGGY]  if((  read  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if((  read  =  i.read())!=  -1)  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if((  read  =  i.read())!=  -1)  {	  if((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
77	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
78	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
82	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
83	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
84	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'e'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E'  ||  ch  ==  'E')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
85	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
86	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
87	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '['  ||  ch  ==  ']'  ||  ch  ==  ']')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
88	[BUG]  [BUGGY]  if(ch!=  '['  ||  ch  ==  ']')  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  '['  ||  ch  ==  ']')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '['  ||  ch  ==  ']')  {	  if(ch!=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  '@')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  '.'  ||  ch  ==  '@')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  '.'  ||  ch  ==  '@')  {	  if(ch!=    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
90	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
91	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'a'  ||  ch  ==  'a')  {	  if(ch    ==    'n'    ||    ch    ==    'r')    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
92	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'p')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
93	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
94	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ','  ||  ch  ==  '>')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  '.'  ||  ch  ==  ','  ||  ch  ==  '>')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  '.'  ||  ch  ==  ','  ||  ch  ==  '>')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
95	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&(ch  =  i.read())!=  -1)  {	  if((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
96	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch  =  i.read())!=  -1)  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||(ch  =  i.read())!=  -1)  {	  if((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
97	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
98	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
99	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'a'  ||  ch  ==  'n')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n')    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
100	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
101	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).toString());  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
102	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getKeyword());  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
103	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
104	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(headers!=  null)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(keyword,  headers.get(i).recordSize);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
105	[BUG]  [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch!=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
106	[BUG]  [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  >=  'n'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
107	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
108	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  'n'  ||  ch  ==  't'  ||  ch  ==  'r'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch    ==    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
109	[BUG]  [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;    [BUGGY]  if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {  [BUGGY]      final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	462	462	1	replace	if(ch  ==  't'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  'n'  ||  ch  ==  't')  {	  if(ch!=    'n'    ||    ch    ==    'r'    ||    ch    ==    'n'    ||    ch    ==    'n'    ||    ch    ==    't')    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
