bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
2	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
3	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  <  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  -  entrySize  <  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  -  entrySize  <  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
4	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  -  entrySize  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  -  entrySize  <  =  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
5	[BUG]  [BUGGY]  if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
6	[BUG]  [BUGGY]  if(entryOffset  +  entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  +  entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  +  entrySize  <  Integer.MIN_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
7	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  -  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  -  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
8	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  -  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  -  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  getEntrySize()  +  1;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
10	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  getEntrySize()  -  1;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  long  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  getEntryLength();	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
12	[BUG]  [BUGGY]  long  entryOffset  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  getRecordSize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  getRecordSize();	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
13	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  *  2;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  getEntrySize()  *  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  getEntrySize()  *  2;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
14	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryOffset().intValue()  +  1;	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
15	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  -  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryOffset().intValue()  -  1;	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  *  2;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset().intValue()  *  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryOffset().intValue()  *  2;	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().longValue();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset().longValue();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryOffset().longValue();	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
18	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().length();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset().length();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryOffset().length();	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  Long  entryOffset  =  getEntryOffset().longValue();  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Long  entryOffset  =  getEntryOffset().longValue();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Long  entryOffset  =  getEntryOffset().longValue();	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    >    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
21	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
22	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
23	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
24	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
25	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entrySize  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entrySize    >    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
26	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  0)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  0)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  0)  {	  if(entrySize    -    entryOffset    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
27	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  SMALL_BUFFER_SIZE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  SMALL_BUFFER_SIZE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  SMALL_BUFFER_SIZE)  {	  if(entrySize    -    entryOffset    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
28	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  2)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  2)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  2)  {	  if(entrySize    -    entryOffset    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
29	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  2)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >  2)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >  2)  {	  if(entrySize    -    entryOffset    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
30	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  length)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  length)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  length)  {	  if(entrySize    -    entryOffset    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
31	[BUG]  [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryOffset()  :  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryOffset()  :  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  isDirectory()?  getEntryOffset()  :  1;	  int    entryOffset    =    isDirectory()?    getEntryOffset()    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
32	[BUG]  [BUGGY]  long  entryOffset  =  isDirectory()?  getEntryOffset()  :  0;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  isDirectory()?  getEntryOffset()  :  0;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  isDirectory()?  getEntryOffset()  :  0;	  int    entryOffset    =    isDirectory()?    getEntryOffset()    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
33	[BUG]  [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryOffset()  +  1  :  0;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryOffset()  +  1  :  0;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  isDirectory()?  getEntryOffset()  +  1  :  0;	  int    entryOffset    =    isDirectory()?    getEntryOffset()    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryOffset()  -  1  :  0;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryOffset()  -  1  :  0;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  isDirectory()?  getEntryOffset()  -  1  :  0;	  int    entryOffset    =    isDirectory()?    getEntryOffset()    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
35	[BUG]  [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryOffset()  :  0L;  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryOffset()  :  0L;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  isDirectory()?  getEntryOffset()  :  0L;	  int    entryOffset    =    isDirectory()?    getEntryOffset()    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
36	[BUG]  [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryOffset(entrySize):  0;  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryOffset(entrySize):  0;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  isDirectory()?  getEntryOffset(entrySize):  0;	  int    entryOffset    =    isDirectory()?    getEntryOffset()    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  <  entrySize  ||  entrySize  ==  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
38	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
40	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  if(entryOffset  -  entrySize  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  -  entrySize  ==  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  -  entrySize  ==  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
43	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  1)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
44	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  1)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >=  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >=  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
45	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  1)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
46	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  1)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
47	[BUG]  [BUGGY]  if(entryOffset  -  entrySize!=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  -  entrySize!=  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  -  entrySize!=  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset!=    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
48	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
50	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
51	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
52	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MAX_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
53	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntry(entrySize  +  1);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntry(entrySize  +  1);	  Integer    entryOffset    =    getEntry(entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
54	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntry(entrySize  -  1);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntry(entrySize  -  1);	  Integer    entryOffset    =    getEntry(entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
55	[BUG]  [BUGGY]  Long  entryOffset  =  getEntry(entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Long  entryOffset  =  getEntry(entrySize);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Long  entryOffset  =  getEntry(entrySize);	  Integer    entryOffset    =    getEntry(entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
56	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(entrySize,  currEntry.length);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntry(entrySize,  currEntry.length);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntry(entrySize,  currEntry.length);	  Integer    entryOffset    =    getEntry(entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
57	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryCount(entrySize);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryCount(entrySize);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryCount(entrySize);	  Integer    entryOffset    =    getEntry(entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
58	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(entrySize  +  2);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntry(entrySize  +  2);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntry(entrySize  +  2);	  Integer    entryOffset    =    getEntry(entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
59	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryOffset()  +  1;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryOffset()  -  1;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
61	[BUG]  [BUGGY]  Long  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Long  entryOffset  =  getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Long  entryOffset  =  getEntryOffset();	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
62	[BUG]  [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntryOffset();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  this.currEntry.getEntryOffset();	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
63	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  2;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryOffset()  -  2;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  Long.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
65	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Long.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
66	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  Long.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
67	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >=  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >=  Long.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
68	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Long.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  Long.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  Long.MAX_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
69	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Long.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  Long.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  Long.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
70	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Long.MIN_VALUE  ||  entrySize  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  Long.MIN_VALUE  ||  entrySize  >  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  Long.MIN_VALUE  ||  entrySize  >  Long.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
71	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
72	[BUG]  [BUGGY]  int  entryOffset  =  is.readLine()  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  is.readLine()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  is.readLine()  -  1;	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
73	[BUG]  [BUGGY]  long  entryOffset  =  is.readLine();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  is.readLine();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  is.readLine();	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
74	[BUG]  [BUGGY]  int  entryOffset  =  is.readLine()  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  is.readLine()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  is.readLine()  +  1;	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
75	[BUG]  [BUGGY]  int  entryOffset  =  is.available();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  is.available();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  is.available();	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
76	[BUG]  [BUGGY]  int  entryOffset  =  is.readFully();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  is.readFully();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  is.readFully();	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
77	[BUG]  [BUGGY]  int  entryOffset  =  is.readLine()  -  2;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  is.readLine()  -  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  is.readLine()  -  2;	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
78	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntrySize()  +  1;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
79	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntrySize()  -  1;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
80	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  -  2;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntrySize()  -  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntrySize()  -  2;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
81	[BUG]  [BUGGY]  int  entrySize  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entrySize  =  getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entrySize  =  getEntryOffset();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
82	[BUG]  [BUGGY]  long  entrySize  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entrySize  =  getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entrySize  =  getEntrySize();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
83	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entrySize  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entrySize  =  getEntrySize()  +  1;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
84	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entrySize  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entrySize  =  getEntrySize()  -  1;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
85	[BUG]  [BUGGY]  int  entrySize  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entrySize  =  this.currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entrySize  =  this.currEntry.getEntrySize();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
86	[BUG]  [BUGGY]  int  entrySize  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entrySize  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entrySize  =  getEntryLength();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
87	[BUG]  [BUGGY]  long  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  getEntryOffset();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
88	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntryOffset()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntryOffset()  +  1;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
89	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntryOffset()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntryOffset()  -  1;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
90	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  -  2;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntryOffset()  -  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntryOffset()  -  2;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
91	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
92	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
93	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  &&  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
94	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
95	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
96	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset  <  =  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
97	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset  ==  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
98	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
99	[BUG]  [BUGGY]  if(entryOffset  *  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  *  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  *  entrySize  <  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
100	[BUG]  [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset!=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
101	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
102	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
103	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
104	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset!=    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
105	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset!=    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
106	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entrySize  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entrySize  =  getEntrySize()  +  1;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
107	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entrySize  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entrySize  =  getEntrySize()  -  1;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
108	[BUG]  [BUGGY]  Integer  entrySize  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entrySize  =  getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entrySize  =  getEntryOffset();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
109	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entrySize  =  this.currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entrySize  =  this.currEntry.getEntrySize();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
110	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize()  -  2;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entrySize  =  getEntrySize()  -  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entrySize  =  getEntrySize()  -  2;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
111	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize()  /  2;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entrySize  =  getEntrySize()  /  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entrySize  =  getEntrySize()  /  2;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
112	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  >=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset  >=  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset  >=  Integer.MIN_VALUE)  {	  if(entrySize    *    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
113	[BUG]  [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset!=  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset!=  Integer.MIN_VALUE)  {	  if(entrySize    *    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
114	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength()  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntryLength()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntryLength()  +  1;	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
115	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength()  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntryLength()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntryLength()  -  1;	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
116	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength()  -  2;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntryLength()  -  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntryLength()  -  2;	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
117	[BUG]  [BUGGY]  short  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  short  entryOffset  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	short  entryOffset  =  getEntryLength();	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
118	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
119	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  <  entrySize  ||  entrySize  <  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
120	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    >=    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
121	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >=  Integer.MIN_VALUE  ||  entrySize  <  =  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    >=    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
122	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntrySize()  +  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntrySize()  +  1;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
123	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntrySize()  -  1;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
124	[BUG]  [BUGGY]  Long  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Long  entryOffset  =  getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Long  entryOffset  =  getEntrySize();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
125	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryLength();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
126	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryStart();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryStart();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryStart();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
127	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  2;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntrySize()  -  2;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
128	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
129	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
130	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
131	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >=  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >=  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >=  MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
132	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  MAX_VALUE  ||  entrySize  >  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  MAX_VALUE  ||  entrySize  >  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  MAX_VALUE  ||  entrySize  >  MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
133	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  MAX_VALUE  ||  entryOffset  >  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  MAX_VALUE  ||  entryOffset  >  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  MAX_VALUE  ||  entryOffset  >  MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
134	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  this.blockSize)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  this.blockSize)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  this.blockSize)  {	  if(entrySize    -    entryOffset    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
135	[BUG]  [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  this.currEntry.getEntrySize();	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
136	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
137	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
138	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  Integer.MIN_VALUE  ||  entrySize  >=  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    <    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
139	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  /  entryOffset  >=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  /  entryOffset  >=  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
140	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >>  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >>  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >>  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    >=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
141	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry(recordSize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntry(recordSize);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntry(recordSize);	  Integer    entryOffset    =    getEntry(entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
142	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryCount();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntryCount();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntryCount();	  Integer    entryOffset    =    getEntry(entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
143	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Long.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
144	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entrySize  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entrySize  =  getEntrySize()  +  SMALL_BUFFER_SIZE;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
145	[BUG]  [BUGGY]  Integer  entrySize  =  currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entrySize  =  currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entrySize  =  currEntry.getEntrySize();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
146	[BUG]  [BUGGY]  Integer  entrySize  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entrySize  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entrySize  =  getEntryLength();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
147	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  -  currEntry.length;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntrySize()  -  currEntry.length;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntrySize()  -  currEntry.length;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
148	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntrySize()  -  blockSize;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntrySize()  -  blockSize;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
149	[BUG]  [BUGGY]  int  entryOffset  =  isDirectory()?  getEntrySize()  :  0;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  isDirectory()?  getEntrySize()  :  0;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  isDirectory()?  getEntrySize()  :  0;	  int    entryOffset    =    isDirectory()?    getEntryOffset()    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
150	[BUG]  [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryStart()  :  0;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryStart()  :  0;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  isDirectory()?  getEntryStart()  :  0;	  int    entryOffset    =    isDirectory()?    getEntryOffset()    :    0;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
151	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >  MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
152	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  >>  MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  >>  MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  >>  MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
153	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  ==  Long.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  ==  Long.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  ==  Long.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
154	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Long.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  Long.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  Long.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Long.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
155	[BUG]  [BUGGY]  int  entryOffset  =  this.currEntry.getEntryOffset();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  this.currEntry.getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  this.currEntry.getEntryOffset();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
156	[BUG]  [BUGGY]  int  entryOffset  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  this.currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  this.currEntry.getEntrySize();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
157	[BUG]  [BUGGY]  if(entryOffset  *  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  *  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  *  entrySize  ==  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
158	[BUG]  [BUGGY]  if(entrySize  *  length  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  length  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  length  <  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
159	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  -  currEntry.length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  getEntrySize()  -  currEntry.length;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  getEntrySize()  -  currEntry.length;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
160	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  getEntrySize()  -  blockSize;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  getEntrySize()  -  blockSize;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
161	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset  <  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
162	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset  ==  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    ==    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
163	[BUG]  [BUGGY]  if(entryOffset  *  entrySize!=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  *  entrySize!=  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  *  entrySize!=  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize!=    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
164	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  +  2;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntrySize()  +  2;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntrySize()  +  2;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
165	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  Integer.MIN_VALUE  &&  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
166	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  Integer.MIN_VALUE  ||  entrySize  ==  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset!=    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
167	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  3)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  3)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  3)  {	  if(entrySize    -    entryOffset    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
168	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset  <  Integer.MIN_VALUE  ||  entryOffset  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
169	[BUG]  [BUGGY]  int  entrySize  =  currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entrySize  =  currEntry.getEntrySize();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entrySize  =  currEntry.getEntrySize();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
170	[BUG]  [BUGGY]  int  entryOffset  =  currEntry.readLine();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  currEntry.readLine();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  currEntry.readLine();	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
171	[BUG]  [BUGGY]  int  entryOffset  =  is.readFully(true);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  is.readFully(true);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  is.readFully(true);	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
172	[BUG]  [BUGGY]  Integer  entryOffset  =  currEntry.getEntryOffset().intValue();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  currEntry.getEntryOffset().intValue();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  currEntry.getEntryOffset().intValue();	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
173	[BUG]  [BUGGY]  Long  entryOffset  =  getEntryOffset().intValue();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Long  entryOffset  =  getEntryOffset().intValue();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Long  entryOffset  =  getEntryOffset().intValue();	  Integer    entryOffset    =    getEntryOffset().intValue();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
174	[BUG]  [BUGGY]  if(entrySize  -  entryOffset!=  1)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset!=  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset!=  1)  {	  if(entrySize    -    entryOffset    <    1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
175	[BUG]  [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryLength()  :  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryLength()  :  0;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  isDirectory()?  getEntryLength()  :  0;	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
176	[BUG]  [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryLength()  :  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  isDirectory()?  getEntryLength()  :  1;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  isDirectory()?  getEntryLength()  :  1;	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
177	[BUG]  [BUGGY]  int  entryOffset  =  is.readLine()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  is.readLine()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  is.readLine()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
178	[BUG]  [BUGGY]  int  entryOffset  =  this.isDirectory()?  is.readLine()  :  0;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  this.isDirectory()?  is.readLine()  :  0;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  this.isDirectory()?  is.readLine()  :  0;	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
179	[BUG]  [BUGGY]  int  entryOffset  =  is.readLine()  &&  isEnabled(Feature.QUOTE_FIELD_SIZE);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  is.readLine()  &&  isEnabled(Feature.QUOTE_FIELD_SIZE);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  is.readLine()  &&  isEnabled(Feature.QUOTE_FIELD_SIZE);	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
180	[BUG]  [BUGGY]  int  entryOffset  =  this.currEntry.readLine();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  this.currEntry.readLine();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  this.currEntry.readLine();	  int    entryOffset    =    is.readLine();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
181	[BUG]  [BUGGY]  short  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  short  entryOffset  =  getEntryOffset();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	short  entryOffset  =  getEntryOffset();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
182	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  =  LAST_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  =  LAST_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  =  LAST_VALUE  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entrySize    -    entryOffset    <    =    Integer.MIN_VALUE    ||    entrySize    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
183	[BUG]  [BUGGY]  if(entrySize  /  entryOffset  <  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  /  entryOffset  <  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  /  entryOffset  <  Integer.MAX_VALUE)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
184	[BUG]  [BUGGY]  if(entrySize  *  entryOffset  <  1)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  *  entryOffset  <  1)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  *  entryOffset  <  1)  {	  if(entrySize    *    entryOffset    <    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
185	[BUG]  [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entryOffset  <  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entryOffset  <  entrySize  ||  entrySize  >  Integer.MAX_VALUE)  {	  if(entryOffset    -    entrySize    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
186	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  blockSize;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entryOffset  =  getEntrySize()  -  blockSize;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
187	[BUG]  [BUGGY]  long  entryOffset  =  getEntry(entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  getEntry(entrySize);  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  getEntry(entrySize);	  Integer    entryOffset    =    getEntry(entrySize);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
188	[BUG]  [BUGGY]  Integer  entrySize  =  getEntry().length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Integer  entrySize  =  getEntry().length;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Integer  entrySize  =  getEntry().length;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
189	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  SMALL_BUFFER_SUZE)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  SMALL_BUFFER_SUZE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  SMALL_BUFFER_SUZE)  {	  if(entrySize    -    entryOffset    <    2)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
190	[BUG]  [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MIN_VALUE)  {  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	if(entrySize  -  entryOffset  <  Integer.MAX_VALUE  ||  entryOffset  >  Integer.MIN_VALUE)  {	  if(entrySize    -    entryOffset    <    Integer.MIN_VALUE    ||    entryOffset    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
191	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  int  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	int  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
192	[BUG]  [BUGGY]  Long  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  Long  entryOffset  =  getEntryLength();  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	Long  entryOffset  =  getEntryLength();	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
193	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }      [BUGGY]  long  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [BUGGY]      return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	187	187	1	replace	long  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
