bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
2	[BUG]  [BUGGY]  headers.put(keyword,  headers.get(ch).toString());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  headers.put(keyword,  headers.get(ch).toString());  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	headers.put(keyword,  headers.get(ch).toString());	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
3	[BUG]  [BUGGY]  Headers.put(keyword,  headers.get(ch).toString());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Headers.put(keyword,  headers.get(ch).toString());  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	Headers.put(keyword,  headers.get(ch).toString());	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
4	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(ch,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(ch,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  len;  read++)  {  headers.put(ch,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
5	[BUG]  [BUGGY]  final  int  len  =  headers.size();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  final  int  len  =  headers.size();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	final  int  len  =  headers.size();	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
6	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(word,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(word,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  len;  read++)  {  headers.put(word,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
7	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext())  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
8	[BUG]  [BUGGY]  if(hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(hasHitEOF)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  while(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(!hasHitEOF)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  if(!hasHitEOF)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext())  {  read++;  }  else  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
11	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
12	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
13	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
14	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
15	[BUG]  [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext())  {  if(headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
16	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  returned  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
18	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
19	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
20	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null  ||  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
22	[BUG]  [BUGGY]  final  int  headersLimit  =  headers.size();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  final  int  headersLimit  =  headers.size();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	final  int  headersLimit  =  headers.size();	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
23	[BUG]  [BUGGY]  final  int  headerLimit  =  headers.size();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  final  int  headerLimit  =  headers.size();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	final  int  headerLimit  =  headers.size();	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
24	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
25	[BUG]  [BUGGY]  if(ch!=  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch!=  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch!=  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
26	[BUG]  [BUGGY]  if(ch!=  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch!=  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch!=  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
27	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
28	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString()  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString()  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString()	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
29	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
30	[BUG]  [BUGGY]  ||(i.hasNext()))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	||(i.hasNext()))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  headers.put(ch,  i);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  headers.put(ch,  i);  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	headers.put(ch,  i);	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  null);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  null);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  null);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  ||(i.hasNext()  &&  headers.contains(ch)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||(i.hasNext()  &&  headers.contains(ch)))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	||(i.hasNext()  &&  headers.contains(ch)))  {  read++;  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
36	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
37	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(!headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  while(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
39	[BUG]  [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(Map.Entry  <  String,  String>  entry  :  headers.entrySet())  {  read++;  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
40	[BUG]  [BUGGY]  if(i.hasNext()  >  read)  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  >  read)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext()  >  read)  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
41	[BUG]  [BUGGY]  if(i.hasNext()  <  len)  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  <  len)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext()  <  len)  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
42	[BUG]  [BUGGY]  while(i.hasNext())  {  read++;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(i.hasNext())  {  read++;  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while(i.hasNext())  {  read++;	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
43	[BUG]  [BUGGY]  while(i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(i.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while(i.hasNext())  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  ReadNow.write(headers,  i.next());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ReadNow.write(headers,  i.next());  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	ReadNow.write(headers,  i.next());	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
45	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
46	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
47	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
48	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
49	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
50	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
51	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(len,  headers);  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'n')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(len,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'n')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(len,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(len,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
52	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'n')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'n')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(len,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
53	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  headers.put(len,  headers);  }  else  {  headers.put(len,  headers);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  headers.put(len,  headers);  }  else  {  headers.put(len,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  headers.put(len,  headers);  }  else  {  headers.put(len,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(len,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
54	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  headers.put(len,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  headers.put(len,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  headers.put(len,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(len,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
55	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
56	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
57	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
58	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
59	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
60	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
61	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
62	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
63	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
64	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
65	[BUG]  [BUGGY]  if(ch  ==  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  '.')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
66	[BUG]  [BUGGY]  headers.put(keyword,  headers.get(ch));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  headers.put(keyword,  headers.get(ch));  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	headers.put(keyword,  headers.get(ch));	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
67	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(keyword,  headers.get(ch));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.put(keyword,  headers.get(ch));  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.put(keyword,  headers.get(ch));	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
68	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch)  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch)  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while((  ch  =  i.read())!=  -1)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch)	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
69	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(index);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
70	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while((  ch  =  i.read())!=  -1)  {  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(index);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while((  ch  =  i.read())!=  -1)  {	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(index);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index  +  1);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index  +  1);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index  +  1);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(index);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
73	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(0);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(0);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(0);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(index);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
74	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index).toString();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index).toString();  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index).toString();  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(index);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
75	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(i,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
76	[BUG]  [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext())  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(i,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
77	[BUG]  [BUGGY]  if(ch  ==  'n')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'n')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'n')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(i,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(i,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  final  int  numRecords  =  headers.size();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	final  int  numRecords  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  ch  =  i.read();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ch  =  i.read();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	ch  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
81	[BUG]  [BUGGY]  final  int  n  =  headers.size();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  final  int  n  =  headers.size();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	final  int  n  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
82	[BUG]  [BUGGY]  final  int  read  =  i.read();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  final  int  read  =  i.read();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	final  int  read  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
83	[BUG]  [BUGGY]  final  int  read  =  headers.size();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  final  int  read  =  headers.size();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	final  int  read  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
84	[BUG]  [BUGGY]  read  =  i.read();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  =  i.read();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	read  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
85	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(read);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
86	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(read);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
87	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null  ||  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null  ||  headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(read);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
88	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(read);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(0);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(0);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(0);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(read);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
90	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(i);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(i);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(i);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(read);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
91	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while((  ch  =  i.read())!=  -1)  {  read++;  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while((  ch  =  i.read())!=  -1)  {  read++;	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
92	[BUG]  [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'e'  ||  ch  ==  'E')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'e'  ||  ch  ==  'E')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
93	[BUG]  [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  '['  ||  ch  ==  ']')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  '['  ||  ch  ==  ']')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
95	[BUG]  [BUGGY]  if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
96	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
97	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
98	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
99	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!headers.contains(ch))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
100	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  headers.size();  read++)  {  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
101	[BUG]  [BUGGY]  For(int  read  =  0;  read  <  headers.size();  read++)  {  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  For(int  read  =  0;  read  <  headers.size();  read++)  {  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	For(int  read  =  0;  read  <  headers.size();  read++)  {  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
102	[BUG]  [BUGGY]  while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
103	[BUG]  [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  for(int  read  =  0;  read  <  headers.size();  read++)  {  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	for(int  read  =  0;  read  <  headers.size();  read++)  {	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
104	[BUG]  [BUGGY]  while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
105	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
106	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
107	[BUG]  [BUGGY]  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.contains(ch)||  headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
108	[BUG]  [BUGGY]  if(headers!=  null)  {  if(!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(!headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
109	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null  ||  headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null  ||  headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
110	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'n'  ||  ch  ==  't')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
111	[BUG]  [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'r'  ||  ch  ==  'n')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'r'  ||  ch  ==  'n')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
112	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
113	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  heads.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  heads.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  heads.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
114	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
115	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
116	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
117	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
118	[BUG]  [BUGGY]  if(!hasHitEOF  &&  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  i.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF  &&  i.hasNext())  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
119	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.AUTO_CLOSE_SOURCE))  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
120	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  else  {  headers.put(i,  headers);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  else  {  headers.put(i,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  else  {  headers.put(i,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(i,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
121	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
122	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
123	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.get(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
124	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
125	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(word,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(word,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(word,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
126	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.get(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.get(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.get(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
127	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  heads.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  heads.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  heads.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
128	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(0).toString());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(0).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(0).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
129	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  read!=  0)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
130	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
131	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
132	[BUG]  [BUGGY]  headers.put(ch,  headers);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  headers.put(ch,  headers);  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	headers.put(ch,  headers);	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
133	[BUG]  [BUGGY]  if(headers!=  null)  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  while(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
134	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
135	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
136	[BUG]  [BUGGY]  read  =  i.next();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  =  i.next();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	read  =  i.next();	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
137	[BUG]  [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.get(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext())  {  read++;  }  else  {  headers.get(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext())  {  read++;  }  else  {  headers.get(ch,  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
138	[BUG]  [BUGGY]  read  +=  i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  read  +=  i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	read  +=  i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
139	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
140	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.get(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
141	[BUG]  [BUGGY]  if(headers!=  null)  {  headers  =  headers.get(ch);  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  headers  =  headers.get(ch);  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  headers  =  headers.get(ch);  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
142	[BUG]  [BUGGY]  headers.size()  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  headers.size()  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	headers.size()  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
143	[BUG]  [BUGGY]  while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  heads.size();  read++)  {  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  heads.size();  read++)  {  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  heads.size();  read++)  {  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
144	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(0,  headers);  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(0,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(0,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(len,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
145	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  else  {  headers.put(len,  headers);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  else  {  headers.put(len,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'n'  ||  ch  ==  't')  {  read++;  }  else  {  headers.put(len,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(len,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
146	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(headers,  headers);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(headers,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(headers,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(len,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
147	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).reset();  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).reset();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).reset();	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
148	[BUG]  [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read);  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	((  TarArchiveEntry  <  K,  V>)i.next()).setRead(read);	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
149	[BUG]  [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  ((  TarArchiveEntry)i.next()).addHeader(headers,  read);  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	((  TarArchiveEntry)i.next()).addHeader(headers,  read);	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
150	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  heads.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  heads.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  heads.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
151	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  heads.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  heads.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  heads.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
152	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(word,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(word,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(word,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
153	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.get(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.get(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.get(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
154	[BUG]  [BUGGY]  if(headers.size()  ==  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  ==  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  ==  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(read);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
155	[BUG]  [BUGGY]  if(headers.size()!=  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()!=  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()!=  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(read);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(read);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
156	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(0);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(0);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(0);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(read);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
157	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(index);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
158	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index-1);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index-1);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(index-1);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(index);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
159	[BUG]  [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  continue;  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
160	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  globalPaxHeaders.size();  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  globalPaxHeaders.size();  read++)  {  continue;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  globalPaxHeaders.size();  read++)  {  continue;  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
161	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.get(0);  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.get(0);  read++)  {  continue;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.get(0);  read++)  {  continue;  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
162	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.get(ch);  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.get(ch);  read++)  {  continue;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.get(ch);  read++)  {  continue;  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
163	[BUG]  [BUGGY]  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null  ||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
164	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(ch))  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.containsKey(ch))  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
165	[BUG]  [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers!=  null)  {  if(headers.containsKey(key))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
166	[BUG]  [BUGGY]  Integer  i  =  headers.get(headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Integer  i  =  headers.get(headers.size()  -  1);  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	Integer  i  =  headers.get(headers.size()  -  1);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
167	[BUG]  [BUGGY]  Integer  i  =  headers.get(headers.size());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Integer  i  =  headers.get(headers.size());  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	Integer  i  =  headers.get(headers.size());	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
168	[BUG]  [BUGGY]  Integer  i  =  headers.readInt();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  Integer  i  =  headers.readInt();  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	Integer  i  =  headers.readInt();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
169	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
170	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
171	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
172	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
173	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
174	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
175	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(i);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(i);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  return  headers.get(i);  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    return    headers.get(read);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
176	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
177	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
178	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
179	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers.get(i).toString());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers.get(i).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers.get(i).toString());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
180	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i].getValue());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
181	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  i  =  read;  i  <  headers.size();  ++i)  {  headers.put(keyword,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
182	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].getHeaderSize());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].getHeaderSize());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  headers.put(i,  headers[i].getHeaderSize());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
183	[BUG]  [BUGGY]  if(i.read()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
184	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  -1)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  -1)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
185	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
186	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
187	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString()  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString()  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch).toString()	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
188	[BUG]  [BUGGY]  if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF  &&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
189	[BUG]  [BUGGY]  if(!hasHitEOF  &&  headers.containsKey(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  headers.containsKey(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF  &&  headers.containsKey(ch))  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
190	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.AUTO_CLOSE_SIZE))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.AUTO_CLOSE_SIZE))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.AUTO_CLOSE_SIZE))  {  read++;  }	  if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
191	[BUG]  [BUGGY]  if(i.read()  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
192	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  -1)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  -1)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
193	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
194	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  len;  read++)  {  headers.put(keyword,  headers.get(ch).toString());  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    len;    read++)    {    headers.put(keyword,    headers.get(ch).toString());    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
195	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  headers.put(0,  headers.size()  -  1);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    headers.put(0,    headers.size()    -    1);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
196	[BUG]  [BUGGY]  if(i.read()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
197	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  -1)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  -1)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
198	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
199	[BUG]  [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch!=  'n')  {  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
200	[BUG]  [BUGGY]  if(ch!=  'n')  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch!=  'n')  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch!=  'n')  {  for(int  read  =  0;  read  <  headers.size();  read++)  {  headers.put(keyword,  headers.get(ch));  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    headers.put(keyword,    headers.get(ch));    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
201	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  this.headers.size();  read++)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  this.headers.size();  read++)  {  continue;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  for(int  read  =  0;  read  <  this.headers.size();  read++)  {  continue;  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
202	[BUG]  [BUGGY]  if(ch  <  =  '9')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  <  =  '9')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  <  =  '9')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(len,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
203	[BUG]  [BUGGY]  if(ch  ==  ':')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  ':')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  ':')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(len,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
204	[BUG]  [BUGGY]  if(ch  <  =  '0')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  <  =  '0')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  <  =  '0')  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(len,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
205	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  -1)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  -1)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
206	[BUG]  [BUGGY]  if(i.read()  >  0)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  0)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  0)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
207	[BUG]  [BUGGY]  if(i.read()  >  0)  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  0)  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  0)  {  if(headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
208	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  -1)  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  -1)  {  if(headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
209	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch.equals(headers.next()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  ch.equals(headers.next()))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext()  ||  ch.equals(headers.next()))  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
210	[BUG]  [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  i.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext()  ||  i.hasNext())  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
211	[BUG]  [BUGGY]  if(i.hasNext()  ||  ch.getLength()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.hasNext()  ||  ch.getLength()  >  0)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.hasNext()  ||  ch.getLength()  >  0)  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
212	[BUG]  [BUGGY]  if(!i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!i.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!i.hasNext())  {  read++;  }	  if(i.hasNext())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
213	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
214	[BUG]  [BUGGY]  if(i.read()  >  0)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  0)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  0)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
215	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  -1)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  -1)  {  if(headers.contains(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  return  headers;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
216	[BUG]  [BUGGY]  if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers  ==  null)  {  if(headers.contains(ch))  {  read++;  }	  if(headers.contains(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
217	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
218	[BUG]  [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
219	[BUG]  [BUGGY]  if(i.read()  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  else  {  headers.put(i,  headers);  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(i,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
220	[BUG]  [BUGGY]  if(i.read()  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  ==  -1)  {  if(ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    else    {    headers.put(i,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
221	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF)  {  if(i.hasNext())  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
222	[BUG]  [BUGGY]  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF)  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
223	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(!hasHitEOF)  {  if(i.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(!hasHitEOF)  {  if(i.hasNext())  {  read++;  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
224	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  if(i.hasNext())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.size()  >  0)  {  if(i.hasNext())  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.size()  >  0)  {  if(i.hasNext())  {  read++;  }	  if(i.hasNext())    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
225	[BUG]  [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '@')  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(ch  ==  '.'  ||  ch  ==  '@')  {  read++;  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(ch  ==  '.'  ||  ch  ==  '@')  {  read++;  }	  if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
226	[BUG]  [BUGGY]  while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.get(0);  read++)  {  }  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.get(0);  read++)  {  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	while(headers.size()  >  0)  {  for(int  read  =  0;  read  <  headers.get(0);  read++)  {  }	  if(headers.size()    >    0)    {    for(int    read    =    0;    read    <    headers.size();    read++)    {    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
227	[BUG]  [BUGGY]  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  -1)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
228	[BUG]  [BUGGY]  if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(i.read()  >  0)  {  if(headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
229	[BUG]  [BUGGY]  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {    [BUGGY]  if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }  [BUGGY]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	461	461	1	replace	if(headers.containsKey(ch)||  headers.containsKey(ch))  {  read++;  }  else  {  headers.put(ch,  headers);  }	  if(headers.containsKey(ch))    {    read++;    }    else    {    headers.put(ch,    headers);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
