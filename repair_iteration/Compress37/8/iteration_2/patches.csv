bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableEnd()  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableEnd()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableEnd()  -  1);	  numToRead    =    Math.min(numToRead,    this.availableEnd());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
2	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableEnd()  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableEnd()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableEnd()  +  1);	  numToRead    =    Math.min(numToRead,    this.availableEnd());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
3	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableEnd()  -  offset);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableEnd()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableEnd()  -  offset);	  numToRead    =    Math.min(numToRead,    this.availableEnd());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
4	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableStart());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableStart());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableStart());	  numToRead    =    Math.min(numToRead,    this.availableEnd());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
5	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableEnd()  -  2);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableEnd()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableEnd()  -  2);	  numToRead    =    Math.min(numToRead,    this.availableEnd());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
6	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numToRead  =  is.read(buf,  offset,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  is.read(buf,  offset,  entrySize);	  int    numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
7	[BUG]  [BUGGY]  int  numToRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numToRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  currEntry.read(buf,  offset,  numToRead);	  int    numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
8	[BUG]  [BUGGY]  byte  numToRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  byte  numToRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	byte  numToRead  =  is.read(buf,  offset,  numToRead);	  int    numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
9	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
10	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  len);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numToRead  =  is.read(buf,  offset,  len);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  is.read(buf,  offset,  len);	  int    numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
11	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numToRead  =  is.read(buf,  offset,  0);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  is.read(buf,  offset,  0);	  int    numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
12	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  1);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numToRead  =  is.read(buf,  offset,  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  is.read(buf,  offset,  1);	  int    numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
13	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  +  1,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen  +  1,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
14	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entrySize  +  1);	  numToRead    =    Math.min(numToRead,    availableLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
15	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  *  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen  *  1);	  numToRead    =    Math.min(numToRead,    availableLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
16	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  +  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  +  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen  +  2);	  numToRead    =    Math.min(numToRead,    availableLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
17	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  numToRead  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  numToRead  +  1);	  numToRead    =    Math.min(numToRead,    availableLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
18	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize  +  1);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
19	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
20	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  /  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  /  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  /  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
21	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  *  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  *  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  *  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
22	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  totalRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  totalRead);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
23	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.length()  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.length()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.length()  -  1);	  numToRead    =    Math.min(numToRead,    this.length());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.length()  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.length()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.length()  +  1);	  numToRead    =    Math.min(numToRead,    this.length());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
25	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  rest.length());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  rest.length());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  rest.length());	  numToRead    =    Math.min(numToRead,    this.length());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
26	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.length());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.length());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.length());	  numToRead    =    Math.min(numToRead,    this.length());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
27	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.length()  -  2);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.length()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.length()  -  2);	  numToRead    =    Math.min(numToRead,    this.length());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.length()  -  1,  this.length());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.length()  -  1,  this.length());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.length()  -  1,  this.length());	  numToRead    =    Math.min(numToRead,    this.length());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  restLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  restLen);	  numToRead    =    Math.min(numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
30	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(entrySize,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(entrySize,  numToRead);	  numToRead    =    Math.min(numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
31	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  rest.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  rest.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  rest.length);	  numToRead    =    Math.min(numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
32	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  offset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  offset);	  numToRead    =    Math.min(numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
33	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  cache.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  cache.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  cache.length);	  numToRead    =    Math.min(numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
34	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  entrySize);	  numToRead    =    Math.min(0,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
35	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  numToRead);	  numToRead    =    Math.min(0,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
36	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  numRecords);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  numRecords);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  numRecords);	  numToRead    =    Math.min(0,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
37	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  totalRead);	  numToRead    =    Math.min(0,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
38	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  accessSize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  accessSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  accessSize);	  numToRead    =    Math.min(0,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
39	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  count);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  count);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  count);	  numToRead    =    Math.min(0,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
40	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableLen  -  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableLen  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableLen  -  1);	  numToRead    =    Math.min(0,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
41	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleOffset());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleOffset());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessibleOffset());	  numToRead    =    Math.min(numToRead,    availableOffset()    +    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
42	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  *  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  *  1);	  numToRead    =    Math.min(numToRead,    availableOffset()    +    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
43	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset())+  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset())+  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset())+  1;	  numToRead    =    Math.min(numToRead,    availableOffset()    +    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
44	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
45	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
46	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
47	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
48	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
49	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
50	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
51	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  entryOffset);	  numToRead    =    Math.min(0,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
52	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  fullNameData.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  fullNameData.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  fullNameData.length);	  numToRead    =    Math.min(0,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
53	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  accessLen);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  accessLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  accessLen);	  numToRead    =    Math.min(0,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
54	[BUG]  [BUGGY]  numToRead  =  Math.max(0,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(0,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(0,  numToRead);	  numToRead    =    Math.min(availableSize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
55	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleSize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessibleSize);	  numToRead    =    Math.min(availableSize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
56	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessSize);	  numToRead    =    Math.min(availableSize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
57	[BUG]  [BUGGY]  numToRead  =  Math.min(length,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(length,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(length,  numToRead);	  numToRead    =    Math.min(availableSize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
58	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  is.read(buf,  offset,  entrySize);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
59	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
60	[BUG]  [BUGGY]  int  numRecords  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.read(buf,  offset,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
61	[BUG]  [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  byte  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	byte  numRecords  =  is.read(buf,  offset,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
62	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  is.read(buf,  offset,  0);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
63	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  is.read(buf,  offset,  totalRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
64	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  len);  [CE]  illegal  start  of  type  [FE]                                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  len);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  is.read(buf,  offset,  len);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
65	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount()  -  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableCount()  -  1);	  numToRead    =    Math.min(numToRead,    this.availableCount());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
66	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount()  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableCount()  +  1);	  numToRead    =    Math.min(numToRead,    this.availableCount());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
67	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount()  -  2);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableCount()  -  2);	  numToRead    =    Math.min(numToRead,    this.availableCount());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
68	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  this.availableCount()  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  this.availableCount()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  this.availableCount()  -  1);	  numToRead    =    Math.min(numToRead,    this.availableCount());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
69	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount()  *  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount()  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableCount()  *  2);	  numToRead    =    Math.min(numToRead,    this.availableCount());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
70	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  this.availableCount());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  this.availableCount());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  this.availableCount());	  numToRead    =    Math.min(numToRead,    this.availableCount());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
71	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessCount()  -  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessCount()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessCount()  -  1);	  numToRead    =    Math.min(numToRead,    accessCount());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
72	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessCount()  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessCount()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessCount()  +  1);	  numToRead    =    Math.min(numToRead,    accessCount());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
73	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessCount(1));  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessCount(1));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessCount(1));	  numToRead    =    Math.min(numToRead,    accessCount());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
74	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessSize());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessSize());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessSize());	  numToRead    =    Math.min(numToRead,    accessCount());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
75	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  0,  accessCount());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  0,  accessCount());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  0,  accessCount());	  numToRead    =    Math.min(numToRead,    accessCount());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
76	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  offset,  accessCount());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  offset,  accessCount());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  offset,  accessCount());	  numToRead    =    Math.min(numToRead,    accessCount());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
77	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordSize()  +  1;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
78	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  -  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordSize()  -  1;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
79	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLimit();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordLimit();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordLimit();	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
80	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  *  2;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  *  2;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordSize()  *  2;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
81	[BUG]  [BUGGY]  Integer  numRecords  =  currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  Integer  numRecords  =  currEntry.getRecordSize();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	Integer  numRecords  =  currEntry.getRecordSize();	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
82	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize(entrySize);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordSize(entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordSize(entrySize);	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
83	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableCount()  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableCount()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableCount()  -  1);	  numToRead    =    Math.min(numToRead,    is.availableCount());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
84	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableCount()  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableCount()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableCount()  +  1);	  numToRead    =    Math.min(numToRead,    is.availableCount());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
85	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.readCount());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.readCount());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.readCount());	  numToRead    =    Math.min(numToRead,    is.availableCount());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
86	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableCount()  -  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableCount()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableCount()  -  2);	  numToRead    =    Math.min(numToRead,    is.availableCount());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
87	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.length());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.length());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.length());	  numToRead    =    Math.min(numToRead,    is.availableCount());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
88	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.availableCount());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.availableCount());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.availableCount());	  numToRead    =    Math.min(numToRead,    is.availableCount());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
89	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  is.read(buf,  offset,  numToRead);	  numToRead    =    Math.min(numToRead,    is.availableCount());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
90	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.entrySize  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.entrySize  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.entrySize  +  1);	  numToRead    =    Math.min(numToRead,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
91	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.entryOffset);	  numToRead    =    Math.min(numToRead,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
92	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.entryLimit);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.entryLimit);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.entryLimit);	  numToRead    =    Math.min(numToRead,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
93	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.currEntrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.currEntrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.currEntrySize);	  numToRead    =    Math.min(numToRead,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
94	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  this.entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  this.entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  this.entrySize);	  numToRead    =    Math.min(numToRead,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
95	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
97	[BUG]  [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
98	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
99	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
100	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
101	[BUG]  [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
102	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableOffset()  -  1);	  numToRead    =    Math.min(numToRead,    this.availableOffset());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
103	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableOffset()  +  1);	  numToRead    =    Math.min(numToRead,    this.availableOffset());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
104	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  -  offset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableOffset()  -  offset);	  numToRead    =    Math.min(numToRead,    this.availableOffset());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
105	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableOffset()  -  entrySize);	  numToRead    =    Math.min(numToRead,    this.availableOffset());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
106	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  -  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableOffset()  -  2);	  numToRead    =    Math.min(numToRead,    this.availableOffset());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
107	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableStart()  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableStart()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableStart()  -  1);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
108	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  *  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  *  1);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
109	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd())-  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd())-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd())-  1;	  numToRead    =    Math.min(numToRead,    availableEnd()    -    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
110	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  *  2);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  *  2);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
111	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  *  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  *  1);	  numToRead    =    Math.min(numToRead,    availableLen()    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
112	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  *  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  *  2);	  numToRead    =    Math.min(numToRead,    availableLen()    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
113	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize()  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableSize()  -  1);	  numToRead    =    Math.min(numToRead,    availableLen()    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
114	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen())-  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen())-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen())-  1;	  numToRead    =    Math.min(numToRead,    availableLen()    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
115	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  offset,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  -  offset,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableLen()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
116	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableLen()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
117	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  offset  +  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  offset  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  -  offset  +  1);	  numToRead    =    Math.min(numToRead,    availableLen()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
118	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  offset,  len);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  offset,  len);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  -  offset,  len);	  numToRead    =    Math.min(numToRead,    availableLen()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
119	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  *  offset);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  *  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  *  offset);	  numToRead    =    Math.min(numToRead,    availableLen()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
120	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  offset,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  -  offset,  entrySize);	  numToRead    =    Math.min(numToRead,    availableLen()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
121	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableLen  +  1);	  numToRead    =    Math.max(numToRead,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
122	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  offset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  offset);	  numToRead    =    Math.max(numToRead,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
123	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen()  -  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableLen()  -  1);	  numToRead    =    Math.max(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
124	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen()  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableLen()  +  1);	  numToRead    =    Math.max(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
125	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen()  -  offset);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableLen()  -  offset);	  numToRead    =    Math.max(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
126	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableSize());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableSize());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableSize());	  numToRead    =    Math.max(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
127	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen()  -  2);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableLen()  -  2);	  numToRead    =    Math.max(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
128	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  rest.available()  -  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  rest.available()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  rest.available()  -  1);	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
129	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.available(),  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.available(),  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.available(),  numToRead);	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
130	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  rest.available()  -  offset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  rest.available()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  rest.available()  -  offset);	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
131	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  rest.available()  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  rest.available()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  rest.available()  +  1);	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
132	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd);	  numToRead    =    Math.min(availableEnd,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
133	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableEnd);	  numToRead    =    Math.min(availableEnd,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
134	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.length,  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.length,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.length,  numToRead);	  numToRead    =    Math.min(availableEnd,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
135	[BUG]  [BUGGY]  numToRead  =  Math.min(availableEnd,  offset);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableEnd,  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableEnd,  offset);	  numToRead    =    Math.min(availableEnd,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
136	[BUG]  [BUGGY]  numToRead  =  Math.min(lastRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(lastRead,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(lastRead,  numToRead);	  numToRead    =    Math.min(availableEnd,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
137	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
138	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
139	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
140	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
141	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
142	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
143	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
144	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  totalRead);	  numToRead    =    Math.min(numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
145	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableCount()  +  1);	  numToRead    =    Math.max(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
146	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  -  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableCount()  -  2);	  numToRead    =    Math.max(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
147	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  accessCount());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  accessCount());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  accessCount());	  numToRead    =    Math.max(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
148	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize()  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableSize()  +  1);	  numToRead    =    Math.min(numToRead,    availableSize());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
149	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entrySize());	  numToRead    =    Math.min(numToRead,    availableSize());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
150	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableStart()  +  1);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableStart()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableStart()  +  1);	  numToRead    =    Math.min(numToRead,    availableStart());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
151	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.available()  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.available()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.available()  -  1);	  numToRead    =    Math.min(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
152	[BUG]  [BUGGY]  numToRead  =  is.min(numToRead,  is.available());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  is.min(numToRead,  is.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  is.min(numToRead,  is.available());	  numToRead    =    Math.min(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
153	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.read());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.read());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.read());	  numToRead    =    Math.min(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
154	[BUG]  [BUGGY]  numToRead  =  is.min(numToRead,  numRecords.available());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  is.min(numToRead,  numRecords.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  is.min(numToRead,  numRecords.available());	  numToRead    =    Math.min(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
155	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.available()  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.available()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.available()  +  1);	  numToRead    =    Math.min(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
156	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords()  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableRecords()  -  1);	  numToRead    =    Math.min(numToRead,    this.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
157	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords()  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableRecords()  +  1);	  numToRead    =    Math.min(numToRead,    this.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
158	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords()  -  offset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableRecords()  -  offset);	  numToRead    =    Math.min(numToRead,    this.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
159	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords()  -  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableRecords()  -  2);	  numToRead    =    Math.min(numToRead,    this.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
160	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  this.availableRecords());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  this.availableRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  this.availableRecords());	  numToRead    =    Math.min(numToRead,    this.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
161	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableRecords()  -  entrySize);	  numToRead    =    Math.min(numToRead,    this.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
162	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  available()  *  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  available()  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  available()  *  1);	  numToRead    =    Math.max(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
163	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset()  -  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableOffset()  -  1);	  numToRead    =    Math.max(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
164	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen  -  1);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableLen  -  1);	  numToRead    =    Math.max(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
165	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords.length  -  1);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords.length  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableRecords.length  -  1);	  numToRead    =    Math.max(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
166	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  *  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  *  1);	  numToRead    =    Math.min(numToRead,    availableRecords()    +    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
167	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleRecords());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessibleRecords());	  numToRead    =    Math.min(numToRead,    availableRecords()    +    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
168	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords())+  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords())+  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords())+  1;	  numToRead    =    Math.min(numToRead,    availableRecords()    +    1);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
169	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entrySize  -  1);	  numToRead    =    Math.min(numToRead,    availableSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
170	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryOffset  -  1);	  numToRead    =    Math.min(numToRead,    availableSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
171	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableSize  -  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableSize  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableSize  -  1);	  numToRead    =    Math.min(numToRead,    availableSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
172	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessSize  -  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessSize  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessSize  -  1);	  numToRead    =    Math.min(numToRead,    availableSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
173	[BUG]  [BUGGY]  numToRead  =  Math.min(availableSize,  numToRead  -  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableSize,  numToRead  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableSize,  numToRead  -  1);	  numToRead    =    Math.min(numToRead,    availableSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
174	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length  -  1);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entries.length  -  1);	  numToRead    =    Math.min(numToRead,    availableSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
175	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessLen()  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessLen()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessLen()  -  1);	  numToRead    =    Math.min(numToRead,    accessLen());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
176	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessLen()  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessLen()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessLen()  +  1);	  numToRead    =    Math.min(numToRead,    accessLen());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
177	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  offset,  accessLen());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  offset,  accessLen());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  offset,  accessLen());	  numToRead    =    Math.min(numToRead,    accessLen());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
178	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  0,  accessLen());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  0,  accessLen());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  0,  accessLen());	  numToRead    =    Math.min(numToRead,    accessLen());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
179	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
180	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
181	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
182	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
183	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
184	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
185	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >>  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >>  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >>  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
186	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  *  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  *  1);	  numToRead    =    Math.min(numToRead,    this.available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
187	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  this.available());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  this.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  this.available());	  numToRead    =    Math.min(numToRead,    this.available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
188	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow()  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.readNow()  -  1);	  numToRead    =    Math.min(numToRead,    this.available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
189	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  *  2);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  *  2);	  numToRead    =    Math.min(numToRead,    this.available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
190	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.length  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.length  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.length  -  1);	  numToRead    =    Math.min(numToRead,    this.available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
191	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableAsBytes());	  numToRead    =    Math.min(numToRead,    availableAsBytes()    -    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
192	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes()  *  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes()  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableAsBytes()  *  1);	  numToRead    =    Math.min(numToRead,    availableAsBytes()    -    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
193	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes()  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableAsBytes()  +  1);	  numToRead    =    Math.min(numToRead,    availableAsBytes()    -    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
194	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes()  *  1000);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes()  *  1000);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableAsBytes()  *  1000);	  numToRead    =    Math.min(numToRead,    availableAsBytes()    -    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
195	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableAsBytes());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableAsBytes());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableAsBytes());	  numToRead    =    Math.min(numToRead,    availableAsBytes()    -    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
196	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes()  *  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes()  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableAsBytes()  *  2);	  numToRead    =    Math.min(numToRead,    availableAsBytes()    -    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
197	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  entryOffset);	  numToRead    =    Math.min(numToRead,    this.available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
198	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  *  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  *  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  *  entrySize);	  numToRead    =    Math.min(numToRead,    this.available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
199	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  entrySize  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  entrySize  +  1);	  numToRead    =    Math.min(numToRead,    this.available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
200	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  /  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  /  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  /  entrySize);	  numToRead    =    Math.min(numToRead,    this.available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
201	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.available()  -  entrySize);	  numToRead    =    Math.min(numToRead,    this.available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
202	[BUG]  [BUGGY]  numToRead  =  Math.max(entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(entrySize,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(entrySize,  numToRead);	  numToRead    =    Math.max(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
203	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  currEntry.length);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  currEntry.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  currEntry.length);	  numToRead    =    Math.max(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
204	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  cache.length);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  cache.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  cache.length);	  numToRead    =    Math.max(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
205	[BUG]  [BUGGY]  numToRead  =  Math.max(0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(0,  entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(0,  entryOffset);	  numToRead    =    Math.max(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
206	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  1)-  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  1)-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  -  1)-  1;	  numToRead    =    Math.min(numToRead,    available())-    1;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
207	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  offset)-  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  offset)-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  -  offset)-  1;	  numToRead    =    Math.min(numToRead,    available())-    1;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
208	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  1)/  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  1)/  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  -  1)/  1;	  numToRead    =    Math.min(numToRead,    available())-    1;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
209	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  +  1)-  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  +  1)-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  +  1)-  1;	  numToRead    =    Math.min(numToRead,    available())-    1;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
210	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available())/  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available())/  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available())/  1;	  numToRead    =    Math.min(numToRead,    available())-    1;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
211	[BUG]  [BUGGY]  numToRead  =  Math.max(remainderLen,  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(remainderLen,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(remainderLen,  numToRead);	  numToRead    =    Math.max(availableLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
212	[BUG]  [BUGGY]  numToRead  =  Math.max(remainderSize,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(remainderSize,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(remainderSize,  numToRead);	  numToRead    =    Math.max(availableLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
213	[BUG]  [BUGGY]  numToRead  =  Math.max(availableLen,  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(availableLen,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(availableLen,  entrySize);	  numToRead    =    Math.max(availableLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
214	[BUG]  [BUGGY]  numToRead  =  Math.max(length,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(length,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(length,  numToRead);	  numToRead    =    Math.max(availableLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
215	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.length  -  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.length  -  1;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
216	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.length  +  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.length  +  1;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
217	[BUG]  [BUGGY]  int  numRecords  =  entrySize;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  entrySize;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  entrySize;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
218	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length  -  2;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.length  -  2;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.length  -  2;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
219	[BUG]  [BUGGY]  int  numRecords  =  this.currEntry.length;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  this.currEntry.length;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  this.currEntry.length;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
220	[BUG]  [BUGGY]  int  numRecords  =  entrySize.length;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  entrySize.length;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  entrySize.length;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
221	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  offset  -  availableLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  offset  -  availableLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  offset  -  availableLen);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
222	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  offset,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen  -  offset,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
223	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  -  availableLen);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  -  availableLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entrySize  -  availableLen);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
224	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  buf.length  -  offset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  buf.length  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  buf.length  -  offset);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
225	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
226	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  -  offset);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entrySize  -  offset);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
227	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  -  offset);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableSize  -  offset);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
228	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen())+  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen())+  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen())+  1;	  numToRead    =    Math.min(numToRead,    availableLen()    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
229	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()));	  numToRead    =    Math.min(numToRead,    availableLen()    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
230	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleLen());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleLen());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessibleLen());	  numToRead    =    Math.min(numToRead,    availableLen()    +    1);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
231	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
233	[BUG]  [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
234	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
235	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
236	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
237	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  remainingLen);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  remainingLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  remainingLen);	  numToRead    =    Math.min(remainderLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
238	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  restLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  restLen);	  numToRead    =    Math.min(remainderLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
239	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  remainderLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  remainderLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  remainderLen);	  numToRead    =    Math.min(remainderLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
240	[BUG]  [BUGGY]  numToRead  =  Math.min(remainderLen,  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainderLen,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainderLen,  entrySize);	  numToRead    =    Math.min(remainderLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
241	[BUG]  [BUGGY]  numToRead  =  Math.min(remainderSize,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainderSize,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainderSize,  numToRead);	  numToRead    =    Math.min(remainderLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
242	[BUG]  [BUGGY]  numToRead  =  Math.min(remainderLen,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainderLen,  numToRead  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainderLen,  numToRead  +  1);	  numToRead    =    Math.min(remainderLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
243	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  is.available()  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  is.available()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  is.available()  -  1);	  numToRead    =    Math.max(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
244	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  is.length());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  is.length());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  is.length());	  numToRead    =    Math.max(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
245	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  is.read());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  is.read());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  is.read());	  numToRead    =    Math.max(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
246	[BUG]  [BUGGY]  numToRead  =  is.max(numToRead,  is.available());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  is.max(numToRead,  is.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  is.max(numToRead,  is.available());	  numToRead    =    Math.max(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
247	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  is.available()  -  offset);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  is.available()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  is.available()  -  offset);	  numToRead    =    Math.max(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
248	[BUG]  [BUGGY]  numToRead  =  Math.max(is.available(),  numToRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(is.available(),  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(is.available(),  numToRead);	  numToRead    =    Math.max(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
249	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  is.available()  +  1);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  is.available()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  is.available()  +  1);	  numToRead    =    Math.max(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
250	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableRecords()  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableRecords()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableRecords()  -  1);	  numToRead    =    Math.min(numToRead,    is.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
251	[BUG]  [BUGGY]  numToRead  =  is.availableRecords();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  is.availableRecords();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  is.availableRecords();	  numToRead    =    Math.min(numToRead,    is.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
252	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableRecords()  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableRecords()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableRecords()  +  1);	  numToRead    =    Math.min(numToRead,    is.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
253	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.availableRecords());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.availableRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.availableRecords());	  numToRead    =    Math.min(numToRead,    is.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
254	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableRecords()  -  2);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableRecords()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableRecords()  -  2);	  numToRead    =    Math.min(numToRead,    is.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
255	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  is.availableRecords());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  is.availableRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  is.availableRecords());	  numToRead    =    Math.min(numToRead,    is.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
256	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  hasHitEOF,  totalRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  hasHitEOF,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  hasHitEOF,  totalRead);	  numToRead    =    Math.max(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
257	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  hasHitEOF,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  hasHitEOF,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  hasHitEOF,  entrySize);	  numToRead    =    Math.max(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
258	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  totalRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  totalRead);	  numToRead    =    Math.max(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
259	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  hasHitEOF,  isDirectory());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  hasHitEOF,  isDirectory());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  hasHitEOF,  isDirectory());	  numToRead    =    Math.max(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
260	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  *  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount()  *  1);	  numToRead    =    Math.min(numToRead,    availableCount()    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
261	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount())+  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount())+  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount())+  1;	  numToRead    =    Math.min(numToRead,    availableCount()    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
262	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleCount());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleCount());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessibleCount());	  numToRead    =    Math.min(numToRead,    availableCount()    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
263	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()));  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount()));	  numToRead    =    Math.min(numToRead,    availableCount()    +    1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
264	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords()  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessRecords()  -  1);	  numToRead    =    Math.min(numToRead,    accessRecords());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
265	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords(),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords(),  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessRecords(),  hasHitEOF);	  numToRead    =    Math.min(numToRead,    accessRecords());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
266	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords()  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessRecords()  +  1);	  numToRead    =    Math.min(numToRead,    accessRecords());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
267	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords()  -  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessRecords()  -  2);	  numToRead    =    Math.min(numToRead,    accessRecords());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
268	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  *  2);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount()  *  2);	  numToRead    =    Math.min(numToRead,    availableCount()    -    2);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
269	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  +  availableOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize  +  availableOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entrySize  +  availableOffset);	  numToRead    =    Math.min(numToRead,    availableOffset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
270	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  offset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  offset  +  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  offset  +  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
271	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset  +  numRecords);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset  +  numRecords);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryOffset  +  numRecords);	  numToRead    =    Math.min(numToRead,    availableOffset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
272	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableOffset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
273	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  offset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset  +  offset);	  numToRead    =    Math.min(numToRead,    availableOffset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
274	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  1,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset  +  1,  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
275	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords.length  +  1);	  numToRead    =    Math.min(numToRead,    availableRecords.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
276	[BUG]  [BUGGY]  numToRead  =  Math.min(availableRecords.length,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableRecords.length,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableRecords.length,  numToRead);	  numToRead    =    Math.min(numToRead,    availableRecords.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
277	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableRecords.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableRecords.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableRecords.length);	  numToRead    =    Math.min(numToRead,    availableRecords.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
278	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords.length  -  2);	  numToRead    =    Math.min(numToRead,    availableRecords.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
279	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  *  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords.length  *  2);	  numToRead    =    Math.min(numToRead,    availableRecords.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
280	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  *  2);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  *  2);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    2);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
281	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  +  2);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  +  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  +  2);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    2);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
282	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  offset,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  offset,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    this.available()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
283	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  offset  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  offset  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  offset  +  1);	  numToRead    =    Math.min(numToRead,    this.available()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
284	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  *  offset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  *  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  *  offset);	  numToRead    =    Math.min(numToRead,    this.available()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
285	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available()  -  offset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.available()  -  offset);	  numToRead    =    Math.min(numToRead,    this.available()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
286	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF,  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  hasHitEOF,  entrySize);	  numToRead    =    Math.min(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
287	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF,  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  hasHitEOF,  totalRead);	  numToRead    =    Math.min(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
288	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  hasHitEOF  +  1);	  numToRead    =    Math.min(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
289	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF,  isDirectory());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF,  isDirectory());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  hasHitEOF,  isDirectory());	  numToRead    =    Math.min(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
290	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  +  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  +  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  +  2);	  numToRead    =    Math.min(numToRead,    availableLen()    -    2);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
291	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLimits()  +  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordLimits()  +  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordLimits()  +  1;	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
292	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLimits()  -  1;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordLimits()  -  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordLimits()  -  1;	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
293	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLimits(entrySize);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordLimits(entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordLimits(entrySize);	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
294	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLimits(offset);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordLimits(offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordLimits(offset);	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
295	[BUG]  [BUGGY]  Integer  numRecords  =  currEntry.getRecordLimits();  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  Integer  numRecords  =  currEntry.getRecordLimits();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	Integer  numRecords  =  currEntry.getRecordLimits();	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
296	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  1;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.recordSize()  +  1;	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
297	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordLimit();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.recordLimit();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.recordLimit();	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
298	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.length();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.length();	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
299	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize()  -  1;  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.recordSize()  -  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.recordSize()  -  1;	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
300	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getName();  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getName();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getName();	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
301	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  offset,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  offset,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
302	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
303	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  offset  +  1);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  offset  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  offset  +  1);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
304	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  entryOffset);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
305	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  offset,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  offset,  entrySize);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
306	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  offset,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  offset,  totalRead);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
307	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
309	[BUG]  [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
310	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
311	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
312	[BUG]  [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
313	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
314	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset()  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableOffset()  +  1);	  numToRead    =    Math.max(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
315	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset()  -  offset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableOffset()  -  offset);	  numToRead    =    Math.max(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
316	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableOffset()  -  entrySize);	  numToRead    =    Math.max(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
317	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords())-  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords())-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords())-  1;	  numToRead    =    Math.min(numToRead,    availableRecords()    -    1);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
318	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.release());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.release());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.release());	  numToRead    =    Math.min(numToRead,    this.available()    +    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
319	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
320	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
321	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
322	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
323	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
324	[BUG]  [BUGGY]  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
325	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
326	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.length);	  numToRead    =    Math.min(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
327	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryOffset  +  1);	  numToRead    =    Math.min(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
328	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  /  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  /  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  /  2);	  numToRead    =    Math.min(numToRead,    available()    *    2);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
329	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  2  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  2  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  *  2  +  1);	  numToRead    =    Math.min(numToRead,    available()    *    2);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
330	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  2  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  2  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  *  2  -  1);	  numToRead    =    Math.min(numToRead,    available()    *    2);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
331	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  -  2);	  numToRead    =    Math.min(numToRead,    available()    *    2);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
332	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  4);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  4);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  *  4);	  numToRead    =    Math.min(numToRead,    available()    *    2);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
333	[BUG]  [BUGGY]  numToRead  =  Math.max(0,  entrySize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(0,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(0,  entrySize);	  numToRead    =    Math.max(numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
334	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableRecords()  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableRecords()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableRecords()  -  1);	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
335	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  this.availableRecords());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  this.availableRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  this.availableRecords());	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
336	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  count(numRecords()));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  count(numRecords()));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  count(numRecords()));	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
337	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  accessSize());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  accessSize());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  accessSize());	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
338	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  fullRecords());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  fullRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  fullRecords());	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
340	[BUG]  [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
341	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
342	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
343	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(1),  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(1),  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount(1),  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableCount(1));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
344	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(2));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(2));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount(2));	  numToRead    =    Math.min(numToRead,    availableCount(1));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
345	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(1)  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(1)  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount(1)  -  1);	  numToRead    =    Math.min(numToRead,    availableCount(1));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
346	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(1)  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(1)  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount(1)  +  1);	  numToRead    =    Math.min(numToRead,    availableCount(1));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
347	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(0));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(0));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount(0));	  numToRead    =    Math.min(numToRead,    availableCount(1));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
348	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd())+  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd())+  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd())+  1;	  numToRead    =    Math.min(numToRead,    availableEnd()    +    1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
349	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleEnd());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleEnd());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessibleEnd());	  numToRead    =    Math.min(numToRead,    availableEnd()    +    1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
350	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow()  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.readNow()  +  1);	  numToRead    =    Math.min(numToRead,    this.readNow());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
351	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow()  -  offset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.readNow()  -  offset);	  numToRead    =    Math.min(numToRead,    this.readNow());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
352	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  this.readNow());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  this.readNow());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  this.readNow());	  numToRead    =    Math.min(numToRead,    this.readNow());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
353	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow()  -  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.readNow()  -  2);	  numToRead    =    Math.min(numToRead,    this.readNow());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
354	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow()  -  totalRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow()  -  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.readNow()  -  totalRead);	  numToRead    =    Math.min(numToRead,    this.readNow());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
355	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  +  2);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  +  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  +  2);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    2);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
356	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  /  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  /  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  /  1);	  numToRead    =    Math.min(numToRead,    available()    *    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
357	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  +  1);	  numToRead    =    Math.min(numToRead,    available()    *    1);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
358	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  -  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordCount()  -  1;	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
359	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  +  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordCount()  +  1;	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
360	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  *  2;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordCount()  *  2;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordCount()  *  2;	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
361	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLength();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordLength();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordLength();	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
362	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordCount(entrySize);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordCount(entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordCount(entrySize);	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
364	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
365	[BUG]  [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
366	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
367	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
368	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes();  }  [CE]  illegal  start  of  type  [FE]                                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
369	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  offset,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
370	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  *  offset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  *  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  *  offset);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
371	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
372	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  offset  +  1);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
373	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  +  entrySize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  +  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  +  entrySize);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
374	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  offset,  totalRead);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
375	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
376	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
377	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
378	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
379	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
380	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
381	[BUG]  [BUGGY]  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
382	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableLen()  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableLen()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableLen()  -  1);	  numToRead    =    Math.min(numToRead,    is.availableLen());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
383	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  rest.availableLen());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  rest.availableLen());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  rest.availableLen());	  numToRead    =    Math.min(numToRead,    is.availableLen());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
384	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableLen()  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableLen()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableLen()  +  1);	  numToRead    =    Math.min(numToRead,    is.availableLen());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
385	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  offset,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  offset,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
386	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  +  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  +  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
387	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  *  offset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  *  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  *  offset);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
388	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  offset  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  offset  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  offset  +  1);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
389	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  offset,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  offset,  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
390	[BUG]  [BUGGY]  numToRead  =  Math.min(availableSize,  rest.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableSize,  rest.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableSize,  rest.length);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
391	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.length,  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.length,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.length,  entrySize);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
392	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.length,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.length,  entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.length,  entryOffset);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
393	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  rest.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  rest.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  rest.length);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
394	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  remaining.length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  remaining.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  remaining.length);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
395	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount())-  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount())-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount())-  1;	  numToRead    =    Math.min(numToRead,    availableCount()    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
396	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableCount()  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableCount()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableCount()  -  1);	  numToRead    =    Math.min(numToRead,    availableCount()    -    1);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
397	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entries.length  +  1);	  numToRead    =    Math.min(numToRead,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
398	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  entries.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  entries.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  entries.length);	  numToRead    =    Math.min(numToRead,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
399	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length  -  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entries.length  -  2);	  numToRead    =    Math.min(numToRead,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
400	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length  *  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entries.length  *  2);	  numToRead    =    Math.min(numToRead,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
401	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available()  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.available()  -  1);	  numToRead    =    Math.min(numToRead,    currEntry.available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
402	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available()  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.available()  +  1);	  numToRead    =    Math.min(numToRead,    currEntry.available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
403	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available()  -  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available()  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.available()  -  2);	  numToRead    =    Math.min(numToRead,    currEntry.available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
404	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset())-  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset())-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset())-  1;	  numToRead    =    Math.min(numToRead,    availableOffset()    -    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
405	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  1,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen  -  1,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
406	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  numToRead  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  numToRead  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  numToRead  -  1);	  numToRead    =    Math.min(numToRead,    availableLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
407	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords.length  -  1,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableRecords.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
408	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords.length  -  1  +  1);	  numToRead    =    Math.min(numToRead,    availableRecords.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
409	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1,  totalRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords.length  -  1,  totalRead);	  numToRead    =    Math.min(numToRead,    availableRecords.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
410	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableRecords.length  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableRecords.length  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableRecords.length  -  1);	  numToRead    =    Math.min(numToRead,    availableRecords.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
411	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords.length  -  1,  entrySize);	  numToRead    =    Math.min(numToRead,    availableRecords.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
412	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ch  =  is.read(buf,  offset,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	ch  =  is.read(buf,  offset,  entrySize);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
413	[BUG]  [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	ch  =  currEntry.read(buf,  offset,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
414	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	ch  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
415	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ch  =  is.read(buf,  offset,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	ch  =  is.read(buf,  offset,  totalRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
416	[BUG]  [BUGGY]  ch  =  rest.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ch  =  rest.read(buf,  offset,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	ch  =  rest.read(buf,  offset,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
417	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  entryLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ch  =  is.read(buf,  offset,  entryLimit,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	ch  =  is.read(buf,  offset,  entryLimit,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
418	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  +  1,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableSize  +  1,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
419	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessSize  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessSize  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessSize  +  1);	  numToRead    =    Math.min(numToRead,    availableSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
420	[BUG]  [BUGGY]  numToRead  =  Math.min(availableSize,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableSize,  numToRead  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableSize,  numToRead  +  1);	  numToRead    =    Math.min(numToRead,    availableSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
421	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableSize  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableSize  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableSize  +  1);	  numToRead    =    Math.min(numToRead,    availableSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
422	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords()  -  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableRecords()  -  1);	  numToRead    =    Math.max(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
423	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords()  -  offset);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableRecords()  -  offset);	  numToRead    =    Math.max(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
424	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords()  +  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableRecords()  +  1);	  numToRead    =    Math.max(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
425	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  *  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableCount()  *  1);	  numToRead    =    Math.max(numToRead,    availableCount()    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
426	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  *  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableCount()  *  2);	  numToRead    =    Math.max(numToRead,    availableCount()    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
427	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount())-  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount())-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableCount())-  1;	  numToRead    =    Math.max(numToRead,    availableCount()    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
428	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd()  -  1);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableEnd()  -  1);	  numToRead    =    Math.max(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
429	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd()  +  1);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd()  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableEnd()  +  1);	  numToRead    =    Math.max(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
430	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd()  -  offset);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableEnd()  -  offset);	  numToRead    =    Math.max(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
431	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  rest.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  rest.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  rest.length);	  numToRead    =    Math.min(remainder.length,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
432	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  remaining.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  remaining.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  remaining.length);	  numToRead    =    Math.min(remainder.length,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
433	[BUG]  [BUGGY]  numToRead  =  Math.max(availableSize,  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(availableSize,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(availableSize,  numToRead);	  numToRead    =    Math.max(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
434	[BUG]  [BUGGY]  numToRead  =  Math.max(availableRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(availableRead,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(availableRead,  numToRead);	  numToRead    =    Math.max(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
435	[BUG]  [BUGGY]  numToRead  =  Math.max(0,  availableSize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(0,  availableSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(0,  availableSize);	  numToRead    =    Math.max(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
436	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  entrySize  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  entrySize  +  1);	  numToRead    =    Math.max(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
437	[BUG]  [BUGGY]  int  numRecords  =  cache.length;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  cache.length;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  cache.length;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
438	[BUG]  [BUGGY]  int  numRecords  =  is.length;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  is.length;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  is.length;	  int    numRecords    =    currEntry.length;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
439	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableLen());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableLen());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableLen());	  numToRead    =    Math.min(numToRead,    this.availableCount());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
440	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableLength());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableLength());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableLength());	  numToRead    =    Math.min(numToRead,    this.availableCount());    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
441	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd()  -  start);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd()  -  start);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableEnd()  -  start);	  numToRead    =    Math.max(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
442	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()));  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()));	  numToRead    =    Math.min(numToRead,    availableOffset()    +    1);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
443	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  buf.length);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  buf.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  -  buf.length);	  numToRead    =    Math.min(numToRead,    availableLen()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
444	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numRecords);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numRecords);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  is.read(buf,  offset,  numRecords);	  int    numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
445	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  length);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numToRead  =  is.read(buf,  offset,  length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  is.read(buf,  offset,  length);	  int    numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
446	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  accessRecords());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  accessRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  accessRecords());	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
447	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableRecords()  -  offset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableRecords()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableRecords()  -  offset);	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
448	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  hasHitEOF);	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
449	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableLen  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableLen  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableLen  +  1);	  numToRead    =    Math.min(numToRead,    availableLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
450	[BUG]  [BUGGY]  numToRead  =  Math.min(remainderLen,  availableLen  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainderLen,  availableLen  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainderLen,  availableLen  +  1);	  numToRead    =    Math.min(numToRead,    availableLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
451	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  restLen  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  restLen  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  restLen  +  1);	  numToRead    =    Math.min(numToRead,    availableLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
452	[BUG]  [BUGGY]  numToRead  =  Math.min(availableRecords.length,  numToRead  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableRecords.length,  numToRead  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableRecords.length,  numToRead  -  1);	  numToRead    =    Math.min(numToRead,    availableRecords.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
453	[BUG]  [BUGGY]  numToRead  =  Math.min(availableRecords.length,  availableRecords.length  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableRecords.length,  availableRecords.length  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableRecords.length,  availableRecords.length  -  1);	  numToRead    =    Math.min(numToRead,    availableRecords.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
454	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
455	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
456	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  available)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  available)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  available)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
457	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  offset  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  offset  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  offset  -  1);	  numToRead    =    Math.min(numToRead,    availableLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
458	[BUG]  [BUGGY]  numToRead  =  Math.min(remainderLen,  availableLen  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainderLen,  availableLen  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainderLen,  availableLen  -  1);	  numToRead    =    Math.min(numToRead,    availableLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
459	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  availableLen  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  availableLen  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  availableLen  -  1);	  numToRead    =    Math.min(numToRead,    availableLen    -    1);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
460	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.readNow());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.readNow());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.readNow());	  numToRead    =    Math.min(numToRead,    this.readNow());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
461	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.readNow());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.readNow());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.readNow());	  numToRead    =    Math.min(numToRead,    this.readNow());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
462	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  rest.readNow());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  rest.readNow());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  rest.readNow());	  numToRead    =    Math.min(numToRead,    this.readNow());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
463	[BUG]  [BUGGY]  numToRead  =  Math.min(remainderLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainderLimit,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainderLimit,  numToRead);	  numToRead    =    Math.min(availableEnd,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
464	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize  -  1);	  numToRead    =    Math.min(numToRead,    availableOffset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
465	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize  +  1);	  numToRead    =    Math.min(numToRead,    availableOffset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
466	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryLimit  +  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entryLimit  +  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryLimit  +  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
467	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.available(),  rest.length);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.available(),  rest.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.available(),  rest.length);	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
468	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.available(),  restLen.available());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.available(),  restLen.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.available(),  restLen.available());	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
469	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.available(),  rest.length());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.available(),  rest.length());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.available(),  rest.length());	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
470	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  restLen.available());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  restLen.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  restLen.available());	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
471	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes(2));  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes(2));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableAsBytes(2));	  numToRead    =    Math.min(numToRead,    availableAsBytes()    -    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
472	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes(1));  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes(1));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableAsBytes(1));	  numToRead    =    Math.min(numToRead,    availableAsBytes()    -    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
473	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available())+  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available())+  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available())+  1;	  numToRead    =    Math.min(numToRead,    this.available()    +    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
474	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.recordSize);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.recordSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.recordSize);	  numToRead    =    Math.min(numToRead,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
475	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.entrySize  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.entrySize  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.entrySize  -  1);	  numToRead    =    Math.min(numToRead,    this.entrySize);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
476	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ch  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	ch  =  is.read(buf,  offset,  numToRead  +  1);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
477	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ch  =  is.read(buf,  offset,  0);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	ch  =  is.read(buf,  offset,  0);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
478	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  ch  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	ch  =  is.read(buf,  offset,  0,  numToRead);	  ch    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
479	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  *  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  *  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableSize  *  1);	  numToRead    =    Math.min(numToRead,    availableSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
480	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  is.read(buf,  offset,  0,  numToRead);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
481	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead  +  1);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
482	[BUG]  [BUGGY]  numToRead  =  Math.min(availableRead,  numToRead  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableRead,  numToRead  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableRead,  numToRead  -  1);	  numToRead    =    Math.min(numToRead,    availableSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
483	[BUG]  [BUGGY]  int  numRecords  =  this.currEntry.getRecordCount();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  this.currEntry.getRecordCount();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  this.currEntry.getRecordCount();	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
484	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(entrySize,  entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(entrySize,  entryOffset);	  numToRead    =    Math.min(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
485	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
486	[BUG]  [BUGGY]  if(currEntry!=  null)  {  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(currEntry!=  null)  {  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(currEntry!=  null)  {  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
487	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
488	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
489	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  buf.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  buf.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  buf.length);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
490	[BUG]  [BUGGY]  numToRead  =  Math.min(availableCount,  numToRead(1));  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableCount,  numToRead(1));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableCount,  numToRead(1));	  numToRead    =    Math.min(numToRead,    availableCount(1));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
491	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.availableEnd());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.availableEnd());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.availableEnd());	  numToRead    =    Math.min(numToRead,    this.availableEnd());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
492	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  numRecords);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  numRecords);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  numRecords);	  numToRead    =    Math.min(0,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
493	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableLen  -  availableLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableLen  -  availableLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableLen  -  availableLen);	  numToRead    =    Math.min(0,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
494	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  read);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  read);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  read);	  numToRead    =    Math.min(0,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
495	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
496	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
497	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
498	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
499	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  buf.length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  buf.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  buf.length);	  numToRead    =    Math.min(numToRead,    this.available()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
500	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
501	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
502	[BUG]  [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords!=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
503	[BUG]  [BUGGY]  if(numRecords!=  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords!=  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords!=  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
504	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
505	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
506	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords  -  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableRecords  -  1);	  numToRead    =    Math.max(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
507	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableSize  -  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableSize  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableSize  -  1);	  numToRead    =    Math.max(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
508	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  2  -  offset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  2  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  *  2  -  offset);	  numToRead    =    Math.min(numToRead,    available()    *    2);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
509	[BUG]  [BUGGY]  numToRead  =  Math.min(remainderLen,  offset);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainderLen,  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainderLen,  offset);	  numToRead    =    Math.min(remainderLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
510	[BUG]  [BUGGY]  numToRead  =  Math.min(remainderLen,  totalRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainderLen,  totalRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainderLen,  totalRead);	  numToRead    =    Math.min(remainderLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
511	[BUG]  [BUGGY]  numToRead  =  is.min(numToRead,  restLen.available());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  is.min(numToRead,  restLen.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  is.min(numToRead,  restLen.available());	  numToRead    =    Math.min(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
512	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.available()  -  offset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.available()  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.available()  -  offset);	  numToRead    =    Math.min(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
513	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.readRecords());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.readRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.readRecords());	  numToRead    =    Math.min(numToRead,    is.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
514	[BUG]  [BUGGY]  numToRead  =  Math.max(availableLen,  offset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(availableLen,  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(availableLen,  offset);	  numToRead    =    Math.max(availableLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
515	[BUG]  [BUGGY]  numToRead  =  Math.max(availableLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(availableLimit,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(availableLimit,  numToRead);	  numToRead    =    Math.max(availableLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
516	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableNumber());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableNumber());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableNumber());	  numToRead    =    Math.min(numToRead,    availableCount()    -    2);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
517	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessLen  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessLen  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessLen  +  1);	  numToRead    =    Math.min(numToRead,    accessLen());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
518	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  restLen());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  restLen());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  restLen());	  numToRead    =    Math.min(numToRead,    accessLen());    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
519	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  offset  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  offset  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen  -  offset  +  1);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
520	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  numToRead  -  offset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  numToRead  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  numToRead  -  offset);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
521	[BUG]  [BUGGY]  numToRead  =  Math.min(availableSize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableSize,  entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableSize,  entryOffset);	  numToRead    =    Math.min(availableSize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
522	[BUG]  [BUGGY]  numToRead  =  Math.min(availableSize,  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableSize,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableSize,  entrySize);	  numToRead    =    Math.min(availableSize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
523	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  accessRecords());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  accessRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  accessRecords());	  numToRead    =    Math.min(numToRead,    accessRecords());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
524	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize.available());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entrySize.available());	  numToRead    =    Math.min(numToRead,    currEntry.available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
525	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  length);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
526	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  start);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  start);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  start);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
527	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
528	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
529	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
530	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
531	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  restLen  -  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  restLen  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  restLen  -  entrySize);	  numToRead    =    Math.min(numToRead,    this.available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
532	[BUG]  [BUGGY]  numToRead  =  Math.max(availableLen,  rest.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(availableLen,  rest.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(availableLen,  rest.length);	  numToRead    =    Math.min(remainder.length,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
533	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.length,  availableLen  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.length,  availableLen  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.length,  availableLen  +  1);	  numToRead    =    Math.min(remainder.length,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
534	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  restSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  restSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  restSize);	  numToRead    =    Math.min(remainder.length,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
535	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  remainingSize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  remainingSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  remainingSize);	  numToRead    =    Math.min(remainder.length,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
536	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordStart();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.recordStart();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.recordStart();	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
537	[BUG]  [BUGGY]  int  numRecords  =  this.currEntry.recordSize();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  this.currEntry.recordSize();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  this.currEntry.recordSize();	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
538	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  length;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  length;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.recordSize()  +  length;	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
539	[BUG]  [BUGGY]  numToRead  =  Math.min(availableEnd(),  numToRead  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableEnd(),  numToRead  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableEnd(),  numToRead  -  1);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
540	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  offset);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  offset);	  numToRead    =    Math.min(availableLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
541	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableLen,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  entrySize);	  numToRead    =    Math.min(availableLen,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
542	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF  ||  isDirectory());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF  ||  isDirectory());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  hasHitEOF  ||  isDirectory());	  numToRead    =    Math.min(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
543	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  hasHitEOF  -  1);	  numToRead    =    Math.min(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
544	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset  +  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableOffset  +  entrySize);	  numToRead    =    Math.max(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
545	[BUG]  [BUGGY]  numToRead  =  Math.max(entrySize,  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(entrySize,  entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(entrySize,  entryOffset);	  numToRead    =    Math.max(numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
546	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  entries.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(entrySize,  entries.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(entrySize,  entries.length);	  numToRead    =    Math.min(numToRead,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
547	[BUG]  [BUGGY]  numToRead  =  Math.min(entries.length,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(entries.length,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(entries.length,  numToRead);	  numToRead    =    Math.min(numToRead,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
548	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  buf.length);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  buf.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  buf.length);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
549	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  inputSize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  inputSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  inputSize);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
550	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  start);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  start);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  start);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
551	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableOffset());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableOffset());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableOffset());	  numToRead    =    Math.min(numToRead,    is.availableLen());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
552	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount())+  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount())+  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableCount())+  1;	  numToRead    =    Math.max(numToRead,    availableCount()    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
553	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  accessibleCount());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  accessibleCount());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  accessibleCount());	  numToRead    =    Math.max(numToRead,    availableCount()    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
554	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessStart());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessStart());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessStart());	  numToRead    =    Math.min(numToRead,    accessCount());    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
555	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableRecords.length);	  numToRead    =    Math.min(numToRead,    availableRecords.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
556	[BUG]  [BUGGY]  numToRead  =  Math.min(recordSize,  availableRecords.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(recordSize,  availableRecords.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(recordSize,  availableRecords.length);	  numToRead    =    Math.min(numToRead,    availableRecords.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
557	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  inputSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  inputSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  inputSize);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
558	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  currEntry.available());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  currEntry.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  currEntry.available());	  numToRead    =    Math.max(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
559	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
560	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
561	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
562	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  cache.length());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  cache.length());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  cache.length());	  numToRead    =    Math.min(numToRead,    this.length());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
563	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  entryLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(entrySize,  entryLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(entrySize,  entryLen);	  numToRead    =    Math.min(numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
564	[BUG]  [BUGGY]  numToRead  =  Math.min(entryLen,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(entryLen,  numToRead);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(entryLen,  numToRead);	  numToRead    =    Math.min(numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
565	[BUG]  [BUGGY]  numToRead  =  Math.max(0,  availableLen);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(0,  availableLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(0,  availableLen);	  numToRead    =    Math.max(numToRead,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
566	[BUG]  [BUGGY]  numToRead  =  is.min(numToRead,  restLen.availableCount());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  is.min(numToRead,  restLen.availableCount());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  is.min(numToRead,  restLen.availableCount());	  numToRead    =    Math.min(numToRead,    is.availableCount());    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
567	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableLen()  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  availableLen()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableLen()  -  1);	  numToRead    =    Math.min(numToRead,    availableLen()    -    1);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
568	[BUG]  [BUGGY]  numToRead  =  Math.min(availableEnd(),  numToRead  -  2);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableEnd(),  numToRead  -  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableEnd(),  numToRead  -  2);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    2);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
569	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  hasHitEOF  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  hasHitEOF  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  hasHitEOF  +  1);	  numToRead    =    Math.max(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
570	[BUG]  [BUGGY]  if(currEntry  ==  null)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(currEntry  ==  null)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(currEntry  ==  null)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
571	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
572	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  length;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordSize()  +  length;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
573	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  offset;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  offset;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordSize()  +  offset;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
574	[BUG]  [BUGGY]  int  numRecords  =  this.currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  this.currEntry.getRecordSize();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  this.currEntry.getRecordSize();	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
575	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.availableOffset());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.availableOffset());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.availableOffset());	  numToRead    =    Math.min(numToRead,    this.availableOffset());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
576	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
577	[BUG]  [BUGGY]  if(numRecords!=  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords!=  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords!=  null)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
578	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
579	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
580	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  restLen  -  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  restLen  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  restLen  -  1);	  numToRead    =    Math.min(numToRead,    this.available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
581	[BUG]  [BUGGY]  numToRead  =  Math.min(availableRead,  availableSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableRead,  availableSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableRead,  availableSize);	  numToRead    =    Math.min(0,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
582	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  accessLimit);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  accessLimit);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  accessLimit);	  numToRead    =    Math.min(0,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
583	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
584	[BUG]  [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  ==  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
585	[BUG]  [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
586	[BUG]  [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numRecords  >  0)  {  for(int  i  =  0;  i  <  numToRead;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
587	[BUG]  [BUGGY]  int  numRecords  =  this.currEntry.getRecordLimits();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  this.currEntry.getRecordLimits();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  this.currEntry.getRecordLimits();	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
588	[BUG]  [BUGGY]  numToRead  =  Math.min(availableSize,  remaining.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableSize,  remaining.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableSize,  remaining.length);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
589	[BUG]  [BUGGY]  numToRead  =  Math.min(availableSize,  restLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableSize,  restLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableSize,  restLen);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
590	[BUG]  [BUGGY]  numToRead  =  Math.min(availableSize,  remainder.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableSize,  remainder.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableSize,  remainder.length);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
591	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  +  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  +  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  +  2);	  numToRead    =    Math.min(numToRead,    available()    *    2);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
592	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize(entrySize);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.recordSize(entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.recordSize(entrySize);	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
593	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.recordSize()  +  entryOffset;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.recordSize()  +  entryOffset;	  int    numRecords    =    currEntry.recordSize();    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
594	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.read());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.read());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.read());	  numToRead    =    Math.min(numToRead,    currEntry.available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
595	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize(1));  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize(1));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entrySize(1));	  numToRead    =    Math.min(numToRead,    availableCount(1));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
596	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset(1));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset(1));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryOffset(1));	  numToRead    =    Math.min(numToRead,    availableCount(1));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
597	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
598	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
599	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
600	[BUG]  [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  <  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
601	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getBytes(i);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
602	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  foundRecords());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  foundRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  foundRecords());	  numToRead    =    Math.min(numToRead,    availableRecords()    -    2);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
603	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  is.read(buf,  offset,  numToRead  +  1);	  int    numToRead    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
604	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize)-  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize)-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize)-  1;	  numToRead    =    Math.min(numToRead,    availableOffset()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
605	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize  -  1);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
606	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableRecords.length);	  numToRead    =    Math.min(numToRead,    availableRecords.length);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
607	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.available());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.available());	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
608	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.length,  rest.available());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.length,  rest.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.length,  rest.available());	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
609	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.available(),  rest.available());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.available(),  rest.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.available(),  rest.available());	  numToRead    =    Math.min(numToRead,    rest.available());    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
610	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  availableLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(entrySize,  availableLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(entrySize,  availableLen);	  numToRead    =    Math.min(remainder.length,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
611	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.length,  availableLen  -  offset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.length,  availableLen  -  offset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.length,  availableLen  -  offset);	  numToRead    =    Math.min(remainder.length,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
612	[BUG]  [BUGGY]  numToRead  =  Math.max(entrySize,  entries.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(entrySize,  entries.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(entrySize,  entries.length);	  numToRead    =    Math.min(numToRead,    entries.length);    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
613	[BUG]  [BUGGY]  if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
614	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
615	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
616	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  is.available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  is.available()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  is.available()  -  entrySize);	  numToRead    =    Math.max(numToRead,    is.available());    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
617	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes(offset)-  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes(offset)-  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableAsBytes(offset)-  1);	  numToRead    =    Math.min(numToRead,    availableAsBytes()    -    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
618	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes())-  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes())-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableAsBytes())-  1;	  numToRead    =    Math.min(numToRead,    availableAsBytes()    -    1);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
619	[BUG]  [BUGGY]  numToRead  =  Math.max(entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(entrySize,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(entrySize,  hasHitEOF);	  numToRead    =    Math.max(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
620	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleOffset()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessibleOffset()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessibleOffset()  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
621	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.length,  entryLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(remainder.length,  entryLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.length,  entryLen);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
622	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  remaining.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(entrySize,  remaining.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(entrySize,  remaining.length);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
623	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  availableSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(entrySize,  availableSize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(entrySize,  availableSize);	  numToRead    =    Math.min(remainder.length,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
624	[BUG]  [BUGGY]  int  numToRead  =  Math.min(numToRead,  this.available());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numToRead  =  Math.min(numToRead,  this.available());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  Math.min(numToRead,  this.available());	  numToRead    =    Math.min(numToRead,    this.available()    +    1);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
625	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.readLen());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.readLen());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.readLen());	  numToRead    =    Math.min(numToRead,    is.availableLen());    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
626	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  rest.available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  rest.available()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  rest.available()  -  entrySize);	  numToRead    =    Math.min(numToRead,    this.available()    -    entrySize);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
627	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  entrySize  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  entrySize  -  1);	  numToRead    =    Math.max(numToRead,    availableCount()    -    1);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
628	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessRecords()  -  entrySize);	  numToRead    =    Math.min(numToRead,    accessRecords());    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
629	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  +  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset()  +  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableOffset()  +  entrySize);	  numToRead    =    Math.min(numToRead,    this.availableOffset());    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
630	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  entryLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  entryLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  entryLen);	  numToRead    =    Math.max(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
631	[BUG]  [BUGGY]  numToRead  =  Math.max(entrySize,  availableOffset());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(entrySize,  availableOffset());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(entrySize,  availableOffset());	  numToRead    =    Math.max(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
632	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  entryOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  entryOffset  +  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  entryOffset  +  entrySize);	  numToRead    =    Math.max(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
633	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
634	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
635	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ".);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ".);  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
636	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
637	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ".);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ".);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ".);  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
638	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
639	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  accessLen());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  accessLen());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  accessLen());	  numToRead    =    Math.max(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
640	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen  *  2);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen  *  2);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableLen  *  2);	  numToRead    =    Math.max(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
641	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
642	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
643	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  is.read(buf,  offset,  numToRead);  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    i++)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
644	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entrySize)-  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  available()  -  entrySize)-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  -  entrySize)-  1;	  numToRead    =    Math.min(numToRead,    available())-    1;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
645	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize)-  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize)-  1;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entrySize)-  1;	  numToRead    =    Math.min(numToRead,    available())-    1;    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
646	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
647	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getKey();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
648	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
649	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
650	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
651	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.releaseEnd());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.releaseEnd());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.releaseEnd());	  numToRead    =    Math.min(numToRead,    this.availableEnd());    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
652	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryOffset());	  numToRead    =    Math.min(numToRead,    availableStart());    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
653	[BUG]  [BUGGY]  numToRead  =  Math.min(entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(entrySize,  hasHitEOF);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(entrySize,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
654	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSimits();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordSimits();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordSimits();	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
655	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordLimits();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.recordLimits();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.recordLimits();	  int    numRecords    =    currEntry.getRecordLimits();    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
656	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordStart();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordStart();  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordStart();	  int    numRecords    =    currEntry.getRecordCount();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
657	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
658	[BUG]  [BUGGY]  if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(entrySize  >=  entrySize)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
659	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  currEntry.getRecordSize()  +  entryOffset;  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordSize()  +  entryOffset;	  int    numRecords    =    currEntry.getRecordSize();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
660	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryLen  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entryLen  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryLen  +  1);	  numToRead    =    Math.min(numToRead,    availableSize    +    1);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
661	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset  +  1);	  numToRead    =    Math.min(numToRead,    availableOffset    +    entrySize);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
662	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableSize());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableSize());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableSize());	  numToRead    =    Math.min(numToRead,    availableSize());    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
663	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >=  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
664	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  ==  -1)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	  if(numToRead    >    0)    {    for(int    i    =    0;    i    <    numRecords;    ++i)    {    buffer[i]    =    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
665	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen(4));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen(4));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen(4));	  numToRead    =    Math.min(numToRead,    availableLen()    -    2);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
666	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen(2));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen(2));  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen(2));	  numToRead    =    Math.min(numToRead,    availableLen()    -    2);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
667	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  this.available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  this.available()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  this.available()  -  entrySize);	  numToRead    =    Math.min(numToRead,    this.available()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
668	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  is.available()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.available()  -  entrySize);	  numToRead    =    Math.min(numToRead,    this.available()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
669	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  entryLimit);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  entryLimit);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  entryLimit);	  numToRead    =    Math.min(0,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
670	[BUG]  [BUGGY]  numToRead  =  Math.min(1,  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(1,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(1,  entrySize);	  numToRead    =    Math.min(0,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
671	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  entryLen);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  entryLen);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  entryLen);	  numToRead    =    Math.min(0,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
672	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  entrySize  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  entrySize  +  1);	  numToRead    =    Math.min(0,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
673	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableAsIterables()  -  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.max(numToRead,  availableAsIterables()  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableAsIterables()  -  1);	  numToRead    =    Math.max(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
674	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableStart()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableStart()  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableStart()  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableEnd()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
675	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  is.availableRecords());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  is.availableRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  is.availableRecords());	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
676	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  entries.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  entries.length);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  entries.length);	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
677	[BUG]  [BUGGY]  numToRead  =  Math.min(1,  availableRecords());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(1,  availableRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(1,  availableRecords());	  numToRead    =    Math.min(0,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
678	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryLen  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entryLen  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryLen  -  1);	  numToRead    =    Math.min(numToRead,    availableSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
679	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(0,  entrySize  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  entrySize  -  1);	  numToRead    =    Math.min(numToRead,    availableSize    -    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
680	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.releaseRecords());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.releaseRecords());  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.releaseRecords());	  numToRead    =    Math.min(numToRead,    this.availableRecords());    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
681	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  -  entryOffset);	  numToRead    =    Math.min(numToRead,    availableLen()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
682	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  entryOffset);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  entryOffset);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
683	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset,  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  offset,  entrySize);	  numToRead    =    Math.min(numToRead,    availableRecords()    -    offset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
684	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords.length  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords.length  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableRecords.length  -  1);	  numToRead    =    Math.min(numToRead,    availableRecords.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
685	[BUG]  [BUGGY]  numToRead  =  Math.min(availableRecords.length,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(availableRecords.length,  entrySize  -  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableRecords.length,  entrySize  -  1);	  numToRead    =    Math.min(numToRead,    availableRecords.length    -    1);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
686	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  offset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  offset  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  offset  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
687	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset  -  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryOffset  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
688	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessLen  -  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  accessLen  -  entrySize);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessLen  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableLen    -    offset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
689	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  offset  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  numToRead  =  Math.min(numToRead,  offset  +  1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  offset  +  1);	  numToRead    =    Math.min(numToRead,    availableLen    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
690	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }      [BUGGY]  int  numRecords  =  is.read(buf,  offset,  -1);  [BUGGY]        totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  is.read(buf,  offset,  -1);	  int    numRecords    =    is.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
