bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  1);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  1);	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
2	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  offset);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  offset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  offset);	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
3	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.readNow());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.readNow());	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
4	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  +  1);	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
5	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.length());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.length());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.length());	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
6	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  currEntry.available());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  currEntry.available());	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
7	[BUG]  [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  ch  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	ch  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  int  numRecords  =  currEntry.length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  currEntry.length;  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.length;	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
9	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getValue();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
10	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getValue();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
11	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  i++)  {  buffer[i]  =  currEntry.getKey();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
12	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getKey();  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
13	[BUG]  [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  for(int  i  =  0;  i  <  numRecords;  ++i)  {  buffer[i]  =  currEntry.getBytes(i);  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
14	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  1);	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
15	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  +  1);	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  offset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  offset);	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entrySize);	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
18	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableRecords());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableRecords());	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords()  -  2);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords()  -  2);	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  -  1);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount()  -  1);	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  +  1);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount()  +  1);	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  -  2);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount()  -  2);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount()  -  2);	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableCount()  -  1);	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(1));  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableCount(1));  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableCount(1));	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  hasHitEOF);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  hasHitEOF);	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
26	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  1);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  *  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
27	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords.length  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  2);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available()  *  2);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available()  *  2);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableSize  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  1);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
32	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  +  1);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
33	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  offset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  offset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  offset);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
34	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset()  -  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
35	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  1);	  numToRead    =    Math.min(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  +  1);	  numToRead    =    Math.min(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  offset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  offset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  offset);	  numToRead    =    Math.min(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableEnd()  -  2);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableEnd()  -  2);	  numToRead    =    Math.min(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
39	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableStart());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableStart());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableStart());	  numToRead    =    Math.min(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
40	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableEnd());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableEnd());	  numToRead    =    Math.min(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
41	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  entryOffset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryOffset);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  numToRead  =  Math.min(availableSize,  numToRead);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(availableSize,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableSize,  numToRead);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
43	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableSize  +  1);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
44	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableSize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(0,  availableSize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableSize);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
45	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableCount());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableCount());	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableOffset());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableOffset());	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
47	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableLen());	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  available()  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  available()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  available()  -  1);	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  entrySize);	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
50	[BUG]  [BUGGY]  numToRead  =  Math.min(availableLen,  numToRead);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(availableLen,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableLen,  numToRead);	  numToRead    =    Math.min(numToRead,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  +  1);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen  +  1);	  numToRead    =    Math.min(numToRead,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
52	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableLen);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(0,  availableLen);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableLen);	  numToRead    =    Math.min(numToRead,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
53	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  offset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen  -  offset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen  -  offset);	  numToRead    =    Math.min(numToRead,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
54	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  -  1);	  numToRead    =    Math.min(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  +  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  +  1);	  numToRead    =    Math.min(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
56	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  2);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  -  2);	  numToRead    =    Math.min(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  offset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableLen()  -  offset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableLen()  -  offset);	  numToRead    =    Math.min(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableSize());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableSize());	  numToRead    =    Math.min(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
59	[BUG]  [BUGGY]  numToRead  =  Math.min(availableEnd,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(availableEnd,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(availableEnd,  numToRead);	  numToRead    =    Math.min(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
60	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  rest.available());  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  rest.available());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  rest.available());	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
61	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.available());  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  is.available());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.available());	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
62	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableLen);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableLen);	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
63	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableRecords.length);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableRecords.length);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
64	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordSize();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  currEntry.getRecordSize();  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordSize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
65	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordCount();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  currEntry.getRecordCount();  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordCount();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numToRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numToRead  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
67	[BUG]  [BUGGY]  int  numRecords  =  currEntry.getRecordLimits();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  currEntry.getRecordLimits();  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.getRecordLimits();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
68	[BUG]  [BUGGY]  int  numRecords  =  currEntry.recordSize();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  currEntry.recordSize();  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  currEntry.recordSize();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  int  numRecords  =  is.read(buf,  offset,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	int  numRecords  =  is.read(buf,  offset,  numToRead);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  availableSize);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  availableSize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  availableSize);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
71	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.length,  availableSize);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(remainder.length,  availableSize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.length,  availableSize);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
72	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes()  -  1);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableAsBytes()  -  1);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableAsBytes()  -  1);	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
73	[BUG]  [BUGGY]  numToRead  =  Math.min(0,  availableRecords());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(0,  availableRecords());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(0,  availableRecords());	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  accessRecords());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessRecords());	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessCount());  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  accessCount());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessCount());	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
76	[BUG]  [BUGGY]  numToRead  =  Math.min(remainderLen,  numToRead);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(remainderLen,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainderLen,  numToRead);	  numToRead    =    Math.min(numToRead,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  numToRead  =  Math.max(availableLen,  numToRead);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(availableLen,  numToRead);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(availableLen,  numToRead);	  numToRead    =    Math.min(numToRead,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  numToRead  =  Math.min(remainder.length,  availableLen);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(remainder.length,  availableLen);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(remainder.length,  availableLen);	  numToRead    =    Math.min(numToRead,    availableLen);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  accessLen());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  accessLen());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  accessLen());	  numToRead    =    Math.min(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
80	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableLen());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableLen());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableLen());	  numToRead    =    Math.min(numToRead,    availableLen());    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
81	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableRecords());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableRecords());	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
82	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableRecords());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableRecords());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableRecords());	  numToRead    =    Math.min(numToRead,    availableRecords());    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
83	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  hasHitEOF);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  hasHitEOF);	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
84	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  is.available());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  is.available());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  is.available());	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
85	[BUG]  [BUGGY]  numToRead  =  Math.max(numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.max(numToRead,  entryOffset);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.max(numToRead,  entryOffset);	  numToRead    =    Math.max(numToRead,    available());    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
86	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableEnd());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableEnd());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableEnd());	  numToRead    =    Math.min(numToRead,    availableEnd());    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
87	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entryLen);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  entryLen);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entryLen);	  numToRead    =    Math.min(numToRead,    availableSize);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
88	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount());  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableCount());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableCount());	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
89	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableCount());  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  is.availableCount());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  is.availableCount());	  numToRead    =    Math.min(numToRead,    availableCount());    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
90	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
91	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
92	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
93	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
94	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  if(numToRead  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	if(numToRead  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  available())-  1;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  available())-  1;  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  available())-  1;	  numToRead    =    Math.min(numToRead,    available()    -    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
96	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.entrySize);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.entrySize);	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
97	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.available()  -  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.available()  -  entrySize);	  numToRead    =    Math.min(numToRead,    this.available());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
98	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  this.availableOffset());  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  this.availableOffset());	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
99	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  availableOffset  +  entrySize);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
100	[BUG]  [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    int  totalRead  =  0;  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(   "No  current  tar  entry   ");  }    [BUGGY]  numToRead  =  Math.min(numToRead,  entries.length);  [BUGGY]      totalRead  =  is.read(buf,  offset,  numToRead);  if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(   "Truncated  TAR  archive   ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	652	652	1	replace	numToRead  =  Math.min(numToRead,  entries.length);	  numToRead    =    Math.min(numToRead,    availableOffset());    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
