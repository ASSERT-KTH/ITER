bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  ch  =  coll.read())!=  -1))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  coll.read())!=  -1))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	((  ch  =  coll.read())!=  -1))  {  read++;  }	  read    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
2	[BUG]  [BUGGY]  ((  ch  =  coll.read())  >=  -1))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ((  ch  =  coll.read())  >=  -1))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	((  ch  =  coll.read())  >=  -1))  {  read++;  }	  read    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
3	[BUG]  [BUGGY]  read  =  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  =  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	read  =  0)  {  read++;  }	  read    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
4	[BUG]  [BUGGY]  read  >  0)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  >  0)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	read  >  0)  {  return  coll.toString();  }	  read    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
5	[BUG]  [BUGGY]  read  >  0)  {  return  coll.toString(keyword);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  >  0)  {  return  coll.toString(keyword);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	read  >  0)  {  return  coll.toString(keyword);  }	  read    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	170	None	replace
6	[BUG]  [BUGGY]  IOUtils.readFully(i,  coll);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  IOUtils.readFully(i,  coll);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	IOUtils.readFully(i,  coll);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	237	None	replace
7	[BUG]  [BUGGY]  i.remove(ch);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.remove(ch);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	i.remove(ch);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	237	None	replace
8	[BUG]  [BUGGY]  i.removeChunk(ch);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.removeChunk(ch);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	i.removeChunk(ch);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	237	None	replace
9	[BUG]  [BUGGY]  i.remove(0);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.remove(0);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	i.remove(0);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	237	None	replace
10	[BUG]  [BUGGY]  i.removeChild(ch);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  i.removeChild(ch);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	i.removeChild(ch);	  i.remove();    	non-compiled	[CE]  illegal  start  of  type	237	None	replace
11	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.put(keyword,    i.getValue()    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
12	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.put(keyword,    i.getValue()    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
13	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(keyword,  i.getValue()  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(keyword,  i.getValue()  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(keyword,  i.getValue()	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.put(keyword,    i.getValue()    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
14	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.put(keyword,    i.getValue()    	non-compiled	[CE]  illegal  start  of  type	227	None	replace
15	[BUG]  [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  return  coll.toByteArray();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.hasNext())  {  read++;  }  else  {  return  coll.toByteArray();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  coll.hasNext())  {  read++;  }  else  {  return  coll.toByteArray();  }	  if(i.hasNext())    {    read++;    }    else    {    return    coll.toByteArray();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
16	[BUG]  [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  return  coll.toByteArray();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.hasNext())  {  read++;  }  else  {  return  coll.toByteArray();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  i.hasNext())  {  read++;  }  else  {  return  coll.toByteArray();  }	  if(i.hasNext())    {    read++;    }    else    {    return    coll.toByteArray();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
17	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toByteArray();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toByteArray();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  else  {  return  coll.toByteArray();  }	  if(i.hasNext())    {    read++;    }    else    {    return    coll.toByteArray();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
18	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toByteArray();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toByteArray();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||(i.hasNext()  &&  coll.isEmpty()))  {  read++;  }  else  {  return  coll.toByteArray();  }	  if(i.hasNext())    {    read++;    }    else    {    return    coll.toByteArray();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
19	[BUG]  [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||(i.hasNext()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }	  if(i.hasNext())    {    read++;    }    else    {    return    coll.toByteArray();    }    	non-compiled	[CE]  illegal  start  of  type	132	None	replace
20	[BUG]  [BUGGY]  if(coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }	  if(i.hasNext()    ||    coll.hasCharsetName(CharsetNames.UTF_8))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	209	None	replace
21	[BUG]  [BUGGY]  ||  coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }	  if(i.hasNext()    ||    coll.hasCharsetName(CharsetNames.UTF_8))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	209	None	replace
22	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF  &&  coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF  &&  coll.hasCharsetName(CharsetNames.UTF_8))  {  read++;  }	  if(i.hasNext()    ||    coll.hasCharsetName(CharsetNames.UTF_8))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	209	None	replace
23	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.append(ch);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.append(ch);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF)  {  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.append(ch);  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
24	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  hasHitEOF  =  coll.isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  hasHitEOF  =  coll.isEnabled(Feature.QUOTE_FIELD_NAMES);	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
25	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
26	[BUG]  [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ch  =  coll.toString(CharsetNames.UTF_8);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	ch  =  coll.toString(CharsetNames.UTF_8);	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
27	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  hasHitEOF  =  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  hasHitEOF  =  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES);	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	160	None	replace
28	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  >=  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  >=  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  >=  SMALL_BUFFER_SIZE;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    SMALL_BUFFER_SIZE;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	238	None	replace
29	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  SMALL_BUFFER_LENGTH;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    SMALL_BUFFER_SIZE;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	238	None	replace
30	[BUG]  [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  recordSize;  read++)  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(len  >  0)  {  for(int  read  =  0;  read  <  recordSize;  read++)  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(len  >  0)  {  for(int  read  =  0;  read  <  recordSize;  read++)  {  return  coll.toString();  }	  if(len    >    0)    {    for(int    read    =    0;    read    <    SMALL_BUFFER_SIZE;    read++)    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	238	None	replace
31	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n')  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n')  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  'n')  {  read++;  }  else  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    =='')    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
32	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch!=  'n')  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch!=  'n')  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch!=  'n')  {  read++;  }  else  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    =='')    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
33	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  '-')  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  '-')  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  '-')  {  read++;  }  else  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    =='')    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
34	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  ==  'n')  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  ==  'n')  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  ch  ==  'n')  {  read++;  }  else  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    =='')    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
35	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  '/')  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  '/')  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  ch  ==  '/')  {  read++;  }  else  {  coll.close();  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    ch    =='')    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	177	None	replace
36	[BUG]  [BUGGY]  while(i.hasNext()  <  len)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()  <  len)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(i.hasNext()  <  len)  {  read++;  }  else  {  return  coll.toString();  }	  while(i.hasNext())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
37	[BUG]  [BUGGY]  while(i.hasNext()!=  read)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()!=  read)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(i.hasNext()!=  read)  {  read++;  }  else  {  return  coll.toString();  }	  while(i.hasNext())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
38	[BUG]  [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  while(i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }	  while(i.hasNext())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
39	[BUG]  [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  while(i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  while(i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  }	  while(i.hasNext())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
40	[BUG]  [BUGGY]  while(!i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(!i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }	  while(i.hasNext())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	220	None	replace
41	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  while(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  while(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements())  {  while(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  }	  while(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
42	[BUG]  [BUGGY]  while(!i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(!i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }	  while(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
43	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  while(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  while(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements())  {  while(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }	  while(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
44	[BUG]  [BUGGY]  while(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(i.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }	  while(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
45	[BUG]  [BUGGY]  while(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }	  while(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
46	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  while(i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  while(i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements())  {  while(i.hasMoreElements())  {  read++;  }	  while(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	228	None	replace
47	[BUG]  [BUGGY]  if(hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toByteArray();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
48	[BUG]  [BUGGY]  ||!hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||!hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toByteArray();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
49	[BUG]  [BUGGY]  ||  hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toByteArray();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
50	[BUG]  [BUGGY]  while(!hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(!hasHitEOF)  {  read++;  }  else  {  return  coll.toByteArray();  }	  if(!hasHitEOF)    {    read++;    }    else    {    return    coll.toByteArray();    }    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
51	[BUG]  [BUGGY]  while((  ch  =  coll.read())!=  -1)  {  if(ch  ==  ':')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  coll.read())!=  -1)  {  if(ch  ==  ':')  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while((  ch  =  coll.read())!=  -1)  {  if(ch  ==  ':')  {  read++;  }	  if(ch    ==    ':')    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	216	None	replace
52	[BUG]  [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  ':'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(ch  ==  ':'  ||  ch  ==  'n'  ||  ch  ==  'r')  {  read++;  }	  if(ch    ==    ':')    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	216	None	replace
53	[BUG]  [BUGGY]  if(ch  ==  ':')  {  if(len  ==  0  ||  ch  ==  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  ':')  {  if(len  ==  0  ||  ch  ==  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(ch  ==  ':')  {  if(len  ==  0  ||  ch  ==  'r')  {  read++;  }	  if(ch    ==    ':')    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	216	None	replace
54	[BUG]  [BUGGY]  if(ch  ==  ':')  {  if(ch  ==  'n'  ||  ch!=  'r')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  ':')  {  if(ch  ==  'n'  ||  ch!=  'r')  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(ch  ==  ':')  {  if(ch  ==  'n'  ||  ch!=  'r')  {  read++;  }	  if(ch    ==    ':')    {    if(ch    ==    'n'    ||    ch    ==    'r')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	216	None	replace
55	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME,  ch))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME,  ch))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME,  ch))  {  read++;  }	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
56	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  read++;  }	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
57	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME))  {  read++;  }	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
58	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME),  read++)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME),  read++)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME),  read++)  {  read++;  }	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
59	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME),  read++;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME),  read++;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME),  read++;	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
60	[BUG]  [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME));  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME));  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(!hasHitEOF  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAME));	  while(!hasHitEOF    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAME))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
61	[BUG]  [BUGGY]  if(ch  ==  ','  ||  ch  ==  '@')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  ','  ||  ch  ==  '@')  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(ch  ==  ','  ||  ch  ==  '@')  {  read++;  }	  if(ch    ==    '.'    ||    ch    ==    '@')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	235	None	replace
62	[BUG]  [BUGGY]  if(ch!=  '.'  ||  ch  ==  '@')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch!=  '.'  ||  ch  ==  '@')  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(ch!=  '.'  ||  ch  ==  '@')  {  read++;  }	  if(ch    ==    '.'    ||    ch    ==    '@')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	235	None	replace
63	[BUG]  [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'n'  ||  ch  ==  'n')  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(ch  ==  'n'  ||  ch  ==  'n')  {  read++;  }	  if(ch    ==    '.'    ||    ch    ==    '@')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	235	None	replace
64	[BUG]  [BUGGY]  ||(coll.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(coll.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||(coll.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))  {  read++;  }	  ||(i.hasMoreElements()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
65	[BUG]  [BUGGY]  ||  coll.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  coll.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  ||(i.hasMoreElements()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
66	[BUG]  [BUGGY]  ||(i.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  keyword)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  keyword)))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||(i.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  keyword)))  {  read++;  }	  ||(i.hasMoreElements()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
67	[BUG]  [BUGGY]  ||(i.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  true)))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||(i.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  true)))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||(i.hasMoreElements()  &&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES,  true)))  {  read++;  }	  ||(i.hasMoreElements()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
68	[BUG]  [BUGGY]  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  ||(i.hasMoreElements()    &&    coll.isEnabled(Feature.QUOTE_FIELD_NAMES)))    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
69	[BUG]  [BUGGY]  read  <  =  0  ||  coll.toString().length()  ==  0)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  <  =  0  ||  coll.toString().length()  ==  0)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	read  <  =  0  ||  coll.toString().length()  ==  0)  {  read++;  }  else  {  return  coll.toString();  }	  if(len    <    =    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
70	[BUG]  [BUGGY]  read  <  =  0  ||  coll.toString().equals( "- "))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  <  =  0  ||  coll.toString().equals( "- "))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	read  <  =  0  ||  coll.toString().equals( "- "))  {  read++;  }  else  {  return  coll.toString();  }	  if(len    <    =    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
71	[BUG]  [BUGGY]  read  <  =  0  ||  coll.toString().endsWith( ".java "))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  <  =  0  ||  coll.toString().endsWith( ".java "))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	read  <  =  0  ||  coll.toString().endsWith( ".java "))  {  read++;  }	  if(len    <    =    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
72	[BUG]  [BUGGY]  read  +=  len;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  read  +=  len;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	read  +=  len;	  if(len    <    =    0)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
73	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i))!=  -1)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  IOUtils.readFully(i))!=  -1)  {  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while((  ch  =  IOUtils.readFully(i))!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
74	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i).read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  IOUtils.readFully(i).read())!=  -1)  {  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while((  ch  =  IOUtils.readFully(i).read())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
75	[BUG]  [BUGGY]  while((  ch  =  col.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  col.read())!=  -1)  {  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while((  ch  =  col.read())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
76	[BUG]  [BUGGY]  while((  ch  =  IOUtils.readFully(i),  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  IOUtils.readFully(i),  i.read())!=  -1)  {  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while((  ch  =  IOUtils.readFully(i),  i.read())!=  -1)  {	  while((    ch    =    i.read())!=    -1)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
77	[BUG]  [BUGGY]  ||!i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||!i.hasNext())  {  read++;  }  else  {  return  coll.toString();  }	  ||    i.hasNext())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
78	[BUG]  [BUGGY]  ||  i.next())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  i.next())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  i.next())  {  read++;  }  else  {  return  coll.toString();  }	  ||    i.hasNext())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
79	[BUG]  [BUGGY]  ||  col.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  col.hasNext())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  col.hasNext())  {  read++;  }  else  {  return  coll.toString();  }	  ||    i.hasNext())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
80	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.next();  if(keyword  ==  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.next();  if(keyword  ==  null)  {  break;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.next();  if(keyword  ==  null)  {  break;  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    final    String    keyword    =    i.next();    if(keyword!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
81	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.next();  if(keyword!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.next();  if(keyword!=  null)  {  break;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.next();  if(keyword!=  null)  {  break;  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    final    String    keyword    =    i.next();    if(keyword!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
82	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.getKey();  if(keyword!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.getKey();  if(keyword!=  null)  {  break;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.getKey();  if(keyword!=  null)  {  break;  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    final    String    keyword    =    i.next();    if(keyword!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
83	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.next();  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.next();  if(keyword!=  null)  {  continue;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  final  String  keyword  =  i.next();  if(keyword!=  null)  {  continue;  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    final    String    keyword    =    i.next();    if(keyword!=    null)    {    break;    }    	non-compiled	[CE]  illegal  start  of  type	197	None	replace
84	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    coll.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
85	[BUG]  [BUGGY]  if(coll.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(coll.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(coll.hasMoreElements()  ||  coll.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    coll.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
86	[BUG]  [BUGGY]  if(!i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!i.hasMoreElements()  &&  coll.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements()    ||    coll.hasMoreElements())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
87	[BUG]  [BUGGY]  if(i.hasNext()!=  len)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()!=  len)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext()!=  len)  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasNext()    <    len)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	218	None	replace
88	[BUG]  [BUGGY]  if(i.hasNext()  ==  len)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  ==  len)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext()  ==  len)  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasNext()    <    len)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	218	None	replace
89	[BUG]  [BUGGY]  if(i.hasNext()!=  len)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()!=  len)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext()!=  len)  {  read++;  }	  if(i.hasNext()    <    len)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	218	None	replace
90	[BUG]  [BUGGY]  if(len  <  =  0)  {  if(i.hasNext()  <  len)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(len  <  =  0)  {  if(i.hasNext()  <  len)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(len  <  =  0)  {  if(i.hasNext()  <  len)  {  read++;  }	  if(i.hasNext()    <    len)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	218	None	replace
91	[BUG]  [BUGGY]  if(i.hasNext()  >=  len)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext()  >=  len)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext()  >=  len)  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasNext()    <    len)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	218	None	replace
92	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	233	None	replace
93	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  coll.close();  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  coll.close();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  if(!hasHitEOF)  {  read++;  }  else  {  coll.close();  }	  if(!hasHitEOF)    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.close();    }    	non-compiled	[CE]  illegal  start  of  type	233	None	replace
94	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    coll.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    coll.add(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
95	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_SIZE)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    coll.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    coll.add(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
96	[BUG]  [BUGGY]  ||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    coll.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    coll.add(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
97	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    coll.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    coll.add(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
98	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)&&  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    coll.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    coll.add(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
99	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAME)||  coll.isEnabled(Feature.QUOTE_FIELD_SIZE))  {  read++;  }  else  {  coll.add(i.getKeyword());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    coll.isEnabled(Feature.QUOTE_FIELD_SIZE))    {    read++;    }    else    {    coll.add(i.getKeyword());    }    	non-compiled	[CE]  illegal  start  of  type	183	None	replace
100	[BUG]  [BUGGY]  final  int  len  =  coll.length()  -  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  len  =  coll.length()  -  1;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  len  =  coll.length()  -  1;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
101	[BUG]  [BUGGY]  final  int  len  =  coll.length()  -  read;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  len  =  coll.length()  -  read;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  len  =  coll.length()  -  read;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
102	[BUG]  [BUGGY]  final  int  len  =  coll.length()  +  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  len  =  coll.length()  +  1;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  len  =  coll.length()  +  1;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
103	[BUG]  [BUGGY]  final  int  len  =  coll.length()  +  read;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  len  =  coll.length()  +  read;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  len  =  coll.length()  +  read;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
104	[BUG]  [BUGGY]  final  int  len  =  coll.length()  -  2;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  len  =  coll.length()  -  2;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  len  =  coll.length()  -  2;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
105	[BUG]  [BUGGY]  final  int  len  =  coll.length()  +  ch;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  len  =  coll.length()  +  ch;  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  len  =  coll.length()  +  ch;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
106	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF_8);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
107	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF_8);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
108	[BUG]  [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF_8);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
109	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF_8);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF_8);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
110	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEn  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEn  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEn	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF_8);    }    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
111	[BUG]  [BUGGY]  final  int  len  =  ch.length();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  len  =  ch.length();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  len  =  ch.length();	  if(len    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    final    String    keyword    =    coll.toString(CharsetNames.UTF_8);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
112	[BUG]  [BUGGY]  final  int  len  =  getLength();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  len  =  getLength();  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  len  =  getLength();	  if(len    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    final    String    keyword    =    coll.toString(CharsetNames.UTF_8);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
113	[BUG]  [BUGGY]  final  int  len  =  getLength(ch);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  final  int  len  =  getLength(ch);  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	final  int  len  =  getLength(ch);	  if(len    >    0)    {    for(int    i    =    0;    i    <    len;    ++i)    {    final    String    keyword    =    coll.toString(CharsetNames.UTF_8);    if(keyword!=    null)    {    }    	non-compiled	[CE]  illegal  start  of  type	157	None	replace
114	[BUG]  [BUGGY]  Context.checkState(i.hasMoreElements()  ||  hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  Context.checkState(i.hasMoreElements()  ||  hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	Context.checkState(i.hasMoreElements()  ||  hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreElements()    ||    hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
115	[BUG]  [BUGGY]  (i.hasMoreElements()  &&  hasHitEOF))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasMoreElements()  &&  hasHitEOF))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	(i.hasMoreElements()  &&  hasHitEOF))  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreElements()    ||    hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
116	[BUG]  [BUGGY]  (i.hasMoreElements()  ||  hasHitEOF))  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasMoreElements()  ||  hasHitEOF))  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	(i.hasMoreElements()  ||  hasHitEOF))  {  read++;  }  else  {  return  coll.toString();  }	  if(i.hasMoreElements()    ||    hasHitEOF)    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	193	None	replace
117	[BUG]  [BUGGY]  if(coll.hasChildCount()  ||  coll.hasChildCount())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(coll.hasChildCount()  ||  coll.hasChildCount())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(coll.hasChildCount()  ||  coll.hasChildCount())  {  read++;  }	  if(i.hasNext()    ||    coll.hasChildCount())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
118	[BUG]  [BUGGY]  if(coll.hasNext()  ||  coll.hasChildCount())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(coll.hasNext()  ||  coll.hasChildCount())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(coll.hasNext()  ||  coll.hasChildCount())  {  read++;  }	  if(i.hasNext()    ||    coll.hasChildCount())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
119	[BUG]  [BUGGY]  while(i.hasNext()  &&  coll.hasChildCount())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  while(i.hasNext()  &&  coll.hasChildCount())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	while(i.hasNext()  &&  coll.hasChildCount())  {  read++;  }	  if(i.hasNext()    ||    coll.hasChildCount())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
120	[BUG]  [BUGGY]  (i.hasNext()  ||  coll.hasChildCount()))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  (i.hasNext()  ||  coll.hasChildCount()))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	(i.hasNext()  ||  coll.hasChildCount()))  {  read++;  }	  if(i.hasNext()    ||    coll.hasChildCount())    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
121	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    coll.put(keyword,    i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
122	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    coll.put(keyword,    i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
123	[BUG]  [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    coll.put(keyword,    i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
124	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    coll.put(keyword,    i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
125	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  read++;  }  else  {  coll.put(keyword,  i.getValue());  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&!hasHitEOF)    {    read++;    }    else    {    coll.put(keyword,    i.getValue());    }    	non-compiled	[CE]  illegal  start  of  type	226	None	replace
126	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }	  if(!hasHitEOF    &&    coll.isEOF())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	242	None	replace
127	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }	  if(!hasHitEOF    &&    coll.isEOF())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	242	None	replace
128	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF    &&    coll.isEOF())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	242	None	replace
129	[BUG]  [BUGGY]  if(hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF    &&    coll.isEOF())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	242	None	replace
130	[BUG]  [BUGGY]  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }	  if(!hasHitEOF    &&    coll.isEOF())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	242	None	replace
131	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  if(!hasHitEOF  &&  coll.isEOF())  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF    &&    coll.isEOF())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	242	None	replace
132	[BUG]  [BUGGY]  if(i.hasMoreElements()  &&  coll.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  &&  coll.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements()  &&  coll.size()  >  0)  {  read++;  }	  if(i.hasMoreElements()    ||    coll.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	236	None	replace
133	[BUG]  [BUGGY]  if(coll.hasMoreElements()  ||  coll.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(coll.hasMoreElements()  ||  coll.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(coll.hasMoreElements()  ||  coll.size()  >  0)  {  read++;  }	  if(i.hasMoreElements()    ||    coll.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	236	None	replace
134	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  coll.size()  ==  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||  coll.size()  ==  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements()  ||  coll.size()  ==  0)  {  read++;  }	  if(i.hasMoreElements()    ||    coll.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	236	None	replace
135	[BUG]  [BUGGY]  if(!i.hasMoreElements()  &&  coll.size()  >  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!i.hasMoreElements()  &&  coll.size()  >  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!i.hasMoreElements()  &&  coll.size()  >  0)  {  read++;  }	  if(i.hasMoreElements()    ||    coll.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	236	None	replace
136	[BUG]  [BUGGY]  if(i.hasMoreElements()  ||  coll.size()  >=  0)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements()  ||  coll.size()  >=  0)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements()  ||  coll.size()  >=  0)  {  read++;  }	  if(i.hasMoreElements()    ||    coll.size()    >    0)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	236	None	replace
137	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
138	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
139	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF)  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
140	[BUG]  [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  coll.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||    coll.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    	non-compiled	[CE]  illegal  start  of  type	143	None	replace
141	[BUG]  [BUGGY]  ||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
142	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(zipEncoding!=  null)  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(zipEncoding!=  null)  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
143	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(zipEncoding!=  null)  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(zipEncoding!=  null)  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
144	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
145	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
146	[BUG]  [BUGGY]  if(zipEncoding!=  null)  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(zipEncoding!=  null)  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(zipEncoding!=  null)  {  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }	  if(!zipEncoding.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    	non-compiled	[CE]  illegal  start  of  type	142	None	replace
147	[BUG]  [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  'E'  ||  ch  ==  'E')  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(ch  ==  'E'  ||  ch  ==  'E')  {  read++;  }	  if(ch    ==    'e'    ||    ch    ==    'E')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
148	[BUG]  [BUGGY]  if(ch!=  'e'  ||  ch  ==  'E')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch!=  'e'  ||  ch  ==  'E')  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(ch!=  'e'  ||  ch  ==  'E')  {  read++;  }	  if(ch    ==    'e'    ||    ch    ==    'E')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
149	[BUG]  [BUGGY]  if(ch  ==  '-'  ||  ch  ==  '+')  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(ch  ==  '-'  ||  ch  ==  '+')  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(ch  ==  '-'  ||  ch  ==  '+')  {  read++;  }	  if(ch    ==    'e'    ||    ch    ==    'E')    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
150	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF)    {    if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
151	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  else  {  coll.toString();  }	  if(!hasHitEOF)    {    if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
152	[BUG]  [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF)  {  if(i.hasMoreElements())  {  read++;  }	  if(!hasHitEOF)    {    if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
153	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }  else  {  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }  else  {  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements())  {  if(!hasHitEOF)  {  read++;  }  else  {  coll.toString();  }	  if(!hasHitEOF)    {    if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
154	[BUG]  [BUGGY]  if(!hasHitEOF)  {  while(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(!hasHitEOF)  {  while(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(!hasHitEOF)  {  while(i.hasMoreElements())  {  read++;  }  else  {  return  coll.toString();  }	  if(!hasHitEOF)    {    if(i.hasMoreElements())    {    read++;    }    else    {    return    coll.toString();    }    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
155	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  if(!hitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  if(!hitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements())  {  if(!hitEOF)  {  read++;  }	  if(i.hasMoreElements())    {    if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
156	[BUG]  [BUGGY]  ||  coll.hasMoreElements())  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  ||  coll.hasMoreElements())  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	||  coll.hasMoreElements())  {  read++;  }	  if(i.hasMoreElements())    {    if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
157	[BUG]  [BUGGY]  if(i.hasMoreElements())  {  while(!hasHitEOF)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasMoreElements())  {  while(!hasHitEOF)  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasMoreElements())  {  while(!hasHitEOF)  {  read++;  }	  if(i.hasMoreElements())    {    if(!hasHitEOF)    {    read++;    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
158	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  coll.append(ch);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  coll.append(ch);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  coll.append(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES,    read))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
159	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  coll.append(ch);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  coll.append(ch);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  coll.append(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES,    read))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
160	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  coll.append(ch);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  coll.append(ch);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  else  {  coll.append(ch);  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES,    read))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
161	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES,    read))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
162	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES,    read))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
163	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_NAMES,  read))  {  read++;  }	  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES)&&    isEnabled(Feature.QUOTE_FIELD_NAMES,    read))    {    read++;    }    else    {    coll.append(ch);    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
164	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
165	[BUG]  [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {      [BUGGY]  if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }  [BUGGY]      if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	466	466	1	replace	if(i.hasNext())  {  if(!isEnabled(Feature.QUOTE_FIELD_NAMES))  {  read++;  }  else  {  coll.setCharacterEncoding(CharacterEncoding.UTF8);  }	  if(i.hasNext())    {    if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))    {    read++;    }    else    {    coll.setCharacterEncoding(CharacterEncoding.UTF8);    }    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
