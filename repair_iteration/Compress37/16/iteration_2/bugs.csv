bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  read  =  headers.length  -  1;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.length  -  1;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.length  -  1;	  int    read    =    headers.length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  int  read  =  headers.length  -  2;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.length  -  2;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.length  -  2;	  int    read    =    headers.length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  int  read  =  headers.length  -  len;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.length  -  len;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.length  -  len;	  int    read    =    headers.length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
4	[BUG]  [BUGGY]  int  read  =  headers.length  +  len;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.length  +  len;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.length  +  len;	  int    read    =    headers.length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
5	[BUG]  [BUGGY]  int  read  =  headers.length  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.length  +  1;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.length  +  1;	  int    read    =    headers.length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  int  read  =  globalPaxHeaders.length;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  globalPaxHeaders.length;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  globalPaxHeaders.length;	  int    read    =    headers.length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  int  read  =  headers.length  -  4;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.length  -  4;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.length  -  4;	  int    read    =    headers.length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  int  read  =(headers.size()  <  0)?  0  :  headers.size();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(headers.size()  <  0)?  0  :  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(headers.size()  <  0)?  0  :  headers.size();	  int    read    =(len    <    0)?    0    :    headers.size();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  int  read  =(headers  <  0)?  0  :  headers.size();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(headers  <  0)?  0  :  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(headers  <  0)?  0  :  headers.size();	  int    read    =(len    <    0)?    0    :    headers.size();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  int  read  =(headers!=  null)?  0  :  headers.size();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(headers!=  null)?  0  :  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(headers!=  null)?  0  :  headers.size();	  int    read    =(len    <    0)?    0    :    headers.size();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  int  read  =(len  <  1)?  0  :  headers.size();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(len  <  1)?  0  :  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(len  <  1)?  0  :  headers.size();	  int    read    =(len    <    0)?    0    :    headers.size();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
12	[BUG]  [BUGGY]  int  read  =(length  <  0)?  0  :  headers.size();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(length  <  0)?  0  :  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(length  <  0)?  0  :  headers.size();	  int    read    =(len    <    0)?    0    :    headers.size();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
13	[BUG]  [BUGGY]  int  read  =  headers.size()  <  0?  0  :  len;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.size()  <  0?  0  :  len;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.size()  <  0?  0  :  len;	  int    read    =(len    <    0)?    0    :    headers.size();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
14	[BUG]  [BUGGY]  int  read  =  headers.indexOf('n',  0);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('n',  0);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('n',  0);	  int    read    =    headers.indexOf('n',    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  int  read  =  headers.indexOf('n',  '/');  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('n',  '/');  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('n',  '/');	  int    read    =    headers.indexOf('n',    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
16	[BUG]  [BUGGY]  int  read  =  headers.indexOf('n',  -1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('n',  -1);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('n',  -1);	  int    read    =    headers.indexOf('n',    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
17	[BUG]  [BUGGY]  int  read  =  headers.indexOf('n',  '-');  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('n',  '-');  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('n',  '-');	  int    read    =    headers.indexOf('n',    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
18	[BUG]  [BUGGY]  int  read  =  headers.indexOf('n',  len  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('n',  len  +  1);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('n',  len  +  1);	  int    read    =    headers.indexOf('n',    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
19	[BUG]  [BUGGY]  int  read  =  headers.indexOf('n',  '_');  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('n',  '_');  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('n',  '_');	  int    read    =    headers.indexOf('n',    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
20	[BUG]  [BUGGY]  long  read  =  0L;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  long  read  =  0L;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	long  read  =  0L;	  int    read    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  byte  read  =  0L;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  byte  read  =  0L;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	byte  read  =  0L;	  int    read    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  Integer  read  =  0L;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  Integer  read  =  0L;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	Integer  read  =  0L;	  int    read    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  Integer  read  =  0;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  Integer  read  =  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	Integer  read  =  0;	  int    read    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
24	[BUG]  [BUGGY]  int  read  =  1  <  <  SMALL_BUFFER_SIZE?  1  :  0;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  1  <  <  SMALL_BUFFER_SIZE?  1  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  1  <  <  SMALL_BUFFER_SIZE?  1  :  0;	  int    read    =    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  int  read  =  1  <  <  SMALL_BUFFER_SIZE?  headers.size()  :  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  1  <  <  SMALL_BUFFER_SIZE?  headers.size()  :  1;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  1  <  <  SMALL_BUFFER_SIZE?  headers.size()  :  1;	  int    read    =    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  int  read  =  1  <  <  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  1  <  <  SMALL_BUFFER_SIZE;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  1  <  <  SMALL_BUFFER_SIZE;	  int    read    =    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
27	[BUG]  [BUGGY]  int  read  =  1  <  <  SMALL_BUFFER_SIZE?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  1  <  <  SMALL_BUFFER_SIZE?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  1  <  <  SMALL_BUFFER_SIZE?  headers.size()  :  0;	  int    read    =    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
28	[BUG]  [BUGGY]  int  read  =  1  <  <  headers.length?  headers.length  :  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  1  <  <  headers.length?  headers.length  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  1  <  <  headers.length?  headers.length  :  0;	  int    read    =    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
29	[BUG]  [BUGGY]  int  read  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  globalPaxHeaders.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  globalPaxHeaders.size();	  int    read    =    headers.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  Integer  read  =  headers.size();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  Integer  read  =  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	Integer  read  =  headers.size();	  int    read    =    headers.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  long  read  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  long  read  =  headers.size()  -  1;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	long  read  =  headers.size()  -  1;	  int    read    =    headers.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
32	[BUG]  [BUGGY]  int  read  =  this.headers.size();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  this.headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  this.headers.size();	  int    read    =    headers.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
33	[BUG]  [BUGGY]  char  read  =  headers.size();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  char  read  =  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	char  read  =  headers.size();	  int    read    =    headers.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
34	[BUG]  [BUGGY]  String  read  =  0;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  String  read  =  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	String  read  =  0;	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
35	[BUG]  [BUGGY]  BigInteger  read  =  0;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  BigInteger  read  =  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	BigInteger  read  =  0;	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  Char  read  =  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  Char  read  =  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	Char  read  =  0;	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  Character  read  =  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  Character  read  =  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	Character  read  =  0;	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  Char  read  =  0L;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  Char  read  =  0L;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	Char  read  =  0L;	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  int  read  =  -1L;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  -1L;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  -1L;	  int    read    =    -1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
40	[BUG]  [BUGGY]  int  read  =(headers.size()  >  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(headers.size()  >  0)?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(headers.size()  >  0)?  headers.size()  :  0;	  int    read    =(len    >    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
41	[BUG]  [BUGGY]  int  read  =(len  ==  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(len  ==  0)?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(len  ==  0)?  headers.size()  :  0;	  int    read    =(len    >    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
42	[BUG]  [BUGGY]  int  read  =(len  <  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(len  <  0)?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(len  <  0)?  headers.size()  :  0;	  int    read    =(len    >    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  int  read  =(len  >=  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(len  >=  0)?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(len  >=  0)?  headers.size()  :  0;	  int    read    =(len    >    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  int  read  =(length  >  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(length  >  0)?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(length  >  0)?  headers.size()  :  0;	  int    read    =(len    >    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  int  read  =(len  >  0)?  headers.size()  :  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(len  >  0)?  headers.size()  :  1;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(len  >  0)?  headers.size()  :  1;	  int    read    =(len    >    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
46	[BUG]  [BUGGY]  int  read  =  headers.indexOf('  ',  0);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('  ',  0);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('  ',  0);	  int    read    =    headers.indexOf('    ',    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
47	[BUG]  [BUGGY]  int  read  =  headers.indexOf('  ',  ch);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('  ',  ch);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('  ',  ch);	  int    read    =    headers.indexOf('    ',    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
48	[BUG]  [BUGGY]  int  read  =  headers.indexOf('  ',  -1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('  ',  -1);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('  ',  -1);	  int    read    =    headers.indexOf('    ',    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  int  read  =  headers.indexOf('  ',  len  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('  ',  len  +  1);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('  ',  len  +  1);	  int    read    =    headers.indexOf('    ',    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
50	[BUG]  [BUGGY]  int  read  =  headers.indexOf('  ',  0,  len);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('  ',  0,  len);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('  ',  0,  len);	  int    read    =    headers.indexOf('    ',    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  char  read  =  headers.indexOf('  ',  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  char  read  =  headers.indexOf('  ',  len);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	char  read  =  headers.indexOf('  ',  len);	  int    read    =    headers.indexOf('    ',    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  final  int  read  =  headers.size();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  read  =  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  read  =  headers.size();	  final    int    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
53	[BUG]  [BUGGY]  final  int  read  =  0L;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  read  =  0L;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  read  =  0L;	  final    int    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
54	[BUG]  [BUGGY]  final  int  read  =  headers.length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  read  =  headers.length;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  read  =  headers.length;	  final    int    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
55	[BUG]  [BUGGY]  final  int  read  =(headers.size()  >  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  read  =(headers.size()  >  0)?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  read  =(headers.size()  >  0)?  headers.size()  :  0;	  final    int    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
56	[BUG]  [BUGGY]  final  int  read  =(headers.size()  <  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  read  =(headers.size()  <  0)?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  read  =(headers.size()  <  0)?  headers.size()  :  0;	  final    int    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
57	[BUG]  [BUGGY]  final  int  read  =(headers.size()  ==  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  read  =(headers.size()  ==  0)?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  read  =(headers.size()  ==  0)?  headers.size()  :  0;	  final    int    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
58	[BUG]  [BUGGY]  int  read  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.size()  -  2;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.size()  -  2;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
59	[BUG]  [BUGGY]  int  read  =  headers.size()  +  len;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.size()  +  len;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.size()  +  len;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  int  read  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.size()  +  1;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.size()  +  1;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
61	[BUG]  [BUGGY]  int  read  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.size()  -  4;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.size()  -  4;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
62	[BUG]  [BUGGY]  int  read  =  headers.size()  -  len;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.size()  -  len;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.size()  -  len;	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
63	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  numRecords  =  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  numRecords  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
64	[BUG]  [BUGGY]  int  numRecords  =  headers.size();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  numRecords  =  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  numRecords  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
65	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  return  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  return  headers.get(i.next());  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  return  headers.get(i.next());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding  ==  null)  {  return  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding  ==  null)  {  return  headers.get(i.next());  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding  ==  null)  {  return  headers.get(i.next());  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  final  int  len  =  headers.size();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  len  =  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  len  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  final  String  encoding  =  headers[i.next()].toString();  if(encoding!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  final  String  encoding  =  headers[i.next()].toString();  if(encoding!=  null)  {  read++;  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  final  String  encoding  =  headers[i.next()].toString();  if(encoding!=  null)  {  read++;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
69	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  final  String  encoding  =  headers[i.next()].toString();  if(encoding!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  final  String  encoding  =  headers[i.next()].toString();  if(encoding!=  null)  {  continue;  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  i++)  {  final  String  encoding  =  headers[i.next()].toString();  if(encoding!=  null)  {  continue;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
70	[BUG]  [BUGGY]  int  read  =  1  <  <  SMALL_BUFFER_SIZE?  headers.length  :  0;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  1  <  <  SMALL_BUFFER_SIZE?  headers.length  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  1  <  <  SMALL_BUFFER_SIZE?  headers.length  :  0;	  int    read    =    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
71	[BUG]  [BUGGY]  int  read  =  headers.indexOf('  ',  '/');  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('  ',  '/');  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('  ',  '/');	  int    read    =    headers.indexOf('    ',    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  int  read  =  headers.indexOf('  ',  '-');  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('  ',  '-');  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('  ',  '-');	  int    read    =    headers.indexOf('    ',    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
73	[BUG]  [BUGGY]  int  read  =(headers  >  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(headers  >  0)?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(headers  >  0)?  headers.size()  :  0;	  int    read    =(len    >    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
74	[BUG]  [BUGGY]  int  read  =(headers.length  >  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(headers.length  >  0)?  headers.size()  :  0;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(headers.length  >  0)?  headers.size()  :  0;	  int    read    =(len    >    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
75	[BUG]  [BUGGY]  final  int  read  =  headers.indexOf('n',  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  read  =  headers.indexOf('n',  len);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  read  =  headers.indexOf('n',  len);	  final    int    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
76	[BUG]  [BUGGY]  final  int  read  =  headers.indexOf('  ',  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  read  =  headers.indexOf('  ',  len);  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  read  =  headers.indexOf('  ',  len);	  final    int    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
77	[BUG]  [BUGGY]  final  int  read  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  read  =  headers.size()  -  1;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  read  =  headers.size()  -  1;	  final    int    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
78	[BUG]  [BUGGY]  final  int  read  =  headers.indexOf('  ');  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  final  int  read  =  headers.indexOf('  ');  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	final  int  read  =  headers.indexOf('  ');	  final    int    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
79	[BUG]  [BUGGY]  float  read  =  0L;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  float  read  =  0L;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	float  read  =  0L;	  int    read    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
80	[BUG]  [BUGGY]  int  read  =(len  <  0)?  -1  :  -1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(len  <  0)?  -1  :  -1;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(len  <  0)?  -1  :  -1;	  int    read    =    -1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
81	[BUG]  [BUGGY]  int  read  =(len  >  0)?  headers.size()  :  -1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(len  >  0)?  headers.size()  :  -1;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(len  >  0)?  headers.size()  :  -1;	  int    read    =    -1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
82	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  headers.put(i,  headers[i]);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
83	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  final  String  encoding  =  headers.get(i);  if(encoding!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  final  String  encoding  =  headers.get(i);  if(encoding!=  null)  {  read++;  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0,  len  =  headers.size();  i  <  len;  ++i)  {  final  String  encoding  =  headers.get(i);  if(encoding!=  null)  {  read++;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
84	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers[i].toString();  if(encoding!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers[i].toString();  if(encoding!=  null)  {  read++;  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers[i].toString();  if(encoding!=  null)  {  read++;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
85	[BUG]  [BUGGY]  int  n  =  headers.size();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  n  =  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  n  =  headers.size();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
86	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers[i];  if(encoding!=  null)  {  return  headers.get(i);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers[i];  if(encoding!=  null)  {  return  headers.get(i);  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers[i];  if(encoding!=  null)  {  return  headers.get(i);  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
87	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers[i];  if(encoding!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers[i];  if(encoding!=  null)  {  read++;  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers[i];  if(encoding!=  null)  {  read++;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
88	[BUG]  [BUGGY]  int  read  =(headers.length  <  0)?  0  :  headers.size();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(headers.length  <  0)?  0  :  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(headers.length  <  0)?  0  :  headers.size();	  int    read    =(len    <    0)?    0    :    headers.size();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  int  read  =  headers.indexOf('n',  'n');  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('n',  'n');  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('n',  'n');	  int    read    =    headers.indexOf('n',    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
90	[BUG]  [BUGGY]  int  read  =  headers.read();  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.read();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.read();	  int    read    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
91	[BUG]  [BUGGY]  int  read  =  i.size();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  i.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  i.size();	  int    read    =    headers.size()    -    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
92	[BUG]  [BUGGY]  int  read  =  headers.indexOf('  ',  '_');  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('  ',  '_');  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('  ',  '_');	  int    read    =    headers.indexOf('    ',    len);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
93	[BUG]  [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(ch,  len));  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(ch,  len));  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	UnsupportedOperation  i  =  headers.get(new  InputStreamReader(ch,  len));	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
94	[BUG]  [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.MAX_VALUE,  len));  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.MAX_VALUE,  len));  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.MAX_VALUE,  len));	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
95	[BUG]  [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.parseLong(ch)));  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.parseLong(ch)));  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.parseLong(ch)));	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
96	[BUG]  [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.MAX_VALUE));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.MAX_VALUE));  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.MAX_VALUE));	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
97	[BUG]  [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.parseLong(ch,  len)));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.parseLong(ch,  len)));  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.parseLong(ch,  len)));	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
98	[BUG]  [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.parseLong(ch),  len));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.parseLong(ch),  len));  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	UnsupportedOperation  i  =  headers.get(new  InputStreamReader(Long.parseLong(ch),  len));	  char    read    =    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
99	[BUG]  [BUGGY]  int  read  =(headers  ==  null)?  0  :  headers.size();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =(headers  ==  null)?  0  :  headers.size();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =(headers  ==  null)?  0  :  headers.size();	  int    read    =(len    <    0)?    0    :    headers.size();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
100	[BUG]  [BUGGY]  int  read  =  i.read();  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  i.read();  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  i.read();	  int    read    =    0L;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
101	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  read++;  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  read++;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
102	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  break;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  break;  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  break;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
103	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  return  headers.get(i.next()  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  return  headers.get(i.next()  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  headers.size();  ++i)  {  final  String  encoding  =  headers.get(i.next());  if(encoding!=  null)  {  return  headers.get(i.next()	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
104	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  final  String  encoding  =  headers.get( "UTF-8 ");  if(encoding!=  null)  {  read++;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  final  String  encoding  =  headers.get( "UTF-8 ");  if(encoding!=  null)  {  read++;  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  final  String  encoding  =  headers.get( "UTF-8 ");  if(encoding!=  null)  {  read++;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
105	[BUG]  [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  final  String  encoding  =  headers.get( "UTF-8 ");  if(encoding!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  final  String  encoding  =  headers.get( "UTF-8 ");  if(encoding!=  null)  {  return  headers;  }  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	if(i.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  final  String  encoding  =  headers.get( "UTF-8 ");  if(encoding!=  null)  {  return  headers;  }	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
106	[BUG]  [BUGGY]  int  read  =  1  <  <  len;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  1  <  <  len;  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  1  <  <  len;	  int    read    =    1;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
107	[BUG]  [BUGGY]  int  read  =  headers.indexOf('n',  '0');  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;    [BUGGY]  int  read  =  headers.indexOf('n',  '0');  [BUGGY]    while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	459	459	1	replace	int  read  =  headers.indexOf('n',  '0');	  int    read    =    headers.indexOf('n',    len);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
