bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  entrySize;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MIN_VALUE  :  entrySize;	  return    isDirectory()?    Integer.MAX_VALUE    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
2	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  1;	  return    isDirectory()?    Integer.MAX_VALUE    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
3	[BUG]  [BUGGY]  return  hasHitEOF?  Integer.MAX_VALUE  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  hasHitEOF?  Integer.MAX_VALUE  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  hasHitEOF?  Integer.MAX_VALUE  :  entryOffset;	  return    isDirectory()?    Integer.MAX_VALUE    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
4	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MIN_VALUE  :  entryOffset;	  return    isDirectory()?    Integer.MAX_VALUE    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
5	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  entrySize  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  entrySize  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  entrySize  +  1;	  return    isDirectory()?    Integer.MAX_VALUE    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
6	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  0,  entryOffset;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  0,  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  0,  entryOffset;	  return    isDirectory()?    Integer.MAX_VALUE    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
10	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  size;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  size;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  size;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
11	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
14	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE  +  1;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE  +  entrySize;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE  +  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE  +  entrySize;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
16	[BUG]  [BUGGY]  return  hasHitEOF?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  hasHitEOF?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  hasHitEOF?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
17	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE  +  entryOffset;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
18	[BUG]  [BUGGY]  return  (int)(entrySize  /  fileSize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  /  fileSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  /  fileSize);	  return    (int)(recordSize    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
19	[BUG]  [BUGGY]  return  (int)(entryOffset  /  recordSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entryOffset  /  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entryOffset  /  recordSize);	  return    (int)(recordSize    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
20	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  2  +  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  2  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  2  +  1;	  return(int)(entrySize    -    entryOffset    +    1)/    2;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
21	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  4;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  4;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  4;	  return(int)(entrySize    -    entryOffset    +    1)/    2;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
22	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  2  *  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  2  *  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  2  *  Integer.MAX_VALUE;	  return(int)(entrySize    -    entryOffset    +    1)/    2;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
23	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  1;	  return(int)(entrySize    -    entryOffset    +    1)/    2;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
24	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  3;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  3;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  3;	  return(int)(entrySize    -    entryOffset    +    1)/    2;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
25	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  2  *  Integer.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  2  *  Integer.MIN_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  2  *  Integer.MIN_VALUE;	  return(int)(entrySize    -    entryOffset    +    1)/    2;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
26	[BUG]  [BUGGY]  if(entrySize  <  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	if(entrySize  <  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
27	[BUG]  [BUGGY]  while(entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  while(entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	while(entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
28	[BUG]  [BUGGY]  while(entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  while(entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	while(entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
29	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >=  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	if(entrySize  >=  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
30	[BUG]  [BUGGY]  while(entrySize  <  entryOffset)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  while(entrySize  <  entryOffset)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	while(entrySize  <  entryOffset)  {  throw  new  IllegalArgumentException( " ");	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
31	[BUG]  [BUGGY]  allowRecordSize(entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  allowRecordSize(entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	allowRecordSize(entryOffset)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
32	[BUG]  [BUGGY]  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  ||  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	||  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  ||(entrySize  <  SMALL_BUFFER_SIZE  &&  entryOffset  >  SMALL_BUFFER_SIZE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  ||(entrySize  <  SMALL_BUFFER_SIZE  &&  entryOffset  >  SMALL_BUFFER_SIZE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	||(entrySize  <  SMALL_BUFFER_SIZE  &&  entryOffset  >  SMALL_BUFFER_SIZE))  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  while(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  while(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	while(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  ||(entrySize  <  SMALL_BUFFER_SIZE  &&  entryOffset  <  SMALL_BUFFER_SIZE))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  ||(entrySize  <  SMALL_BUFFER_SIZE  &&  entryOffset  <  SMALL_BUFFER_SIZE))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	||(entrySize  <  SMALL_BUFFER_SIZE  &&  entryOffset  <  SMALL_BUFFER_SIZE))  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  while(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  while(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	while(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  ||(entrySize  <  SMALL_BUFFER_SIZE  &&  entryOffset  >  SMALL_BUFFER_SIZE))  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  ||(entrySize  <  SMALL_BUFFER_SIZE  &&  entryOffset  >  SMALL_BUFFER_SIZE))  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	||(entrySize  <  SMALL_BUFFER_SIZE  &&  entryOffset  >  SMALL_BUFFER_SIZE))  throw  new  IllegalArgumentException( " ");	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
38	[BUG]  [BUGGY]  return  (int)(entryOffset  -  recordSize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entryOffset  -  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entryOffset  -  recordSize);	  return    (int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
39	[BUG]  [BUGGY]  return(int)(entrySize  *  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  SMALL_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  *  SMALL_BUFFER_SIZE);	  return(int)(entrySize    /    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
40	[BUG]  [BUGGY]  return(int)(entryOffset  /  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  /  SMALL_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entryOffset  /  SMALL_BUFFER_SIZE);	  return(int)(entrySize    /    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
41	[BUG]  [BUGGY]  return(int)(blockSize  /  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(blockSize  /  SMALL_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(blockSize  /  SMALL_BUFFER_SIZE);	  return(int)(entrySize    /    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
42	[BUG]  [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  /  SMALL_BUFFER_SIZE  +  1);	  return(int)(entrySize    /    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
43	[BUG]  [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE  +  entryOffset);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE  +  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  /  SMALL_BUFFER_SIZE  +  entryOffset);	  return(int)(entrySize    /    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  isDirectory();  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  isDirectory();  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  isHitEOF;  i  <  isDirectory();  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  isDirectory();  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  isDirectory();  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  isDirectory();  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
49	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
50	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
51	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  1;	  return    isDirectory()?    Integer.MIN_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
52	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  entrySize;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  entrySize;	  return    isDirectory()?    Integer.MIN_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
53	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE  +  entryOffset;	  return    isDirectory()?    Integer.MIN_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
54	[BUG]  [BUGGY]  return  hasHitEOF?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  hasHitEOF?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  hasHitEOF?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;	  return    isDirectory()?    Integer.MIN_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
55	[BUG]  [BUGGY]  return  getDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  getDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  getDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;	  return    isDirectory()?    Integer.MIN_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  return  (int)(blockSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(blockSize  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(blockSize  -  entrySize);	  return    (int)(entrySize    -    blockSize);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
57	[BUG]  [BUGGY]  return  (int)(entrySize  *  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  *  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  *  entryOffset  +  1);	  return    (int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  return  (int)(entrySize  /  blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  /  blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  /  blockSize  +  1);	  return    (int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  return  (int)(entrySize  /  entryOffset  +  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  /  entryOffset  +  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  /  entryOffset  +  2);	  return    (int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
60	[BUG]  [BUGGY]  return  (int)(entryOffset  /  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entryOffset  /  entrySize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entryOffset  /  entrySize  +  1);	  return    (int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
61	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES,  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_NAMES,  entrySize);	  return    isEnabled(Feature.QUOTE_FIELD_NAMES);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
62	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES));	  return    isEnabled(Feature.QUOTE_FIELD_NAMES);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
63	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES,  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_NAMES,  entryOffset);	  return    isEnabled(Feature.QUOTE_FIELD_NAMES);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
64	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_NAMES);	  return    isEnabled(Feature.QUOTE_FIELD_NAMES);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
65	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES,  true);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES,  true);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_NAMES,  true);	  return    isEnabled(Feature.QUOTE_FIELD_NAMES);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
66	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES  |  encoding);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES  |  encoding);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_NAMES  |  encoding);	  return    isEnabled(Feature.QUOTE_FIELD_NAMES);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
67	[BUG]  [BUGGY]  return  (int)(entrySize  -  blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  -  blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  -  blockSize  +  1);	  return    (int)(blockSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
68	[BUG]  [BUGGY]  return  (long)(entrySize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (long)(entrySize  -  entryOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (long)(entrySize  -  entryOffset  +  1);	  return    (int)(blockSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
69	[BUG]  [BUGGY]  return  (int)(entryOffset  -  blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entryOffset  -  blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entryOffset  -  blockSize  +  1);	  return    (int)(blockSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
70	[BUG]  [BUGGY]  return  (int)(entrySize  *  recordSize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  *  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  *  recordSize);	  return    (int)(entrySize    /    recordSize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  return  (int)(blockSize  /  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(blockSize  /  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(blockSize  /  entryOffset);	  return    (int)(entrySize    /    recordSize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
72	[BUG]  [BUGGY]  return  isDirectory()?  getInputStream()  :  Integer.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  getInputStream()  :  Integer.MIN_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  getInputStream()  :  Integer.MIN_VALUE;	  return    isDirectory()?    getInputStream()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
73	[BUG]  [BUGGY]  return  isDirectory()?  getInputStream(entrySize):  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  getInputStream(entrySize):  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  getInputStream(entrySize):  Integer.MAX_VALUE;	  return    isDirectory()?    getInputStream()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
74	[BUG]  [BUGGY]  return  isDirectory()?  getInputStream()  :  Integer.MAX_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  getInputStream()  :  Integer.MAX_VALUE  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  getInputStream()  :  Integer.MAX_VALUE  +  1;	  return    isDirectory()?    getInputStream()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
75	[BUG]  [BUGGY]  return  isDirectory()?  getRecordSize()  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  getRecordSize()  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  getRecordSize()  :  Integer.MAX_VALUE;	  return    isDirectory()?    getInputStream()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
76	[BUG]  [BUGGY]  return  isDirectory()?  getInputStream()  :  Integer.MAX_VALUE  +  entrySize;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  getInputStream()  :  Integer.MAX_VALUE  +  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  getInputStream()  :  Integer.MAX_VALUE  +  entrySize;	  return    isDirectory()?    getInputStream()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
77	[BUG]  [BUGGY]  return  isDirectory()?  getInputStream()  +  entrySize  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  getInputStream()  +  entrySize  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  getInputStream()  +  entrySize  :  Integer.MAX_VALUE;	  return    isDirectory()?    getInputStream()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
78	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(currEntry,  entrySize.getValue());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(currEntry,  entrySize.getValue());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(currEntry,  entrySize.getValue());	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
79	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(entrySize,  entryOffset,  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(entrySize,  entryOffset,  currEntry.getValue());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(entrySize,  entryOffset,  currEntry.getValue());	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
80	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(entryOffset,  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(entryOffset,  currEntry.getValue());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(entryOffset,  currEntry.getValue());	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
81	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(currEntry.getKey(),  entrySize);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(currEntry.getKey(),  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(currEntry.getKey(),  entrySize);	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
82	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(currEntry.getValue(),  entrySize);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(currEntry.getValue(),  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(currEntry.getValue(),  entrySize);	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
83	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(entrySize,  currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(entrySize,  currEntry.getKey());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(entrySize,  currEntry.getKey());	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
84	[BUG]  [BUGGY]  getGlobalPaxHeaders().put(entrySize,  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().put(entrySize,  currEntry.getValue());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().put(entrySize,  currEntry.getValue());	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
85	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  1);	  return(int)(entrySize    -    entryOffset    +    1)+    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
86	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  2);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)+  2);	  return(int)(entrySize    -    entryOffset    +    1)+    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
87	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)*  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)*  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)*  1);	  return(int)(entrySize    -    entryOffset    +    1)+    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
88	[BUG]  [BUGGY]  return(long)(entrySize  -  entryOffset  +  1)+  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  -  entryOffset  +  1)+  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(long)(entrySize  -  entryOffset  +  1)+  1);	  return(int)(entrySize    -    entryOffset    +    1)+    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
89	[BUG]  [BUGGY]  return(int)(entryOffset  -  entrySize  +  1)+  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  -  entrySize  +  1)+  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entryOffset  -  entrySize  +  1)+  1);	  return(int)(entrySize    -    entryOffset    +    1)+    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
90	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  2)+  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  2)+  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  2)+  1);	  return(int)(entrySize    -    entryOffset    +    1)+    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
91	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE  +  1;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
92	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE  +  entrySize;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE  +  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE  +  entrySize;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
93	[BUG]  [BUGGY]  return  hasHitEOF?  Integer.MAX_VALUE  :  Integer.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  hasHitEOF?  Integer.MAX_VALUE  :  Integer.MIN_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  hasHitEOF?  Integer.MAX_VALUE  :  Integer.MIN_VALUE;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
94	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE  +  entryOffset;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE  +  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE  +  entryOffset;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MIN_VALUE;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
95	[BUG]  [BUGGY]  return(int)(entrySize  *  blockSize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  *  blockSize);	  return    (int)(entrySize    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
98	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  size;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  size;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  size;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entryOffset;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
103	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  2;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)+  2;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
104	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  1L;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  1L;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)+  1L;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
105	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  2)+  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  2)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  2)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
106	[BUG]  [BUGGY]  return(long)(entrySize  -  entryOffset  +  1)+  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  -  entryOffset  +  1)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(long)(entrySize  -  entryOffset  +  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
107	[BUG]  [BUGGY]  return(int)(entryOffset  -  entrySize  +  1)+  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entryOffset  -  entrySize  +  1)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entryOffset  -  entrySize  +  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
108	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset,  hasHitEOF);	  return(int)(entrySize    -    blockOffset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
109	[BUG]  [BUGGY]  return(int)(entrySize  /  blockOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  blockOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  /  blockOffset);	  return(int)(entrySize    -    blockOffset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
113	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  this.entrySize;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
114	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  size;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  size;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  size;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
115	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry  ==  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
117	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  entryOffset  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  entryOffset  +  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  entryOffset  +  1;	  return    isDirectory()?    Integer.MAX_VALUE    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
118	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  0,  entrySize;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  0,  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  0,  entrySize;	  return    isDirectory()?    Integer.MAX_VALUE    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
119	[BUG]  [BUGGY]  return  (int)(entryOffset  -  fileSize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entryOffset  -  fileSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entryOffset  -  fileSize);	  return    (int)(entrySize    -    fileSize);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
120	[BUG]  [BUGGY]  return  (int)(entrySize  *  fileSize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  *  fileSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  *  fileSize);	  return    (int)(entrySize    -    fileSize);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
121	[BUG]  [BUGGY]  int  entrySize  =(int)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entrySize  =(int)(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	int  entrySize  =(int)(entrySize  -  entryOffset);	  return    (long)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
122	[BUG]  [BUGGY]  return  (long)(entrySize  -  entryOffset,  blockSize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (long)(entrySize  -  entryOffset,  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (long)(entrySize  -  entryOffset,  blockSize);	  return    (long)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
123	[BUG]  [BUGGY]  return  (int)(blockSize  /  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(blockSize  /  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(blockSize  /  entrySize);	  return    (int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
124	[BUG]  [BUGGY]  return  (int)(entryOffset  /  blockSize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entryOffset  /  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entryOffset  /  blockSize);	  return    (int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
125	[BUG]  [BUGGY]  return(int)(entrySize  *  entryOffset  +  1)+  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  entryOffset  +  1)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  *  entryOffset  +  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
126	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  *  1)+  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  *  1)+  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  *  1)+  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
127	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  4;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  4;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)+  4;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
128	[BUG]  [BUGGY]  return  (int)(blockSize  /  recordSize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(blockSize  /  recordSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(blockSize  /  recordSize);	  return    (int)(entrySize    /    recordSize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
129	[BUG]  [BUGGY]  return  (int)(recordSize  /  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(recordSize  /  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(recordSize  /  entrySize);	  return    (int)(entrySize    /    recordSize);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
130	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  +  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  +  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  +  Integer.MAX_VALUE  :  Integer.MAX_VALUE;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
131	[BUG]  [BUGGY]  return  getDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  getDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  getDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
132	[BUG]  [BUGGY]  return  (int)(recordSize  *  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(recordSize  *  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(recordSize  *  entryOffset);	  return    (int)(entrySize    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
133	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  +  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  +  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MIN_VALUE  +  Integer.MAX_VALUE  :  Integer.MAX_VALUE;	  return    isDirectory()?    Integer.MIN_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
134	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  0;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  0;	  return    isDirectory()?    Integer.MAX_VALUE    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
135	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  +  entrySize  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  +  entrySize  :  entryOffset;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  +  entrySize  :  entryOffset;	  return    isDirectory()?    Integer.MAX_VALUE    :    entrySize;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
138	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
139	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  isDirectory();  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  isDirectory();  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  isDirectory();  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.get	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
143	[BUG]  [BUGGY]  int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
144	[BUG]  [BUGGY]  int  hasHitEOF  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  hasHitEOF  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	int  hasHitEOF  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0,  isEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  isEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  isHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
147	[BUG]  [BUGGY]  return  hasHitEOF?  Integer.MAX_VALUE  :  entrySize;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  hasHitEOF?  Integer.MAX_VALUE  :  entrySize;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  hasHitEOF?  Integer.MAX_VALUE  :  entrySize;	  return    isDirectory()?    Integer.MAX_VALUE    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
148	[BUG]  [BUGGY]  return  (int)(entrySize  -  blockOffset  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  -  blockOffset  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  -  blockOffset  +  1);	  return    (int)(blockSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
149	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  2  +  4;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  2  +  4;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  2  +  4;	  return(int)(entrySize    -    entryOffset    +    1)/    2;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
150	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  8;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  8;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  8;	  return(int)(entrySize    -    entryOffset    +    1)/    2;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
151	[BUG]  [BUGGY]  return  isDirectory()?  getOutputStream()  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  getOutputStream()  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  getOutputStream()  :  Integer.MAX_VALUE;	  return    isDirectory()?    getInputStream()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
152	[BUG]  [BUGGY]  return(int)(recordSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(recordSize  -  entrySize);	  return    (int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
153	[BUG]  [BUGGY]  return(int)(currEntry.available()  -  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(currEntry.available()  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(currEntry.available()  -  entrySize);	  return    (int)(entrySize    -    recordSize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
155	[BUG]  [BUGGY]  int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
156	[BUG]  [BUGGY]  int  hasHitEOF  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  hasHitEOF  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	int  hasHitEOF  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  0,  isEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  isEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  isHitEOF;  i  <  isHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
159	[BUG]  [BUGGY]  return  (int)(fileSize  -  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(fileSize  -  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(fileSize  -  entrySize);	  return    (int)(entrySize    -    fileSize);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
160	[BUG]  [BUGGY]  return(int)(recordSize  /  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  /  SMALL_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(recordSize  /  SMALL_BUFFER_SIZE);	  return(int)(entrySize    /    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
161	[BUG]  [BUGGY]  return  (long)(entrySize  -  entryOffset  +  Integer.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (long)(entrySize  -  entryOffset  +  Integer.MAX_VALUE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (long)(entrySize  -  entryOffset  +  Integer.MAX_VALUE);	  return    (long)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
162	[BUG]  [BUGGY]  return  (long)(entrySize  -  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (long)(entrySize  -  entryOffset,  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (long)(entrySize  -  entryOffset,  hasHitEOF);	  return    (long)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
163	[BUG]  [BUGGY]  return  (byte)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (byte)(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (byte)(entrySize  -  entryOffset);	  return    (long)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
164	[BUG]  [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	if(entrySize  >  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
165	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  return  Integer.MAX_VALUE;  }	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
166	[BUG]  [BUGGY]  int  entrySize  =  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  entrySize  =  SMALL_BUFFER_SIZE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	int  entrySize  =  SMALL_BUFFER_SIZE;	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
167	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ".length);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ".length);  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ".length);  }	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
168	[BUG]  [BUGGY]  return(int)(entrySize  *  entryOffset  +  1)+  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  *  entryOffset  +  1)+  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  *  entryOffset  +  1)+  1);	  return(int)(entrySize    -    entryOffset    +    1)+    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
169	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  *  1)+  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  *  1)+  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  *  1)+  1);	  return(int)(entrySize    -    entryOffset    +    1)+    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
170	[BUG]  [BUGGY]  return  (int)(entrySize  -  entryOffset  *  2);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  -  entryOffset  *  2);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  -  entryOffset  *  2);	  return    (int)(entrySize    -    entryOffset    +    2);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
171	[BUG]  [BUGGY]  return  (int)(entrySize  /  recordSize  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  /  recordSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  /  recordSize  +  1);	  return    (int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
172	[BUG]  [BUGGY]  return  (int)(entrySize  /  length  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  /  length  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  /  length  +  1);	  return    (int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
173	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_SIZE);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_SIZE);	  return    isEnabled(Feature.QUOTE_FIELD_NAMES);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
174	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES,  available);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES,  available);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_NAMES,  available);	  return    isEnabled(Feature.QUOTE_FIELD_NAMES);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
175	[BUG]  [BUGGY]  return(long)(entrySize  -  blockOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(long)(entrySize  -  blockOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(long)(entrySize  -  blockOffset);	  return(int)(entrySize    -    blockOffset);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
176	[BUG]  [BUGGY]  return  (int)(blockSize  *  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(blockSize  *  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(blockSize  *  entrySize);	  return    (int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
177	[BUG]  [BUGGY]  return(int)(recordSize  /  blockSize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(recordSize  /  blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(recordSize  /  blockSize);	  return    (int)(entrySize    /    blockSize);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
178	[BUG]  [BUGGY]  if(entrySize  >  recordSize)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  recordSize)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	if(entrySize  >  recordSize)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
179	[BUG]  [BUGGY]  if(entrySize  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	if(entrySize  >  MAX_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
180	[BUG]  [BUGGY]  if(entrySize  >  MAX_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  if(entrySize  >  MAX_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	if(entrySize  >  MAX_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  len  =  hasHitEOF;  i  <  len;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  0;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
184	[BUG]  [BUGGY]  int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0,  isEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  isEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
186	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
187	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(currEntry,  entrySize);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(currEntry,  entrySize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(currEntry,  entrySize);	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
188	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(encoding,  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(encoding,  currEntry.getValue());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(encoding,  currEntry.getValue());	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
189	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(blockSize,  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(blockSize,  currEntry.getValue());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(blockSize,  currEntry.getValue());	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
190	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.DEFAULT_VALUE;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.DEFAULT_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  Integer.DEFAULT_VALUE;	  return    isDirectory()?    Integer.MAX_VALUE    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
191	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)*  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)*  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)*  1;	  return(int)(entrySize    -    entryOffset    +    1)+    1;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
192	[BUG]  [BUGGY]  int  return  (int)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  int  return  (int)(entrySize  -  entryOffset);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	int  return  (int)(entrySize  -  entryOffset);	  return    (long)(entrySize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.available();    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEnt  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEnt  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEnt	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    isDirectory();    if(currEntry.getValue()    ==    null)    {    return    currEntry.getValu    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
197	[BUG]  [BUGGY]  return  (int)(entrySize  /  this.blockSize  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  /  this.blockSize  +  1);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  /  this.blockSize  +  1);	  return    (int)(entrySize    /    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
198	[BUG]  [BUGGY]  return  hasHitEOF?  getInputStream()  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  hasHitEOF?  getInputStream()  :  Integer.MAX_VALUE;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  hasHitEOF?  getInputStream()  :  Integer.MAX_VALUE;	  return    isDirectory()?    getInputStream()    :    Integer.MAX_VALUE;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
199	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF);	  return    isEnabled(Feature.QUOTE_FIELD_NAMES);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
200	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_SIZE));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_SIZE));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  isEnabled(Feature.QUOTE_FIELD_SIZE));	  return    isEnabled(Feature.QUOTE_FIELD_NAMES);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
201	[BUG]  [BUGGY]  return  (int)(entrySize  *  RecordSize.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  *  RecordSize.MAX_VALUE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  *  RecordSize.MAX_VALUE);	  return    (int)(entrySize    *    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  isHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
203	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  entries.length;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.length;    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
205	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	throw  new  IllegalArgumentException( " ");	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
206	[BUG]  [BUGGY]  long  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	long  entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
207	[BUG]  [BUGGY]  return(entrySize  <  SMALL_BUFFER_SIZE)?  0  :  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(entrySize  <  SMALL_BUFFER_SIZE)?  0  :  1;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(entrySize  <  SMALL_BUFFER_SIZE)?  0  :  1;	  if(entrySize    <    SMALL_BUFFER_SIZE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
208	[BUG]  [BUGGY]  long  entrySize  =  entryOffset  >  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entrySize  =  entryOffset  >  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	long  entrySize  =  entryOffset  >  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
209	[BUG]  [BUGGY]  long  entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	long  entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
210	[BUG]  [BUGGY]  long  entryOffset  >  entrySize)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  long  entryOffset  >  entrySize)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	long  entryOffset  >  entrySize)  {  throw  new  IllegalArgumentException( " ");  }	  if(entrySize    >    entryOffset)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
211	[BUG]  [BUGGY]  return  (int)(entrySize  /  this.blockSize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  (int)(entrySize  /  this.blockSize);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  /  this.blockSize);	  return    (int)(recordSize    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
212	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(currEntry,  entrySize  -  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(currEntry,  entrySize  -  currEntry.getValue());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(currEntry,  entrySize  -  currEntry.getValue());	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
213	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(entry,  currEntry.getKey());  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  getGlobalPaxHeaders().add(entry,  currEntry.getKey());  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(entry,  currEntry.getKey());	  getGlobalPaxHeaders().add(entrySize,    currEntry.getValue());    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
214	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1));  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  +  1));  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1));	  return    (int)(blockSize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
215	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  int;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  int;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  int;	  return    isDirectory()?    Integer.MAX_VALUE    :    entryOffset;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
216	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  *  2)/  2;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  -  entryOffset  *  2)/  2;  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  *  2)/  2;	  return(int)(entrySize    -    entryOffset    +    1)/    2;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
217	[BUG]  [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE  *  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE  *  SMALL_BUFFER_SIZE);  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  /  SMALL_BUFFER_SIZE  *  SMALL_BUFFER_SIZE);	  return(int)(entrySize    /    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.get  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.get  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.get	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  isHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  isHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValu	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
221	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getVal  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }      [BUGGY]  for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getVal  [BUGGY]      }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF  =  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getVal	  for(int    i    =    0,    hasHitEOF;    i    <    hasHitEOF;    i++)    {    TarArchiveEntry    currEntry    =    getCurrentEntry();    if(currEntry!=    null)    {    return    currEntry.getValue();    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
