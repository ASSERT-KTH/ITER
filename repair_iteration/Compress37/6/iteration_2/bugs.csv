bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  (int)(entrySize  -  entryOffset  +  2);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(entrySize  -  entryOffset  +  2);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  -  entryOffset  +  2);	  return    (int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
2	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  1);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  1);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)+  1);	  return    (int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
3	[BUG]  [BUGGY]  return  (int)(entrySize  /  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(entrySize  /  entryOffset  +  1);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  /  entryOffset  +  1);	  return    (int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
4	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MIN_VALUE  :  Integer.MAX_VALUE;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
5	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MIN_VALUE;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
6	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  Integer.MAX_VALUE;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
7	[BUG]  [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	if(entrySize  <  SMALL_BUFFER_SIZE)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
8	[BUG]  [BUGGY]  if(entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  if(entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	if(entrySize  >  entryOffset)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
9	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  entryOffset;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  entryOffset;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  entryOffset;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
10	[BUG]  [BUGGY]  getGlobalPaxHeaders().add(entrySize,  currEntry.getValue());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  getGlobalPaxHeaders().add(entrySize,  currEntry.getValue());  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	getGlobalPaxHeaders().add(entrySize,  currEntry.getValue());	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
11	[BUG]  [BUGGY]  return  (int)(entrySize  *  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(entrySize  *  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  *  entryOffset);	  return    (int)(entrySize    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  return  (int)(entrySize  /  blockSize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(entrySize  /  blockSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  /  blockSize);	  return    (int)(entrySize    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  return  (int)(entrySize  /  recordSize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(entrySize  /  recordSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  /  recordSize);	  return    (int)(entrySize    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  return  (int)(entrySize  -  recordSize);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(entrySize  -  recordSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  -  recordSize);	  return    (int)(recordSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
15	[BUG]  [BUGGY]  return  (int)(entrySize  -  fileSize);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(entrySize  -  fileSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  -  fileSize);	  return    (int)(recordSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
16	[BUG]  [BUGGY]  return  (long)(entrySize  -  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (long)(entrySize  -  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (long)(entrySize  -  entryOffset);	  return    (int)(recordSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
17	[BUG]  [BUGGY]  return  (int)(entrySize  -  blockSize);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(entrySize  -  blockSize);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(entrySize  -  blockSize);	  return    (int)(blockSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
18	[BUG]  [BUGGY]  return(int)(entrySize  -  blockOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  -  blockOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  blockOffset);	  return    (int)(blockSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
19	[BUG]  [BUGGY]  return  (int)(recordSize  /  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(recordSize  /  entryOffset);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(recordSize  /  entryOffset);	  return    (int)(entrySize    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.length;  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.available();  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  getCurrentEntry();  if(currEntry!=  null)  {  return  currEntry.getValue();  }	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.getValu  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.getValu  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	for(int  i  =  0,  hasHitEOF;  i  <  hasHitEOF;  i++)  {  TarArchiveEntry  currEntry  =  isDirectory();  if(currEntry.getValue()  ==  null)  {  return  currEntry.getValu	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
24	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  1;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)+  1;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)+  1;	  return    (int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
25	[BUG]  [BUGGY]  return  (int)(blockSize  -  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  (int)(blockSize  -  entryOffset  +  1);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  (int)(blockSize  -  entryOffset  +  1);	  return    (int)(blockSize    -    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
26	[BUG]  [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  /  SMALL_BUFFER_SIZE);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  /  SMALL_BUFFER_SIZE);	  return    (int)(entrySize    /    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isEnabled(Feature.QUOTE_FIELD_NAMES);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
28	[BUG]  [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  entrySize;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  isDirectory()?  Integer.MAX_VALUE  :  entrySize;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  Integer.MAX_VALUE  :  entrySize;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
29	[BUG]  [BUGGY]  return  isDirectory()?  getInputStream()  :  Integer.MAX_VALUE;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return  isDirectory()?  getInputStream()  :  Integer.MAX_VALUE;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return  isDirectory()?  getInputStream()  :  Integer.MAX_VALUE;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  2;  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {  if  (isDirectory())  {  return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }    [BUGGY]  return(int)(entrySize  -  entryOffset  +  1)/  2;  [BUGGY]    }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	190	190	1	replace	return(int)(entrySize  -  entryOffset  +  1)/  2;	  return    (int)(entrySize    -    entryOffset    +    1);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
