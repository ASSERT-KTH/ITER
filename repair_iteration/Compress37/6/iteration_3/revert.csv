projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(recordSize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(blockSize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/entryOffset+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MIN_VALUE:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.MIN_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize<SMALL_BUFFER_SIZE){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize>entryOffset){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(entrySize,currEntry.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize*entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/blockSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-fileSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(long)(entrySize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-blockSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-blockOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(recordSize/entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry.getValu
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(blockSize-entryOffset+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/SMALL_BUFFER_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?getInputStream():Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MIN_VALUE:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnhasHitEOF?Integer.MAX_VALUE:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MIN_VALUE:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:entrySize+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:0,entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<length;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<entries.length;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<size;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<this.entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValu
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<this.entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValu
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.MAX_VALUE+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.MAX_VALUE+entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnhasHitEOF?Integer.MAX_VALUE:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.MAX_VALUE+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/fileSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entryOffset/recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/2+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/4;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/2*Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/3;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/2*Integer.MIN_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize<entryOffset){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190while(entrySize>entryOffset){thrownewIllegalArgumentException("");
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190while(entrySize>entryOffset){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize>=entryOffset){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190while(entrySize<entryOffset){thrownewIllegalArgumentException("");
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190allowRecordSize(entryOffset){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190||entrySize<SMALL_BUFFER_SIZE){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190||(entrySize<SMALL_BUFFER_SIZE&&entryOffset>SMALL_BUFFER_SIZE)){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190while(entrySize<SMALL_BUFFER_SIZE){thrownewIllegalArgumentException("");
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190||(entrySize<SMALL_BUFFER_SIZE&&entryOffset<SMALL_BUFFER_SIZE)){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190while(entrySize<SMALL_BUFFER_SIZE){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190||(entrySize<SMALL_BUFFER_SIZE&&entryOffset>SMALL_BUFFER_SIZE))thrownewIllegalArgumentException("");
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entryOffset-recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize*SMALL_BUFFER_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entryOffset/SMALL_BUFFER_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(blockSize/SMALL_BUFFER_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/SMALL_BUFFER_SIZE+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/SMALL_BUFFER_SIZE+entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,len=hasHitEOF;i<len;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry.get
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,isHitEOF;i<isDirectory();i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry.get
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<this.entrySize;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry.get
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<entrySize;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry.get
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<isDirectory();i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry.get
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<length;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry.get
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,len=hasHitEOF;i<len;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry.
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MIN_VALUE:Integer.MAX_VALUE+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MIN_VALUE:Integer.MAX_VALUE+entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MIN_VALUE:Integer.MAX_VALUE+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnhasHitEOF?Integer.MIN_VALUE:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returngetDirectory()?Integer.MIN_VALUE:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(blockSize-entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize*entryOffset+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/blockSize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/entryOffset+2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entryOffset/entrySize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES||isEnabled(Feature.QUOTE_FIELD_NAMES));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES,entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES||isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES,true);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES|encoding);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-blockSize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(long)(entrySize-entryOffset+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entryOffset-blockSize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize*recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(blockSize/entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?getInputStream():Integer.MIN_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?getInputStream(entrySize):Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?getInputStream():Integer.MAX_VALUE+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?getRecordSize():Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?getInputStream():Integer.MAX_VALUE+entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?getInputStream()+entrySize:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(currEntry,entrySize.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(entrySize,entryOffset,currEntry.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(entryOffset,currEntry.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(currEntry.getKey(),entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(currEntry.getValue(),entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(entrySize,currEntry.getKey());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().put(entrySize,currEntry.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)+2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)*1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(long)(entrySize-entryOffset+1)+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entryOffset-entrySize+1)+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+2)+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.MIN_VALUE+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.MIN_VALUE+entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnhasHitEOF?Integer.MAX_VALUE:Integer.MIN_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.MIN_VALUE+entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize*blockSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,len=hasHitEOF;i<len;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<length;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<entries.length;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<size;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<this.entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<entryOffset;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)+2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)+1L;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+2)+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(long)(entrySize-entryOffset+1)+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entryOffset-entrySize+1)+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/blockOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,len=hasHitEOF;i<len;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<length;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<this.entrySize;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<size;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,len=hasHitEOF;i<len;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry==null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:entryOffset+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:0,entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entryOffset-fileSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize*fileSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190intentrySize=(int)(entrySize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(long)(entrySize-entryOffset,blockSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(blockSize/entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entryOffset/blockSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize*entryOffset+1)+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset*1)+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)+4;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(blockSize/recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(recordSize/entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE+Integer.MAX_VALUE:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returngetDirectory()?Integer.MAX_VALUE:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(recordSize*entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MIN_VALUE+Integer.MAX_VALUE:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:0;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE+entrySize:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,len=hasHitEOF;i<len;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=0;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,isHitEOF;i<isHitEOF;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<isDirectory();i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,isHitEOF;i<isHitEOF;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry.get
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=0;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190inthasHitEOF=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,isEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,isHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnhasHitEOF?Integer.MAX_VALUE:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-blockOffset+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/2+4;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/8;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?getOutputStream():Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(recordSize-entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(currEntry.available()-entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=0;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190inthasHitEOF=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,isEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,isHitEOF;i<isHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(fileSize-entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(recordSize/SMALL_BUFFER_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(long)(entrySize-entryOffset+Integer.MAX_VALUE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(long)(entrySize-entryOffset,hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(byte)(entrySize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize>SMALL_BUFFER_SIZE){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize<SMALL_BUFFER_SIZE){returnInteger.MAX_VALUE;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190intentrySize=SMALL_BUFFER_SIZE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize<SMALL_BUFFER_SIZE){thrownewIllegalArgumentException("".length);}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize*entryOffset+1)+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset*1)+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset*2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/recordSize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/length+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES,available);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(long)(entrySize-blockOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(blockSize*entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(recordSize/blockSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize>recordSize){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize>MAX_VALUE){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize>MAX_BUFFER_SIZE){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,len=hasHitEOF;i<len;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=0;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValu
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=0;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValu
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,isEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValu
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(currEntry,entrySize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(encoding,currEntry.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(blockSize,currEntry.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.DEFAULT_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)*1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190intreturn(int)(entrySize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEnt
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/this.blockSize+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnhasHitEOF?getInputStream():Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES||hasHitEOF);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES||isEnabled(Feature.QUOTE_FIELD_SIZE));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize*RecordSize.MAX_VALUE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,isHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<entries.length;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190thrownewIllegalArgumentException("");
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190longentrySize<SMALL_BUFFER_SIZE){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(entrySize<SMALL_BUFFER_SIZE)?0:1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190longentrySize=entryOffset>SMALL_BUFFER_SIZE){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190longentrySize>entryOffset){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190longentryOffset>entrySize){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/this.blockSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(currEntry,entrySize-currEntry.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(entry,currEntry.getKey());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1));
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:int;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset*2)/2;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/SMALL_BUFFER_SIZE*SMALL_BUFFER_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.get
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,isHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValu
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF=hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getVal
