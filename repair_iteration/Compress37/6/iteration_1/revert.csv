projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(recordSize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(blockSize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+2);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/entryOffset+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MIN_VALUE:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.MIN_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize<SMALL_BUFFER_SIZE){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190if(entrySize>entryOffset){thrownewIllegalArgumentException("");}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:entryOffset;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190getGlobalPaxHeaders().add(entrySize,currEntry.getValue());
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize*entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/blockSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-recordSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-fileSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(long)(entrySize-entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-blockSize);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-blockOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(recordSize/entryOffset);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.length;}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.available();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=getCurrentEntry();if(currEntry!=null){returncurrEntry.getValue();}
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190for(inti=0,hasHitEOF;i<hasHitEOF;i++){TarArchiveEntrycurrEntry=isDirectory();if(currEntry.getValue()==null){returncurrEntry.getValu
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)+1;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(blockSize-entryOffset+1);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize/SMALL_BUFFER_SIZE);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?Integer.MAX_VALUE:entrySize;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190returnisDirectory()?getInputStream():Integer.MAX_VALUE;
projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java190return(int)(entrySize-entryOffset+1)/2;
