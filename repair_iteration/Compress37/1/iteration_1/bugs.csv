bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  headers.put(keyword,  restLen);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]    NegativeArraySizeException  [CONTEXT]  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [BUGGY]  headers.put(keyword,  restLen);  [BUGGY]  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException( "Failed  to  read   "  +   "Paxheader.  Expected   "  +  restLen  +   "  bytes,  read   "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen);	headers.remove(keyword);  	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	1	None	replace
2	[BUG]  [BUGGY]  headers.put(keyword,  coll);  [CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;  [FE]      NegativeArraySizeException  [CONTEXT]  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [BUGGY]  headers.put(keyword,  coll);  [BUGGY]  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException( "Failed  to  read   "  +   "Paxheader.  Expected   "  +  restLen  +   "  bytes,  read   "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll);	headers.remove(keyword);  	non-compiled	[CE]  method  put  in  interface  Map<K,V>  cannot  be  applied  to  given  types;	1	None	replace
3	[BUG]  [BUGGY]  headers.put(keyword,  i);  [CE]  <identifier>  expected  [FE]        NegativeArraySizeException  [CONTEXT]  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [BUGGY]  headers.put(keyword,  i);  [BUGGY]  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException( "Failed  to  read   "  +   "Paxheader.  Expected   "  +  restLen  +   "  bytes,  read   "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i);	headers.remove(keyword);  	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  headers.add(keyword);  [CE]  <identifier>  expected  [FE]          NegativeArraySizeException  [CONTEXT]  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [BUGGY]  headers.add(keyword);  [BUGGY]  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException( "Failed  to  read   "  +   "Paxheader.  Expected   "  +  restLen  +   "  bytes,  read   "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword);	headers.remove(keyword);  	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  headers.put(keyword,  read);  [CE]  <identifier>  expected  [FE]            NegativeArraySizeException  [CONTEXT]  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [BUGGY]  headers.put(keyword,  read);  [BUGGY]  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException( "Failed  to  read   "  +   "Paxheader.  Expected   "  +  restLen  +   "  bytes,  read   "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  read);	headers.remove(keyword);  	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  headers.put(keyword,  result);  [CE]  <identifier>  expected  [FE]              NegativeArraySizeException  [CONTEXT]  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [BUGGY]  headers.put(keyword,  result);  [BUGGY]  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException( "Failed  to  read   "  +   "Paxheader.  Expected   "  +  restLen  +   "  bytes,  read   "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  result);	headers.remove(keyword);  	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  headers.put(keyword,  null);  [CE]  <identifier>  expected  [FE]                NegativeArraySizeException  [CONTEXT]  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [BUGGY]  headers.put(keyword,  null);  [BUGGY]  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException( "Failed  to  read   "  +   "Paxheader.  Expected   "  +  restLen  +   "  bytes,  read   "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  null);	headers.remove(keyword);  	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]    [CE]  <identifier>  expected  [FE]                  NegativeArraySizeException  [CONTEXT]  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  [BUGGY]    [BUGGY]  }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException( "Failed  to  read   "  +   "Paxheader.  Expected   "  +  restLen  +   "  bytes,  read   "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	  	headers.remove(keyword);  	non-compiled	[CE]  <identifier>  expected	1	None	replace
