bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword,  restLen);  [CE]  illegal  start  of  expression  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(keyword,  restLen);	  final    int    hasHitEOF    =    coll.hasHitEOF(keyword);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
2	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(ch);  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(ch);	  final    int    hasHitEOF    =    coll.hasHitEOF(keyword);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
3	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(hashCode);  [CE]  illegal  start  of  expression  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(hashCode);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(hashCode);	  final    int    hasHitEOF    =    coll.hasHitEOF(keyword);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
4	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword)-  1;  [CE]  illegal  start  of  expression  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword)-  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(keyword)-  1;	  final    int    hasHitEOF    =    coll.hasHitEOF(keyword);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
5	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword  +  1);  [CE]  ';'  expected  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(keyword  +  1);	  final    int    hasHitEOF    =    coll.hasHitEOF(keyword);    	non-compiled	[CE]  ';'  expected	39	None	replace
6	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(hashCode,  keyword);  [CE]  illegal  start  of  expression  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(hashCode,  keyword);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(hashCode,  keyword);	  final    int    hasHitEOF    =    coll.hasHitEOF(keyword);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
7	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remainingLen));  [CE]  ';'  expected  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(remainingLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remainingLen));	  headers.put(keyword,    new    String(len));    	non-compiled	[CE]  ';'  expected	42	None	replace
8	[BUG]  [BUGGY]  headers.put(keyword,  new  String(restLen));  [CE]  illegal  start  of  expression  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(restLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(restLen));	  headers.put(keyword,    new    String(len));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
9	[BUG]  [BUGGY]  headers.put(keyword,  new  String(ch));  [CE]  illegal  start  of  expression  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(ch));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(ch));	  headers.put(keyword,    new    String(len));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
10	[BUG]  [BUGGY]  headers.put(keyword,  new  String(len  +  1));  [CE]  illegal  start  of  expression  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(len  +  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(len  +  1));	  headers.put(keyword,    new    String(len));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
11	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remaining));  [CE]  illegal  start  of  expression  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(remaining));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remaining));	  headers.put(keyword,    new    String(len));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
12	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remainder));  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(remainder));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remainder));	  headers.put(keyword,    new    String(len));    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
13	[BUG]  [BUGGY]  headers.put(keyword,  i,  restLen);  [CE]  illegal  start  of  expression  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  restLen);	  headers.put(keyword,    restLen,    i);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
14	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  0);  [CE]  illegal  start  of  expression  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  0);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  0);	  headers.put(keyword,    restLen,    i);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
15	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  1);  [CE]  illegal  start  of  expression  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  1);	  headers.put(keyword,    restLen,    i);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
16	[BUG]  [BUGGY]  headers.put(keyword,  read,  i);  [CE]  illegal  start  of  expression  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  read,  i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  read,  i);	  headers.put(keyword,    restLen,    i);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
17	[BUG]  [BUGGY]  final  int  numRecords  =  coll.size()  -  1;  [CE]  illegal  start  of  expression  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.size()  -  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.size()  -  1;	  final    int    numRecords    =    coll.size();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
18	[BUG]  [BUGGY]  final  int  numRecords  =  coll.size()  +  1;  [CE]  illegal  start  of  expression  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.size()  +  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.size()  +  1;	  final    int    numRecords    =    coll.size();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
19	[BUG]  [BUGGY]  final  int  numRecords  =  coll.size()  -  2;  [CE]  illegal  start  of  expression  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.size()  -  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.size()  -  2;	  final    int    numRecords    =    coll.size();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
20	[BUG]  [BUGGY]  final  int  numRecords  =  coll.size()  *  2;  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.size()  *  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.size()  *  2;	  final    int    numRecords    =    coll.size();    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
21	[BUG]  [BUGGY]  final  int  numRecords  =  coll.size()  +  2;  [CE]  ';'  expected  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.size()  +  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.size()  +  2;	  final    int    numRecords    =    coll.size();    	non-compiled	[CE]  ';'  expected	16	None	replace
22	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  1;  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [CE]  ';'  expected  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  1;  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  1;  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  ';'  expected	49	None	replace
23	[BUG]  [BUGGY]  if(ch  ==  ';')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [CE]  ';'  expected  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  ';')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  ';')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  ';'  expected	49	None	replace
24	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  1)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  1)  {  throw  new  IOException( " ");  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  1)  {  throw  new  IOException( " ");  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
25	[BUG]  [BUGGY]  if(ch  ==  ':')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  ':')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  ':')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
26	[BUG]  [BUGGY]  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
27	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  2;  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  2;  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  2;  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
28	[BUG]  [BUGGY]  if(ch  ==  ';')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read  [CE]  illegal  start  of  expression  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  ';')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  ';')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "Paxheader.    Expected   "    +    keyword    +   "    bytes,    read   "    +    restLen);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
29	[BUG]  [BUGGY]  if(ch  ==  ';')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read   "  +  restLen);  }  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  ';')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read   "  +  restLen);  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  ';')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read   "  +  restLen);  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "Paxheader.    Expected   "    +    keyword    +   "    bytes,    read   "    +    restLen);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
30	[BUG]  [BUGGY]  if(ch  ==  ':')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read   "  +  restLen);  }  [CE]  illegal  start  of  expression  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  ':')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read   "  +  restLen);  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  ':')  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read   "  +  restLen);  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "Paxheader.    Expected   "    +    keyword    +   "    bytes,    read   "    +    restLen);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
31	[BUG]  [BUGGY]  headers.add(keyword,  restLen  +  1);  [CE]  illegal  start  of  expression  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  restLen  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen  +  1);	  headers.add(keyword,    restLen);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
32	[BUG]  [BUGGY]  headers.add(keyword,  restLen,  hasHitEOF);  [CE]  not  a  statement  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  restLen,  hasHitEOF);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen,  hasHitEOF);	  headers.add(keyword,    restLen);    	non-compiled	[CE]  not  a  statement	10	None	replace
33	[BUG]  [BUGGY]  headers.add(keyword,  restLen,  SMALL_BUFFER_SIZE);  [CE]  not  a  statement  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  restLen,  SMALL_BUFFER_SIZE);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen,  SMALL_BUFFER_SIZE);	  headers.add(keyword,    restLen);    	non-compiled	[CE]  not  a  statement	10	None	replace
34	[BUG]  [BUGGY]  headers.add(keyword,  restLen  -  1);  [CE]  not  a  statement  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  restLen  -  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen  -  1);	  headers.add(keyword,    restLen);    	non-compiled	[CE]  not  a  statement	10	None	replace
35	[BUG]  [BUGGY]  headers.add(keyword,  restLen,  ch);  [CE]  not  a  statement  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  restLen,  ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen,  ch);	  headers.add(keyword,    restLen);    	non-compiled	[CE]  not  a  statement	10	None	replace
36	[BUG]  [BUGGY]  headers.put(keyword,  read,  restLen);  [CE]  not  a  statement  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  read,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  read,  restLen);	  headers.put(keyword,    restLen,    len);    	non-compiled	[CE]  not  a  statement	7	None	replace
37	[BUG]  [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CE]  not  a  statement  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  coll.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString();    	non-compiled	[CE]  not  a  statement	37	None	replace
38	[BUG]  [BUGGY]  final  String  keyword  =  coll.toString();  [CE]  not  a  statement  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  coll.toString();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  coll.toString();	  final    String    keyword    =    keyword.toString();    	non-compiled	[CE]  not  a  statement	37	None	replace
39	[BUG]  [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+  1;  [CE]  not  a  statement  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+  1;	  final    String    keyword    =    keyword.toString();    	non-compiled	[CE]  not  a  statement	37	None	replace
40	[BUG]  [BUGGY]  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8)+  1;  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8)+  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  keyword.toString(CharsetNames.UTF_8)+  1;	  final    String    keyword    =    keyword.toString();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
41	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  IOUtils.readFully(ch),  coll);  [CE]  illegal  start  of  expression  [FE]            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  IOUtils.readFully(ch),  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  IOUtils.readFully(ch),  coll);	  headers.put(keyword,    restLen,    IOUtils.readFully(ch));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
42	[BUG]  [BUGGY]  headers.put(keyword,  read,  IOUtils.readFully(ch));  [CE]  illegal  start  of  expression  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  read,  IOUtils.readFully(ch));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  read,  IOUtils.readFully(ch));	  headers.put(keyword,    restLen,    IOUtils.readFully(ch));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
43	[BUG]  [BUGGY]  headers.put(keyword,  i,  IOUtils.readFully(ch));  [CE]  illegal  start  of  expression  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  IOUtils.readFully(ch));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  IOUtils.readFully(ch));	  headers.put(keyword,    restLen,    IOUtils.readFully(ch));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
44	[BUG]  [BUGGY]  headers.put(keyword,  ch,  IOUtils.readFully(restLen));  [CE]  illegal  start  of  expression  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  ch,  IOUtils.readFully(restLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  ch,  IOUtils.readFully(restLen));	  headers.put(keyword,    restLen,    IOUtils.readFully(ch));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
45	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  IOUtils.readFully(ch),  i);  [CE]  illegal  start  of  expression  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  IOUtils.readFully(ch),  i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  IOUtils.readFully(ch),  i);	  headers.put(keyword,    restLen,    IOUtils.readFully(ch));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
46	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  IOUtils.readFully(ch),  0);  [CE]  illegal  start  of  expression  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  IOUtils.readFully(ch),  0);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  IOUtils.readFully(ch),  0);	  headers.put(keyword,    restLen,    IOUtils.readFully(ch));    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
47	[BUG]  [BUGGY]  final  int  len  =  coll.readInt();  [CE]  illegal  start  of  expression  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  coll.readInt();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  coll.readInt();	  final    int    len    =    i.readInt();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
48	[BUG]  [BUGGY]  final  int  len  =  IOUtils.readInt(i,  restLen);  [CE]  illegal  start  of  expression  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  IOUtils.readInt(i,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  IOUtils.readInt(i,  restLen);	  final    int    len    =    i.readInt();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
49	[BUG]  [BUGGY]  final  int  len  =  IOUtils.readInt(i);  [CE]  illegal  start  of  expression  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  IOUtils.readInt(i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  IOUtils.readInt(i);	  final    int    len    =    i.readInt();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
50	[BUG]  [BUGGY]  final  int  len  =  IOUtils.readLong(i,  restLen);  [CE]  illegal  start  of  expression  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  IOUtils.readLong(i,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  IOUtils.readLong(i,  restLen);	  final    int    len    =    i.readInt();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
51	[BUG]  [BUGGY]  final  int  len  =  i.readInt()  +  1;  [CE]  illegal  start  of  expression  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  i.readInt()  +  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  i.readInt()  +  1;	  final    int    len    =    i.readInt();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
52	[BUG]  [BUGGY]  final  int  len  =  IOUtils.readInt();  [CE]  illegal  start  of  expression  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  IOUtils.readInt();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  IOUtils.readInt();	  final    int    len    =    i.readInt();    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
53	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  read  +  1);  [CE]  illegal  start  of  expression  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  read  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  read  +  1);	  headers.put(keyword,    restLen,    read);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  headers.put(keyword,  i,  read);  [CE]  illegal  start  of  expression  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  read);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  read);	  headers.put(keyword,    restLen,    read);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  headers.put(keyword,  coll.toString(),  restLen);  [CE]  illegal  start  of  expression  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll.toString(),  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll.toString(),  restLen);	  headers.put(keyword,    coll.toString());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
56	[BUG]  [BUGGY]  headers.put(keyword,  coll.toString()  +  1);  [CE]  illegal  start  of  expression  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll.toString()  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll.toString()  +  1);	  headers.put(keyword,    coll.toString());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
57	[BUG]  [BUGGY]  headers.put(keyword,  coll.toByteArray());  [CE]  illegal  start  of  expression  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll.toByteArray());  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll.toByteArray());	  headers.put(keyword,    coll.toString());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
58	[BUG]  [BUGGY]  headers.put(keyword,  coll.toString(ch));  [CE]  ';'  expected  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll.toString(ch));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll.toString(ch));	  headers.put(keyword,    coll.toString());    	non-compiled	[CE]  ';'  expected	27	None	replace
59	[BUG]  [BUGGY]  headers.put(keyword,  coll.toLowerCase());  [CE]  ';'  expected  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll.toLowerCase());  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll.toLowerCase());	  headers.put(keyword,    coll.toString());    	non-compiled	[CE]  ';'  expected	27	None	replace
60	[BUG]  [BUGGY]  headers.put(keyword,  col.toString());  [CE]  illegal  start  of  expression  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  col.toString());  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  col.toString());	  headers.put(keyword,    coll.toString());    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
61	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hashCode();  [CE]  illegal  start  of  expression  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hashCode();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hashCode();	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
62	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()  ||  restLen  >  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  expression  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()  ||  restLen  >  SMALL_BUFFER_SIZE;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF()  ||  restLen  >  SMALL_BUFFER_SIZE;	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
63	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.length();  [CE]  illegal  start  of  expression  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.length();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.length();	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
64	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.getHitEOF();  [CE]  illegal  start  of  expression  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.getHitEOF();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.getHitEOF();	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
65	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()?  1  :  0;  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()?  1  :  0;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF()?  1  :  0;	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
66	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()  &&  restLen  >  0;  [CE]  illegal  start  of  expression  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()  &&  restLen  >  0;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF()  &&  restLen  >  0;	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
67	[BUG]  [BUGGY]  headers.add(keyword,  ch);  [CE]  illegal  start  of  expression  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  ch);	  headers.add(keyword,    read);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
68	[BUG]  [BUGGY]  headers.add(keyword,  coll);  [CE]  illegal  start  of  expression  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  coll);	  headers.add(keyword,    read);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
69	[BUG]  [BUGGY]  headers.add(currEntry,  keyword);  [CE]  illegal  start  of  expression  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry,  keyword);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry,  keyword);	  headers.add(keyword,    read);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
70	[BUG]  [BUGGY]  headers.put(keyword,  i,  SMALL_BUFFER_SIZE);  [CE]  ';'  expected  [FE]            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  SMALL_BUFFER_SIZE);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  SMALL_BUFFER_SIZE);	  headers.put(keyword,    restLen,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  ';'  expected	3	None	replace
71	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  SMALL_BUFFER_SIZE  +  1);  [CE]  unclosed  string  literal  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  SMALL_BUFFER_SIZE  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  SMALL_BUFFER_SIZE  +  1);	  headers.put(keyword,    restLen,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  unclosed  string  literal	3	None	replace
72	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  SMALL_BUFFER_SIZE,  ch);  [CE]  illegal  start  of  expression  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  SMALL_BUFFER_SIZE,  ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  SMALL_BUFFER_SIZE,  ch);	  headers.put(keyword,    restLen,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
73	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remainderLen  +  1));  [CE]  illegal  start  of  expression  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(remainderLen  +  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remainderLen  +  1));	  headers.put(keyword,    new    String(remainderLen));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
74	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remainderLen  -  1));  [CE]  <identifier>  expected  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(remainderLen  -  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remainderLen  -  1));	  headers.put(keyword,    new    String(remainderLen));    	non-compiled	[CE]  <identifier>  expected	34	None	replace
75	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remainderLen),  ch);  [CE]  illegal  start  of  expression  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(remainderLen),  ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remainderLen),  ch);	  headers.put(keyword,    new    String(remainderLen));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
76	[BUG]  [BUGGY]  headers.put(keyword,  new  String(restLen  +  1));  [CE]  illegal  start  of  expression  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(restLen  +  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(restLen  +  1));	  headers.put(keyword,    new    String(remainderLen));    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
77	[BUG]  [BUGGY]  final  int  markLimit  =  coll.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.length()  -  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.length()  -  1;	  final    int    markLimit    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
78	[BUG]  [BUGGY]  final  int  markLimit  =  coll.length()  +  1;  [CE]  illegal  start  of  expression  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.length()  +  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.length()  +  1;	  final    int    markLimit    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
79	[BUG]  [BUGGY]  final  int  markLimit  =  coll.length()  -  restLen;  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.length()  -  restLen;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.length()  -  restLen;	  final    int    markLimit    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
80	[BUG]  [BUGGY]  final  int  markLimit  =  coll.length()  -  2;  [CE]  ';'  expected  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.length()  -  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.length()  -  2;	  final    int    markLimit    =    coll.length();    	non-compiled	[CE]  ';'  expected	17	None	replace
81	[BUG]  [BUGGY]  final  int  markLimit  =  coll.length()  +  restLen;  [CE]  ';'  expected  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.length()  +  restLen;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.length()  +  restLen;	  final    int    markLimit    =    coll.length();    	non-compiled	[CE]  ';'  expected	17	None	replace
82	[BUG]  [BUGGY]  final  int  markLimit  =  coll.length()  +  2;  [CE]  illegal  start  of  expression  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.length()  +  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.length()  +  2;	  final    int    markLimit    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
83	[BUG]  [BUGGY]  final  int  len  =  coll.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  coll.length()  -  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  coll.length()  -  1;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
84	[BUG]  [BUGGY]  final  int  len  =  coll.length()  +  1;  [CE]  illegal  start  of  expression  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  coll.length()  +  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  coll.length()  +  1;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
85	[BUG]  [BUGGY]  final  int  len  =  coll.length()  -  2;  [CE]  illegal  start  of  expression  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  coll.length()  -  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  coll.length()  -  2;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
86	[BUG]  [BUGGY]  final  int  len  =  coll.length()  *  2;  [CE]  illegal  start  of  expression  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  coll.length()  *  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  coll.length()  *  2;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
87	[BUG]  [BUGGY]  final  int  len  =  coll.length()  -  restLen;  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  coll.length()  -  restLen;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  coll.length()  -  restLen;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
88	[BUG]  [BUGGY]  final  int  len  =  coll.length()  +  2;  [CE]  illegal  start  of  expression  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  coll.length()  +  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  coll.length()  +  2;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
89	[BUG]  [BUGGY]  headers.add(keyword,  restLen,  restLen);  [CE]  illegal  start  of  expression  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  restLen,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen,  restLen);	  headers.add(keyword,    remainderLen);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
90	[BUG]  [BUGGY]  headers.add(keyword,  restLen,  remainderLen);  [CE]  illegal  start  of  expression  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  restLen,  remainderLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen,  remainderLen);	  headers.add(keyword,    remainderLen);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
91	[BUG]  [BUGGY]  headers.add(keyword,  remainderLen,  restLen);  [CE]  illegal  start  of  expression  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  remainderLen,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  remainderLen,  restLen);	  headers.add(keyword,    remainderLen);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
92	[BUG]  [BUGGY]  headers.add(keyword,  restLen  -  restLen);  [CE]  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  restLen  -  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen  -  restLen);	  headers.add(keyword,    remainderLen);    	non-compiled	[CE]  	12	None	replace
93	[BUG]  [BUGGY]  headers.add(currEntry,  keyword,  restLen);  [CE]  illegal  start  of  expression  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry,  keyword,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry,  keyword,  restLen);	  headers.add(keyword,    remainderLen);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
94	[BUG]  [BUGGY]  headers.put(keyword,  coll,  0);  [CE]  illegal  start  of  expression  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll,  0);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll,  0);	  headers.put(keyword,    coll,    i);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
95	[BUG]  [BUGGY]  headers.put(keyword,  coll,  1);  [CE]  illegal  start  of  expression  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll,  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll,  1);	  headers.put(keyword,    coll,    i);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
96	[BUG]  [BUGGY]  headers.put(keyword,  coll,  read);  [CE]  illegal  start  of  expression  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll,  read);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll,  read);	  headers.put(keyword,    coll,    i);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
97	[BUG]  [BUGGY]  headers.add(currEntry.getKeyword(),  restLen);  [CE]  illegal  start  of  expression  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.getKeyword(),  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.getKeyword(),  restLen);	  headers.add(currEntry.getKeyword());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
98	[BUG]  [BUGGY]  headers.add(currEntry.getKeyword(),  remainderLen);  [CE]  illegal  start  of  expression  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.getKeyword(),  remainderLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.getKeyword(),  remainderLen);	  headers.add(currEntry.getKeyword());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
99	[BUG]  [BUGGY]  headers.add(currEntry.getValue());  [CE]  illegal  start  of  expression  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.getValue());  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.getValue());	  headers.add(currEntry.getKeyword());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
100	[BUG]  [BUGGY]  headers.add(currEntry.getKeyword(),  read);  [CE]  illegal  start  of  expression  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.getKeyword(),  read);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.getKeyword(),  read);	  headers.add(currEntry.getKeyword());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
101	[BUG]  [BUGGY]  headers.add(currEntry.getKeyword(),  coll);  [CE]  illegal  start  of  expression  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.getKeyword(),  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.getKeyword(),  coll);	  headers.add(currEntry.getKeyword());    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
102	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(0));  [CE]  illegal  start  of  expression  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigInteger(0));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(0));	  headers.put(keyword,    new    BigInteger(remainderLen));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
103	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(remainderLen  +  1));  [CE]  illegal  start  of  expression  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigInteger(remainderLen  +  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(remainderLen  +  1));	  headers.put(keyword,    new    BigInteger(remainderLen));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
104	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(restLen));  [CE]  ';'  expected  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigDecimal(restLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(restLen));	  headers.put(keyword,    new    BigInteger(remainderLen));    	non-compiled	[CE]  ';'  expected	43	None	replace
105	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(remainderLen  -  1));  [CE]  illegal  start  of  expression  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigInteger(remainderLen  -  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(remainderLen  -  1));	  headers.put(keyword,    new    BigInteger(remainderLen));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
106	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(restLen  +  1));  [CE]  illegal  start  of  expression  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigInteger(restLen  +  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(restLen  +  1));	  headers.put(keyword,    new    BigInteger(remainderLen));    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
107	[BUG]  [BUGGY]  headers.put(keyword,  restLen;  [CE]  illegal  start  of  expression  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen;	  headers.put(keyword,    coll;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
108	[BUG]  [BUGGY]  headers.put(keyword,  ch,  restLen);  [CE]  illegal  start  of  expression  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  ch,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  ch,  restLen);	  headers.put(keyword,    restLen,    ch);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
109	[BUG]  [BUGGY]  headers.put(keyword,  i,  ch);  [CE]  ';'  expected  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  ch);	  headers.put(keyword,    restLen,    ch);    	non-compiled	[CE]  ';'  expected	5	None	replace
110	[BUG]  [BUGGY]  headers.put(keyword,  read,  ch);  [CE]  ';'  expected  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  read,  ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  read,  ch);	  headers.put(keyword,    restLen,    ch);    	non-compiled	[CE]  ';'  expected	5	None	replace
111	[BUG]  [BUGGY]  headers.put(keyword,  read,  coll);  [CE]  ';'  expected  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  read,  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  read,  coll);	  headers.put(keyword,    i,    coll);    	non-compiled	[CE]  ';'  expected	26	None	replace
112	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readFully(ch),  coll);  [CE]  ';'  expected  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  IOUtils.readFully(ch),  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readFully(ch),  coll);	  headers.put(keyword,    i,    coll);    	non-compiled	[CE]  ';'  expected	26	None	replace
113	[BUG]  [BUGGY]  headers.put(keyword,  ch,  coll);  [CE]  ';'  expected  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  ch,  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  ch,  coll);	  headers.put(keyword,    i,    coll);    	non-compiled	[CE]  ';'  expected	26	None	replace
114	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  length);  [CE]  ';'  expected  [FE]            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  length);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  length);	  headers.put(keyword,    restLen,    hasHitEOF);    	non-compiled	[CE]  ';'  expected	32	None	replace
115	[BUG]  [BUGGY]  headers.put(keyword,  i,  result);  [CE]  ';'  expected  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  result);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  result);	  headers.put(keyword,    restLen,    result);    	non-compiled	[CE]  ';'  expected	8	None	replace
116	[BUG]  [BUGGY]  if(ch  ==  ';')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  [CE]  ';'  expected  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  ';')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  ';')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  ';'  expected	46	None	replace
117	[BUG]  [BUGGY]  final  String  keyword  =  col.toString(CharsetNames.UTF_8);  [CE]  ';'  expected  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  col.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  col.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  ';'  expected	46	None	replace
118	[BUG]  [BUGGY]  if(ch  ==  '.')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  [CE]  ';'  expected  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  '.')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  '.')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  ';'  expected	46	None	replace
119	[BUG]  [BUGGY]  if(ch  ==  ':')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  [CE]  ';'  expected  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  ':')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  ':')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  ';'  expected	46	None	replace
120	[BUG]  [BUGGY]  final  String  keyword  =  str.toString(CharsetNames.UTF_8);  [CE]  ';'  expected  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  str.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  str.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  ';'  expected	46	None	replace
121	[BUG]  [BUGGY]  headers.put(keyword,  resultLen  +  1);  [CE]  ';'  expected  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  resultLen  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  resultLen  +  1);	  headers.put(keyword,    resultLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
122	[BUG]  [BUGGY]  headers.put(keyword,  resultLen  -  restLen);  [CE]  ';'  expected  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  resultLen  -  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  resultLen  -  restLen);	  headers.put(keyword,    resultLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
123	[BUG]  [BUGGY]  headers.put(keyword,  resultLen  -  1);  [CE]  ';'  expected  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  resultLen  -  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  resultLen  -  1);	  headers.put(keyword,    resultLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
124	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(ch));  [CE]  ';'  expected  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigInteger(ch));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(ch));	  headers.put(keyword,    ch);    	non-compiled	[CE]  ';'  expected	30	None	replace
125	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(ch));  [CE]  ';'  expected  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigDecimal(ch));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(ch));	  headers.put(keyword,    ch);    	non-compiled	[CE]  ';'  expected	30	None	replace
126	[BUG]  [BUGGY]  headers.put(keyword,  data);  [CE]  ';'  expected  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  data);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  data);	  headers.put(keyword,    content);    	non-compiled	[CE]  ';'  expected	35	None	replace
127	[BUG]  [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ "  - "  +  keyword.toString(CharsetNames.UTF_8);  [CE]  ';'  expected  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ "  - "  +  keyword.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ "  - "  +  keyword.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8)+   "    -   "    +    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  ';'  expected	47	None	replace
128	[BUG]  [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ ".  - "  +  keyword.toString(CharsetNames.UTF_8);  [CE]  ';'  expected  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ ".  - "  +  keyword.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ ".  - "  +  keyword.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8)+   "    -   "    +    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  ';'  expected	47	None	replace
129	[BUG]  [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ ",  - "  +  keyword.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ ",  - "  +  keyword.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ ",  - "  +  keyword.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8)+   "    -   "    +    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
130	[BUG]  [BUGGY]  final  String  keyword  =  col.toString(CharsetNames.UTF_8)+ "  - "  +  keyword.toString(CharsetNames.UTF_8);  [CE]  ';'  expected  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  col.toString(CharsetNames.UTF_8)+ "  - "  +  keyword.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  col.toString(CharsetNames.UTF_8)+ "  - "  +  keyword.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8)+   "    -   "    +    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  ';'  expected	47	None	replace
131	[BUG]  [BUGGY]  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ "  - "  +  keyword.toString(CharsetNames.UTF_8);  [CE]  ';'  expected  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ "  - "  +  keyword.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	String  keyword  =  coll.toString(CharsetNames.UTF_8)+ "  - "  +  keyword.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8)+   "    -   "    +    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  ';'  expected	47	None	replace
132	[BUG]  [BUGGY]  headers.add(currEntry.keyword,  restLen);  [CE]  ';'  expected  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.keyword,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.keyword,  restLen);	  headers.add(currEntry.keyword);    	non-compiled	[CE]  ';'  expected	31	None	replace
133	[BUG]  [BUGGY]  headers.add(currEntry.keyword,  read);  [CE]  illegal  start  of  expression  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.keyword,  read);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.keyword,  read);	  headers.add(currEntry.keyword);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
134	[BUG]  [BUGGY]  headers.add(currEntry.keyword,  ch);  [CE]  illegal  start  of  expression  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.keyword,  ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.keyword,  ch);	  headers.add(currEntry.keyword);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
135	[BUG]  [BUGGY]  headers.add(currEntry.keyword,  remainderLen);  [CE]  illegal  start  of  expression  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.keyword,  remainderLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.keyword,  remainderLen);	  headers.add(currEntry.keyword);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
136	[BUG]  [BUGGY]  final  TarArchiveEntry  currEntry  =  currEntry.getKeyword();  [CE]  ';'  expected  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  TarArchiveEntry  currEntry  =  currEntry.getKeyword();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  TarArchiveEntry  currEntry  =  currEntry.getKeyword();	  headers.add(currEntry.keyword);    	non-compiled	[CE]  ';'  expected	31	None	replace
137	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i);  [CE]  ';'  expected  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	InputStream  coll  =  IOUtils.readInputStream(i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  ';'  expected	18	None	replace
138	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i,  restLen);  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  InputStream  coll  =  IOUtils.readInputStream(i,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	InputStream  coll  =  IOUtils.readInputStream(i,  restLen);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
139	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream(ch);  [CE]  illegal  start  of  expression  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  InputStream  coll  =  i.readInputStream(ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	InputStream  coll  =  i.readInputStream(ch);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
140	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  restLen);  [CE]  illegal  start  of  expression  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	InputStream  coll  =  IOUtils.readFully(i,  restLen);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
141	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i);  [CE]  illegal  start  of  expression  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i,  i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	InputStream  coll  =  IOUtils.readFully(i,  i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
142	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream(remainderLen);  [CE]  illegal  start  of  expression  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  InputStream  coll  =  i.readInputStream(remainderLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	InputStream  coll  =  i.readInputStream(remainderLen);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
143	[BUG]  [BUGGY]  final  int  len  =  coll.read();  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  coll.read();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  coll.read();	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
144	[BUG]  [BUGGY]  final  int  len  =  IOUtils.readFully(i,  restLen);  [CE]  illegal  start  of  expression  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  IOUtils.readFully(i,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  IOUtils.readFully(i,  restLen);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
145	[BUG]  [BUGGY]  final  int  len  =  i.read(remainderLen);  [CE]  illegal  start  of  expression  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  i.read(remainderLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  i.read(remainderLen);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
146	[BUG]  [BUGGY]  final  int  len  =  i.read(remainingLen);  [CE]  illegal  start  of  expression  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  i.read(remainingLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  i.read(remainingLen);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
147	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(remainingLen));  [CE]  illegal  start  of  expression  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigInteger(remainingLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(remainingLen));	  headers.put(keyword,    new    BigInteger(restLen));    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
148	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(restLen),  0);  [CE]  not  a  statement  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigInteger(restLen),  0);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(restLen),  0);	  headers.put(keyword,    new    BigInteger(restLen));    	non-compiled	[CE]  not  a  statement	22	None	replace
149	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.size()  >  1;  [CE]  not  a  statement  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.size()  >  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.size()  >  1;	  final    int    hasHitEOF    =    coll.size()    >    0;    	non-compiled	[CE]  not  a  statement	40	None	replace
150	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.size();  [CE]  illegal  start  of  expression  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.size();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.size();	  final    int    hasHitEOF    =    coll.size()    >    0;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
151	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.size()  <  1;  [CE]  illegal  start  of  expression  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.size()  <  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.size()  <  1;	  final    int    hasHitEOF    =    coll.size()    >    0;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
152	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.size()  {  0;  [CE]  illegal  start  of  expression  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.size()  {  0;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.size()  {  0;	  final    int    hasHitEOF    =    coll.size()    >    0;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
153	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.size()  <  2;  [CE]  illegal  start  of  expression  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.size()  <  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.size()  <  2;	  final    int    hasHitEOF    =    coll.size()    >    0;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
154	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.size()  >  2;  [CE]  illegal  start  of  expression  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.size()  >  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.size()  >  2;	  final    int    hasHitEOF    =    coll.size()    >    0;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
155	[BUG]  [BUGGY]  final  int  numRecords  =  coll.length()  -  1;  [CE]  illegal  start  of  expression  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.length()  -  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.length()  -  1;	  final    int    numRecords    =    coll.length();    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
156	[BUG]  [BUGGY]  final  int  numRecords  =  coll.length()  +  1;  [CE]  not  a  statement  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.length()  +  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.length()  +  1;	  final    int    numRecords    =    coll.length();    	non-compiled	[CE]  not  a  statement	21	None	replace
157	[BUG]  [BUGGY]  final  int  numRecords  =  coll.length()  *  2;  [CE]  not  a  statement  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.length()  *  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.length()  *  2;	  final    int    numRecords    =    coll.length();    	non-compiled	[CE]  not  a  statement	21	None	replace
158	[BUG]  [BUGGY]  final  int  numRecords  =  coll.length()  -  2;  [CE]  not  a  statement  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.length()  -  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.length()  -  2;	  final    int    numRecords    =    coll.length();    	non-compiled	[CE]  not  a  statement	21	None	replace
159	[BUG]  [BUGGY]  final  int  numRecords  =  coll.length()  +  2;  [CE]  not  a  statement  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.length()  +  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.length()  +  2;	  final    int    numRecords    =    coll.length();    	non-compiled	[CE]  not  a  statement	21	None	replace
160	[BUG]  [BUGGY]  final  int  numRecords  =  coll.length()  -  restLen;  [CE]  not  a  statement  [FE]                                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.length()  -  restLen;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.length()  -  restLen;	  final    int    numRecords    =    coll.length();    	non-compiled	[CE]  not  a  statement	21	None	replace
161	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readInt(restLen));  [CE]  not  a  statement  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  IOUtils.readInt(restLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readInt(restLen));	  headers.put(keyword,    IOUtils.readLong(restLen));    	non-compiled	[CE]  not  a  statement	24	None	replace
162	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readLong(remainderLen));  [CE]  not  a  statement  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  IOUtils.readLong(remainderLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readLong(remainderLen));	  headers.put(keyword,    IOUtils.readLong(restLen));    	non-compiled	[CE]  not  a  statement	24	None	replace
163	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readFully(restLen));  [CE]  not  a  statement  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  IOUtils.readFully(restLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readFully(restLen));	  headers.put(keyword,    IOUtils.readLong(restLen));    	non-compiled	[CE]  not  a  statement	24	None	replace
164	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readLong(restLen),  coll);  [CE]  not  a  statement  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  IOUtils.readLong(restLen),  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readLong(restLen),  coll);	  headers.put(keyword,    IOUtils.readLong(restLen));    	non-compiled	[CE]  not  a  statement	24	None	replace
165	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readByte(restLen));  [CE]  not  a  statement  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  IOUtils.readByte(restLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readByte(restLen));	  headers.put(keyword,    IOUtils.readLong(restLen));    	non-compiled	[CE]  not  a  statement	24	None	replace
166	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readLong(remainder));  [CE]  not  a  statement  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  IOUtils.readLong(remainder));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readLong(remainder));	  headers.put(keyword,    IOUtils.readLong(restLen));    	non-compiled	[CE]  not  a  statement	24	None	replace
167	[BUG]  [BUGGY]  headers.put(keyword,  coll,  restLen  +  1);  [CE]  not  a  statement  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll,  restLen  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll,  restLen  +  1);	  headers.put(keyword,    coll,    restLen);    	non-compiled	[CE]  not  a  statement	25	None	replace
168	[BUG]  [BUGGY]  headers.put(keyword,  coll,  restLen  -  1);  [CE]  not  a  statement  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll,  restLen  -  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll,  restLen  -  1);	  headers.put(keyword,    coll,    restLen);    	non-compiled	[CE]  not  a  statement	25	None	replace
169	[BUG]  [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE  +  1);  [CE]  not  a  statement  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  SMALL_BUFFER_SIZE  +  1);	  headers.put(keyword,    new    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  not  a  statement	23	None	replace
170	[BUG]  [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  restLen);  [CE]  not  a  statement  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  SMALL_BUFFER_SIZE,  restLen);	  headers.put(keyword,    new    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  not  a  statement	23	None	replace
171	[BUG]  [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  read);  [CE]  not  a  statement  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  read);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  SMALL_BUFFER_SIZE,  read);	  headers.put(keyword,    new    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  not  a  statement	23	None	replace
172	[BUG]  [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  len);  [CE]  not  a  statement  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  len);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  SMALL_BUFFER_SIZE,  len);	  headers.put(keyword,    new    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  not  a  statement	23	None	replace
173	[BUG]  [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  remainingLen);  [CE]  not  a  statement  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  remainingLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  SMALL_BUFFER_SIZE,  remainingLen);	  headers.put(keyword,    new    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  not  a  statement	23	None	replace
174	[BUG]  [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  1);  [CE]  not  a  statement  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  SMALL_BUFFER_SIZE,  1);	  headers.put(keyword,    new    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  not  a  statement	23	None	replace
175	[BUG]  [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  ch);  [CE]  not  a  statement  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE,  ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  SMALL_BUFFER_SIZE,  ch);	  headers.put(keyword,    new    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  not  a  statement	23	None	replace
176	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  1;  [CE]  not  a  statement  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  1;	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  not  a  statement	45	None	replace
177	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  2;  [CE]  not  a  statement  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  2;	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  not  a  statement	45	None	replace
178	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.US_ASCII);  [CE]  <identifier>  expected  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.US_ASCII);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.US_ASCII);	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
179	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)-  1;  [CE]  <identifier>  expected  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)-  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)-  1;	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
180	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(charsetNames.UTF_8)+  1;  [CE]  <identifier>  expected  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(charsetNames.UTF_8)+  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(charsetNames.UTF_8)+  1;	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
181	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_6);  [CE]  <identifier>  expected  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_6);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_6);	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
182	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen  +  1));  [CE]  <identifier>  expected  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen  +  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(remainderLen  +  1));	  headers.put(keyword,    new    BigDecimal(remainderLen));    	non-compiled	[CE]  <identifier>  expected	44	None	replace
183	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen  -  1));  [CE]  <identifier>  expected  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen  -  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(remainderLen  -  1));	  headers.put(keyword,    new    BigDecimal(remainderLen));    	non-compiled	[CE]  <identifier>  expected	44	None	replace
184	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(restLen  +  1));  [CE]  <identifier>  expected  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigDecimal(restLen  +  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(restLen  +  1));	  headers.put(keyword,    new    BigDecimal(remainderLen));    	non-compiled	[CE]  <identifier>  expected	44	None	replace
185	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(restLen  -  1));  [CE]  <identifier>  expected  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigDecimal(restLen  -  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(restLen  -  1));	  headers.put(keyword,    new    BigDecimal(remainderLen));    	non-compiled	[CE]  <identifier>  expected	44	None	replace
186	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen),  0);  [CE]  <identifier>  expected  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen),  0);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(remainderLen),  0);	  headers.put(keyword,    new    BigDecimal(remainderLen));    	non-compiled	[CE]  <identifier>  expected	44	None	replace
187	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  currEntry.getKey());  [CE]  <identifier>  expected  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  currEntry.getKey());  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  currEntry.getKey());	  headers.put(keyword,    restLen,    currEntry);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
188	[BUG]  [BUGGY]  headers.put(keyword,  i,  currEntry);  [CE]  <identifier>  expected  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  currEntry);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  currEntry);	  headers.put(keyword,    restLen,    currEntry);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
189	[BUG]  [BUGGY]  headers.put(keyword,  currEntry,  restLen);  [CE]  <identifier>  expected  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  currEntry,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  currEntry,  restLen);	  headers.put(keyword,    restLen,    currEntry);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
190	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  currEntry.getValue());  [CE]  <identifier>  expected  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  currEntry.getValue());  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  currEntry.getValue());	  headers.put(keyword,    restLen,    currEntry);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
191	[BUG]  [BUGGY]  headers.put(keyword,  restLen  +  1);  [CE]  <identifier>  expected  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen  +  1);	  headers.put(keyword,    remainderLen);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
192	[BUG]  [BUGGY]  Integer  i  =  coll.readInt()  +  1;  [CE]  <identifier>  expected  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  Integer  i  =  coll.readInt()  +  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	Integer  i  =  coll.readInt()  +  1;	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
193	[BUG]  [BUGGY]  final  Integer  i  =  coll.readInt();  [CE]  <identifier>  expected  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  Integer  i  =  coll.readInt();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  Integer  i  =  coll.readInt();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
194	[BUG]  [BUGGY]  Integer  i  =  coll.readInt()  *  2;  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  Integer  i  =  coll.readInt()  *  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	Integer  i  =  coll.readInt()  *  2;	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
195	[BUG]  [BUGGY]  Integer  i  =  coll.readUTF();  [CE]  <identifier>  expected  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  Integer  i  =  coll.readUTF();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	Integer  i  =  coll.readUTF();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
196	[BUG]  [BUGGY]  Integer  i  =  coll.readInt()  +  2;  [CE]  illegal  start  of  expression  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  Integer  i  =  coll.readInt()  +  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	Integer  i  =  coll.readInt()  +  2;	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
197	[BUG]  [BUGGY]  headers.add(keyword,  i,  restLen);  [CE]  <identifier>  expected  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  i,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  i,  restLen);	  headers.add(keyword,    i);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
198	[BUG]  [BUGGY]  headers.add(i,  keyword);  [CE]  <identifier>  expected  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(i,  keyword);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(i,  keyword);	  headers.add(keyword,    i);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
199	[BUG]  [BUGGY]  headers.add(currEntry,  keyword,  i);  [CE]  <identifier>  expected  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry,  keyword,  i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry,  keyword,  i);	  headers.add(keyword,    i);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
200	[BUG]  [BUGGY]  headers.put(keyword,  remainderLen  +  1);  [CE]  illegal  start  of  expression  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  remainderLen  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  remainderLen  +  1);	  headers.put(keyword,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
201	[BUG]  [BUGGY]  headers.put(i,  keyword  +  1);  [CE]  illegal  start  of  expression  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(i,  keyword  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(i,  keyword  +  1);	  headers.put(keyword,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
202	[BUG]  [BUGGY]  headers.put(keyword,  RestLen  +  1);  [CE]  illegal  start  of  expression  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  RestLen  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  RestLen  +  1);	  headers.put(keyword,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
203	[BUG]  [BUGGY]  headers.put(keyword,  remainingLen  +  1);  [CE]  illegal  start  of  expression  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  remainingLen  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  remainingLen  +  1);	  headers.put(keyword,    i    +    1);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
204	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.size()  >=  0;  [CE]  illegal  start  of  expression  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.size()  >=  0;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.size()  >=  0;	  final    int    hasHitEOF    =    coll.size()    >    0;    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
205	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.size()  ==  0;  [CE]  not  a  statement  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.size()  ==  0;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.size()  ==  0;	  final    int    hasHitEOF    =    coll.size()    >    0;    	non-compiled	[CE]  not  a  statement	40	None	replace
206	[BUG]  [BUGGY]  headers.add(keyword,  restLen  -  read);  [CE]  not  a  statement  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  restLen  -  read);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen  -  read);	  headers.add(keyword,    restLen);    	non-compiled	[CE]  not  a  statement	10	None	replace
207	[BUG]  [BUGGY]  headers.add(keyword,  restLen  +  2);  [CE]  illegal  start  of  expression  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(keyword,  restLen  +  2);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen  +  2);	  headers.add(keyword,    restLen);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
208	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remainderLen  +  2));  [CE]  not  a  statement  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(remainderLen  +  2));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remainderLen  +  2));	  headers.put(keyword,    new    String(remainderLen));    	non-compiled	[CE]  not  a  statement	34	None	replace
209	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remainderLen)+  1);  [CE]  not  a  statement  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(remainderLen)+  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remainderLen)+  1);	  headers.put(keyword,    new    String(remainderLen));    	non-compiled	[CE]  not  a  statement	34	None	replace
210	[BUG]  [BUGGY]  final  int  numRecords  =  coll.length()  +  restLen;  [CE]  not  a  statement  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.length()  +  restLen;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.length()  +  restLen;	  final    int    numRecords    =    coll.length();    	non-compiled	[CE]  not  a  statement	21	None	replace
211	[BUG]  [BUGGY]  headers.put(keyword,  key,  restLen);  [CE]  not  a  statement  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  key,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  key,  restLen);	  headers.put(keyword,    coll,    restLen);    	non-compiled	[CE]  not  a  statement	25	None	replace
212	[BUG]  [BUGGY]  final  int  numRecords  =  col.size();  [CE]  not  a  statement  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  col.size();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  col.size();	  final    int    numRecords    =    coll.size();    	non-compiled	[CE]  not  a  statement	16	None	replace
213	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readLong(restLen  +  1));  [CE]  not  a  statement  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  IOUtils.readLong(restLen  +  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readLong(restLen  +  1));	  headers.put(keyword,    IOUtils.readLong(restLen));    	non-compiled	[CE]  not  a  statement	24	None	replace
214	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readLong(restLen),  ch);  [CE]  not  a  statement  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  IOUtils.readLong(restLen),  ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readLong(restLen),  ch);	  headers.put(keyword,    IOUtils.readLong(restLen));    	non-compiled	[CE]  not  a  statement	24	None	replace
215	[BUG]  [BUGGY]  headers.put(keyword,  i;  [CE]  <identifier>  expected  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i;	  headers.put(keyword,    coll;    	non-compiled	[CE]  <identifier>  expected	51	None	replace
216	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(len);  [CE]  <identifier>  expected  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(len);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(len);	  final    int    hasHitEOF    =    coll.hasHitEOF(keyword);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
217	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword,  read);  [CE]  <identifier>  expected  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword,  read);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(keyword,  read);	  final    int    hasHitEOF    =    coll.hasHitEOF(keyword);    	non-compiled	[CE]  <identifier>  expected	39	None	replace
218	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(restLen  -  1));  [CE]  not  a  statement  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigInteger(restLen  -  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(restLen  -  1));	  headers.put(keyword,    new    BigInteger(restLen));    	non-compiled	[CE]  not  a  statement	22	None	replace
219	[BUG]  [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE  +  2);  [CE]  not  a  statement  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE  +  2);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  SMALL_BUFFER_SIZE  +  2);	  headers.put(keyword,    new    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  not  a  statement	23	None	replace
220	[BUG]  [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE  -  1);  [CE]  not  a  statement  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE  -  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  SMALL_BUFFER_SIZE  -  1);	  headers.put(keyword,    new    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  not  a  statement	23	None	replace
221	[BUG]  [BUGGY]  headers.put(keyword,  new  Integer(remainderLen));  [CE]  not  a  statement  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  Integer(remainderLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  Integer(remainderLen));	  headers.put(keyword,    new    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  not  a  statement	23	None	replace
222	[BUG]  [BUGGY]  headers.put(keyword,  0);  [CE]  not  a  statement  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  0);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  0);	  headers.put(keyword,    restLen,    coll);    	non-compiled	[CE]  not  a  statement	9	None	replace
223	[BUG]  [BUGGY]  headers.put(keyword,  ch,  currEntry);  [CE]  not  a  statement  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  ch,  currEntry);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  ch,  currEntry);	  headers.put(keyword,    restLen,    currEntry);    	non-compiled	[CE]  not  a  statement	33	None	replace
224	[BUG]  [BUGGY]  headers.put(keyword,  read,  currEntry);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  read,  currEntry);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  read,  currEntry);	  headers.put(keyword,    restLen,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
225	[BUG]  [BUGGY]  headers.put(keyword,  ch  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  ch  +  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  ch  +  1);	  headers.put(keyword,    ch);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
226	[BUG]  [BUGGY]  final  String  keyword  =  key.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  key.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  key.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
227	[BUG]  [BUGGY]  static  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  static  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	static  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
228	[BUG]  [BUGGY]  final  String  keyword  =  i.toString();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  i.toString();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  i.toString();	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
229	[BUG]  [BUGGY]  headers.put(keyword,  content  -  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  content  -  1);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  content  -  1);	  headers.put(keyword,    content);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
230	[BUG]  [BUGGY]  if(remainderLimit  ==  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(remainderLimit  ==  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(remainderLimit  ==  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "Paxheader.    Expected   "    +    keyword    +   "    bytes,    read   "    +    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
231	[BUG]  [BUGGY]  if(remainingLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(remainingLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(remainingLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "Paxheader.    Expected   "    +    keyword    +   "    bytes,    read   "    +    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
232	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  1;  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +   "  bytes,  read   "  +  restLen);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  1;  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +   "  bytes,  read   "  +  restLen);  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8)+  1;  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +   "  bytes,  read   "  +  restLen);  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "Paxheader.    Expected   "    +    keyword    +   "    bytes,    read   "    +    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
233	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString();	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
234	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_4);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_4);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_4);	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
235	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  2);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  restLen,  2);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  2);	  headers.put(keyword,    restLen,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
236	[BUG]  [BUGGY]  headers.put(keyword,  read,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  read,  hasHitEOF);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  read,  hasHitEOF);	  headers.put(keyword,    restLen,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
237	[BUG]  [BUGGY]  headers.put(keyword,  i  +  2);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i  +  2);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i  +  2);	  headers.put(keyword,    i    +    1);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
238	[BUG]  [BUGGY]  headers.add(currEntry.keyword,  key);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.keyword,  key);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.keyword,  key);	  headers.add(currEntry.keyword);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
239	[BUG]  [BUGGY]  headers.add(currEntry.keyword,  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.keyword,  len);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.keyword,  len);	  headers.add(currEntry.keyword);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
240	[BUG]  [BUGGY]  final  int  len  =  coll.length()  +  restLen;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  coll.length()  +  restLen;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  coll.length()  +  restLen;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
241	[BUG]  [BUGGY]  headers.put(keyword,  ch,  IOUtils.readFully(remainderLen));  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  ch,  IOUtils.readFully(remainderLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  ch,  IOUtils.readFully(remainderLen));	  headers.put(keyword,    restLen,    IOUtils.readFully(ch));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
242	[BUG]  [BUGGY]  final  int  len  =  IOUtils.readFully(i,  i);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  IOUtils.readFully(i,  i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  IOUtils.readFully(i,  i);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
243	[BUG]  [BUGGY]  final  int  len  =  IOUtils.read(i,  restLen);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  IOUtils.read(i,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  IOUtils.read(i,  restLen);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
244	[BUG]  [BUGGY]  final  int  len  =  IOUtils.readFully(i);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  IOUtils.readFully(i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  IOUtils.readFully(i);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
245	[BUG]  [BUGGY]  final  int  len  =  IOUtils.read(i);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  IOUtils.read(i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  IOUtils.read(i);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
246	[BUG]  [BUGGY]  headers.put(keyword,  coll.toString(CharsetNames.UTF_8));  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll.toString(CharsetNames.UTF_8));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll.toString(CharsetNames.UTF_8));	  headers.put(keyword,    coll.toString());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
247	[BUG]  [BUGGY]  headers.put(keyword,  i.toString());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i.toString());  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i.toString());	  headers.put(keyword,    coll.toString());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
248	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readFully(i);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  InputStream  coll  =  IOUtils.readFully(i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	InputStream  coll  =  IOUtils.readFully(i);	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
249	[BUG]  [BUGGY]  InputStream  coll  =  IOUtils.readInputStream();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  InputStream  coll  =  IOUtils.readInputStream();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	InputStream  coll  =  IOUtils.readInputStream();	  InputStream    coll    =    i.readInputStream();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
250	[BUG]  [BUGGY]  headers.put(keyword,  ch,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  ch,  SMALL_BUFFER_SIZE);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  ch,  SMALL_BUFFER_SIZE);	  headers.put(keyword,    restLen,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
251	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()  &&  IOUtils.readFully(restLen);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()  &&  IOUtils.readFully(restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF()  &&  IOUtils.readFully(restLen);	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
252	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()  &&  i.hasNext();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()  &&  i.hasNext();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF()  &&  i.hasNext();	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
253	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES);	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
254	[BUG]  [BUGGY]  headers.add(currEntry.getKeyword(),  keyword);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.getKeyword(),  keyword);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.getKeyword(),  keyword);	  headers.add(currEntry.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
255	[BUG]  [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+  ch;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+  ch;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+  ch;	  final    String    keyword    =    keyword.toString();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
256	[BUG]  [BUGGY]  final  String  keyword  =  col.toString();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  col.toString();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  col.toString();	  final    String    keyword    =    keyword.toString();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
257	[BUG]  [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_9);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_9);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  coll.toString(CharsetNames.UTF_9);	  final    String    keyword    =    keyword.toString();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
258	[BUG]  [BUGGY]  Integer  i  =  coll.readInt()  *  4;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  Integer  i  =  coll.readInt()  *  4;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	Integer  i  =  coll.readInt()  *  4;	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
259	[BUG]  [BUGGY]  Integer  i  =  coll.readInt(0,  0);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  Integer  i  =  coll.readInt(0,  0);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	Integer  i  =  coll.readInt(0,  0);	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
260	[BUG]  [BUGGY]  headers.put(keyword,  key,  i);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  key,  i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  key,  i);	  headers.put(keyword,    coll,    i);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
261	[BUG]  [BUGGY]  headers.put(keyword,  currEntry,  i);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  currEntry,  i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  currEntry,  i);	  headers.put(keyword,    coll,    i);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
262	[BUG]  [BUGGY]  headers.put(keyword,  i,  RestLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  RestLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  RestLen);	  headers.put(keyword,    i,    coll);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
263	[BUG]  [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ "  - "  +  keywords.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ "  - "  +  keywords.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  coll.toString(CharsetNames.UTF_8)+ "  - "  +  keywords.toString(CharsetNames.UTF_8);	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8)+   "    -   "    +    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
264	[BUG]  [BUGGY]  final  int  len  =  i.length();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  i.length();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  i.length();	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
265	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readInt(remainderLen));  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  IOUtils.readInt(remainderLen));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readInt(remainderLen));	  headers.put(keyword,    IOUtils.readLong(restLen));    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
266	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remainderLen),  coll);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(remainderLen),  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remainderLen),  coll);	  headers.put(keyword,    new    String(remainderLen));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
267	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remainderLen),  i);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  String(remainderLen),  i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remainderLen),  i);	  headers.put(keyword,    new    String(remainderLen));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
268	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(remainderLen),  0);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigInteger(remainderLen),  0);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(remainderLen),  0);	  headers.put(keyword,    new    BigInteger(remainderLen));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
269	[BUG]  [BUGGY]  headers.add(currEntry.getKeyword(),  key);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.getKeyword(),  key);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.getKeyword(),  key);	  headers.add(currEntry.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
270	[BUG]  [BUGGY]  headers.add(currEntry.getKeyword(),  recv);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.getKeyword(),  recv);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.getKeyword(),  recv);	  headers.add(currEntry.getKeyword());    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
271	[BUG]  [BUGGY]  if(ch  ==  'T')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  'T')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  'T')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
272	[BUG]  [BUGGY]  if(ch  ==  'T')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  else  {  return  coll;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  'T')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  else  {  return  coll;  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  'T')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  else  {  return  coll;  }	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
273	[BUG]  [BUGGY]  if(ch  ==  'T')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  else  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(ch  ==  'T')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  else  {  throw  new  IOException( " ");  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(ch  ==  'T')  {  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  }  else  {  throw  new  IOException( " ");  }	  final    String    keyword    =    keyword.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
274	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(len));  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigDecimal(len));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(len));	  headers.put(keyword,    new    BigDecimal(remainderLen));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
275	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen),  coll);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen),  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(remainderLen),  coll);	  headers.put(keyword,    new    BigDecimal(remainderLen));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
276	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen  *  2  +  1));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen  *  2  +  1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(remainderLen  *  2  +  1));	  headers.put(keyword,    new    BigDecimal(remainderLen));    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
277	[BUG]  [BUGGY]  headers.put(keyword,  i,  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  len);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  len);	  headers.put(keyword,    restLen,    len);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
278	[BUG]  [BUGGY]  Integer  i  =  coll.readIntValue();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  Integer  i  =  coll.readIntValue();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	Integer  i  =  coll.readIntValue();	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
279	[BUG]  [BUGGY]  Integer  i  =  coll.parseInt(ch);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  Integer  i  =  coll.parseInt(ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	Integer  i  =  coll.parseInt(ch);	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
280	[BUG]  [BUGGY]  Integer  i  =  coll.readInt(0);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  Integer  i  =  coll.readInt(0);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	Integer  i  =  coll.readInt(0);	  Integer    i    =    coll.readInt();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
281	[BUG]  [BUGGY]  final  int  markLimit  =  i.length();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  markLimit  =  i.length();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  i.length();	  final    int    markLimit    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
282	[BUG]  [BUGGY]  headers.put(keyword,  str,  restLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  str,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  str,  restLen);	  headers.put(keyword,    coll,    restLen);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
283	[BUG]  [BUGGY]  headers.put(keyword,  i,  remainderLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  remainderLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  remainderLen);	  headers.put(keyword,    i,    coll);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
284	[BUG]  [BUGGY]  final  int  len  =  i.read(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  i.read(Long.MAX_VALUE);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  i.read(Long.MAX_VALUE);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
285	[BUG]  [BUGGY]  final  int  len  =  i.read(ch);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  i.read(ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  i.read(ch);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
286	[BUG]  [BUGGY]  final  int  numRecords  =  coll.recordSize();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  numRecords  =  coll.recordSize();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.recordSize();	  final    int    numRecords    =    coll.size();    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
287	[BUG]  [BUGGY]  char  markLimit  =  coll.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  char  markLimit  =  coll.toString(CharsetNames.UTF_8);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	char  markLimit  =  coll.toString(CharsetNames.UTF_8);	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
288	[BUG]  [BUGGY]  headers.add(query,  restLen);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(query,  restLen);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(query,  restLen);	  headers.add(keyword,    remainderLen);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
289	[BUG]  [BUGGY]  headers.put(keyword,  i,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  i,  hasHitEOF);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  hasHitEOF);	  headers.put(keyword,    restLen,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
290	[BUG]  [BUGGY]  headers.put(keyword,  ch,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  ch,  hasHitEOF);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  ch,  hasHitEOF);	  headers.put(keyword,    restLen,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
291	[BUG]  [BUGGY]  headers.put(keyword,  len,  SMALL_BUFFER_SIZE);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  len,  SMALL_BUFFER_SIZE);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  len,  SMALL_BUFFER_SIZE);	  headers.put(keyword,    restLen,    SMALL_BUFFER_SIZE);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
292	[BUG]  [BUGGY]  headers.add(currEntry.keyword,  keyword);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.keyword,  keyword);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.keyword,  keyword);	  headers.add(currEntry.keyword);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
293	[BUG]  [BUGGY]  headers.add(currEntry.keyword,  i);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.keyword,  i);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.keyword,  i);	  headers.add(currEntry.keyword);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
294	[BUG]  [BUGGY]  headers.add(currEntry.keyword,  coll);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.add(currEntry.keyword,  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.keyword,  coll);	  headers.add(currEntry.keyword);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
295	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +   "  bytes,  read  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(remainderLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +   "  bytes,  read  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(remainderLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +   "  bytes,  read	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "Paxheader.    Expected   "    +    keyword    +   "    bytes,    read   "    +    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
296	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(remainderLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(remainderLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  +	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "Paxheader.    Expected   "    +    keyword    +   "    bytes,    read   "    +    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
297	[BUG]  [BUGGY]  if(len  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read   "  +  restLen);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(len  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read   "  +  restLen);  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(len  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read   "  +  restLen);  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "Paxheader.    Expected   "    +    keyword    +   "    bytes,    read   "    +    restLen);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
298	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.size()  <  0;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.size()  <  0;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.size()  <  0;	  final    int    hasHitEOF    =    coll.size()    >    0;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
299	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword)&&  i.hasNext();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword)&&  i.hasNext();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(keyword)&&  i.hasNext();	  final    int    hasHitEOF    =    coll.hasHitEOF(keyword);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
300	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword)?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword)?  -1  :  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(keyword)?  -1  :  1;	  final    int    hasHitEOF    =    coll.hasHitEOF(keyword);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
301	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(len));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  new  BigInteger(len));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(len));	  headers.put(keyword,    new    BigInteger(restLen));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
302	[BUG]  [BUGGY]  headers.put(keyword,  coll,  IOUtils.readFully(ch));  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll,  IOUtils.readFully(ch));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll,  IOUtils.readFully(ch));	  headers.put(keyword,    restLen,    IOUtils.readFully(ch));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
303	[BUG]  [BUGGY]  headers.put(keyword,  key,  IOUtils.readFully(ch));  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  key,  IOUtils.readFully(ch));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  key,  IOUtils.readFully(ch));	  headers.put(keyword,    restLen,    IOUtils.readFully(ch));    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
304	[BUG]  [BUGGY]  headers.put(keyword,  resultLen,  ch);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  resultLen,  ch);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  resultLen,  ch);	  headers.put(keyword,    restLen,    ch);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
305	[BUG]  [BUGGY]  headers.put(keyword,  resultLen,  coll);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  resultLen,  coll);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  resultLen,  coll);	  headers.put(keyword,    restLen,    coll);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
306	[BUG]  [BUGGY]  if(len  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(len  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(len  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
307	[BUG]  [BUGGY]  if(remainderLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(remainderLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(remainderLen  >  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
308	[BUG]  [BUGGY]  if(len  <  =  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  if(len  <  =  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	if(len  <  =  0)  {  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }	  final    int    markLimit    =    coll.toString(CharsetNames.UTF_8);    if(markLimit    ==    0)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
309	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()?  -1  :  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF()?  -1  :  1;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF()?  -1  :  1;	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
310	[BUG]  [BUGGY]  final  int  hasHitEOF  =  i.hasHitEOF();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  hasHitEOF  =  i.hasHitEOF();  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  i.hasHitEOF();	  final    int    hasHitEOF    =    coll.hasHitEOF();    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
311	[BUG]  [BUGGY]  headers.put(keyword,  currEntry);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  currEntry);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  currEntry);	  headers.put(keyword,    restLen,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
312	[BUG]  [BUGGY]  headers.put(keyword,  len,  currEntry);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  len,  currEntry);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  len,  currEntry);	  headers.put(keyword,    restLen,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
313	[BUG]  [BUGGY]  headers.put(keyword,  key,  currEntry);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  key,  currEntry);  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  key,  currEntry);	  headers.put(keyword,    restLen,    currEntry);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
314	[BUG]  [BUGGY]  final  int  len  =  i.readInt()  *  2;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  final  int  len  =  i.readInt()  *  2;  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  i.readInt()  *  2;	  final    int    len    =    i.readInt();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
315	[BUG]  [BUGGY]  headers.put(keyword,  coll.toString(CharacterNames.UTF_8));  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll.toString(CharacterNames.UTF_8));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll.toString(CharacterNames.UTF_8));	  headers.put(keyword,    coll.toString());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
316	[BUG]  [BUGGY]  headers.put(keyword,  coll.toString(1));  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL      [BUGGY]  headers.put(keyword,  coll.toString(1));  [BUGGY]      }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(     "Failed  to  read       "  +       "Paxheader.  Expected       "  +  restLen  +       "  bytes,  read       "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll.toString(1));	  headers.put(keyword,    coll.toString());    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
