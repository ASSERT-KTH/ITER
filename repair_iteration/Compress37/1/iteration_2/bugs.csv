bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  headers.put(keyword,  resultLen);  [CE]  <identifier>  expected  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  resultLen);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  resultLen);	  headers.put(keyword,    result);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  headers.put(keyword,  remainderLen);  [CE]  <identifier>  expected  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  remainderLen);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  remainderLen);	  headers.put(keyword,    result);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  SMALL_BUFFER_SIZE);  [CE]  ';'  expected  [FE]        NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  restLen,  SMALL_BUFFER_SIZE);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  SMALL_BUFFER_SIZE);	  headers.put(keyword,    restLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
4	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  read);  [CE]  ';'  expected  [FE]          NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  restLen,  read);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  read);	  headers.put(keyword,    restLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
5	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  ch);  [CE]  ';'  expected  [FE]            NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  restLen,  ch);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  ch);	  headers.put(keyword,    restLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
6	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  i);  [CE]  <identifier>  expected  [FE]              NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  restLen,  i);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  i);	  headers.put(keyword,    restLen);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  len);  [CE]  <identifier>  expected  [FE]                NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  restLen,  len);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  len);	  headers.put(keyword,    restLen);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  result);  [CE]  ';'  expected  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  restLen,  result);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  result);	  headers.put(keyword,    restLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
9	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  coll);  [CE]  ';'  expected  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  restLen,  coll);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  coll);	  headers.put(keyword,    restLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
10	[BUG]  [BUGGY]  headers.add(keyword,  restLen);  [CE]  <identifier>  expected  [FE]              NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.add(keyword,  restLen);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  restLen);	  headers.add(keyword);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
11	[BUG]  [BUGGY]  headers.add(currEntry.getKeyword());  [CE]  illegal  start  of  expression  [FE]                NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.add(currEntry.getKeyword());  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.getKeyword());	  headers.add(keyword);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
12	[BUG]  [BUGGY]  headers.add(keyword,  remainderLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.add(keyword,  remainderLen);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  remainderLen);	  headers.add(keyword);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  headers.add(keyword,  i);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.add(keyword,  i);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  i);	  headers.add(keyword);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  headers.add(keyword,  read);  [CE]  ';'  expected  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.add(keyword,  read);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(keyword,  read);	  headers.add(keyword);    	non-compiled	[CE]  ';'  expected	4	None	replace
15	[BUG]  [BUGGY]  final  int  len  =  coll.length();  [CE]  illegal  start  of  expression  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  len  =  coll.length();  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  coll.length();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
16	[BUG]  [BUGGY]  final  int  numRecords  =  coll.size();  [CE]  illegal  start  of  expression  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  numRecords  =  coll.size();  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.size();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
17	[BUG]  [BUGGY]  final  int  markLimit  =  coll.length();  [CE]  illegal  start  of  expression  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  markLimit  =  coll.length();  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.length();	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
18	[BUG]  [BUGGY]  InputStream  coll  =  i.readInputStream();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  InputStream  coll  =  i.readInputStream();  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	InputStream  coll  =  i.readInputStream();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
19	[BUG]  [BUGGY]  final  int  len  =  i.read();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  len  =  i.read();  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  i.read();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
20	[BUG]  [BUGGY]  final  int  len  =  i.readInt();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  len  =  i.readInt();  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  len  =  i.readInt();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
21	[BUG]  [BUGGY]  final  int  numRecords  =  coll.length();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  numRecords  =  coll.length();  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  numRecords  =  coll.length();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
22	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(restLen));  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  new  BigInteger(restLen));  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(restLen));	  headers.put(keyword,    null);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE);  [CE]  ';'  expected  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  new  SMALL_BUFFER_SIZE);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  SMALL_BUFFER_SIZE);	  headers.put(keyword,    null);    	non-compiled	[CE]  ';'  expected	7	None	replace
24	[BUG]  [BUGGY]  headers.put(keyword,  IOUtils.readLong(restLen));  [CE]  ';'  expected  [FE]            NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  IOUtils.readLong(restLen));  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  IOUtils.readLong(restLen));	  headers.put(keyword,    i);    	non-compiled	[CE]  ';'  expected	3	None	replace
25	[BUG]  [BUGGY]  headers.put(keyword,  coll,  restLen);  [CE]  ';'  expected  [FE]          NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  coll,  restLen);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll,  restLen);	  headers.put(keyword,    coll);    	non-compiled	[CE]  ';'  expected	2	None	replace
26	[BUG]  [BUGGY]  headers.put(keyword,  i,  coll);  [CE]  ';'  expected  [FE]            NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  i,  coll);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i,  coll);	  headers.put(keyword,    coll);    	non-compiled	[CE]  ';'  expected	2	None	replace
27	[BUG]  [BUGGY]  headers.put(keyword,  coll.toString());  [CE]  ';'  expected  [FE]              NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  coll.toString());  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll.toString());	  headers.put(keyword,    coll);    	non-compiled	[CE]  ';'  expected	2	None	replace
28	[BUG]  [BUGGY]  headers.put(keyword,  coll,  i);  [CE]  ';'  expected  [FE]                NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  coll,  i);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll,  i);	  headers.put(keyword,    coll);    	non-compiled	[CE]  ';'  expected	2	None	replace
29	[BUG]  [BUGGY]  headers.put(keyword,  i  +  1);  [CE]  ';'  expected  [FE]            NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  i  +  1);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  i  +  1);	  headers.put(keyword,    i);    	non-compiled	[CE]  ';'  expected	3	None	replace
30	[BUG]  [BUGGY]  headers.put(keyword,  ch);  [CE]  ';'  expected  [FE]              NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  ch);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  ch);	  headers.put(keyword,    i);    	non-compiled	[CE]  ';'  expected	3	None	replace
31	[BUG]  [BUGGY]  headers.add(currEntry.keyword);  [CE]  ';'  expected  [FE]              NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.add(currEntry.keyword);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.add(currEntry.keyword);	  headers.add(keyword);    	non-compiled	[CE]  ';'  expected	4	None	replace
32	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  hasHitEOF);  [CE]  ';'  expected  [FE]        NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  restLen,  hasHitEOF);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  hasHitEOF);	  headers.put(keyword,    restLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
33	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  currEntry);  [CE]  ';'  expected  [FE]          NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  restLen,  currEntry);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  currEntry);	  headers.put(keyword,    restLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
34	[BUG]  [BUGGY]  headers.put(keyword,  new  String(remainderLen));  [CE]  ';'  expected  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  new  String(remainderLen));  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(remainderLen));	  headers.put(keyword,    null);    	non-compiled	[CE]  ';'  expected	7	None	replace
35	[BUG]  [BUGGY]  headers.put(keyword,  content);  [CE]  ';'  expected  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  content);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  content);	  headers.put(keyword,    null);    	non-compiled	[CE]  ';'  expected	7	None	replace
36	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF();  [CE]  ';'  expected  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF();  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF();	      	non-compiled	[CE]  ';'  expected	8	None	replace
37	[BUG]  [BUGGY]  final  String  keyword  =  keyword.toString();  [CE]  ';'  expected  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  String  keyword  =  keyword.toString();  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  keyword.toString();	      	non-compiled	[CE]  ';'  expected	8	None	replace
38	[BUG]  [BUGGY]  Integer  i  =  coll.readInt();  [CE]  ';'  expected  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  Integer  i  =  coll.readInt();  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	Integer  i  =  coll.readInt();	      	non-compiled	[CE]  ';'  expected	8	None	replace
39	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword);  [CE]  ';'  expected  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  hasHitEOF  =  coll.hasHitEOF(keyword);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.hasHitEOF(keyword);	      	non-compiled	[CE]  ';'  expected	8	None	replace
40	[BUG]  [BUGGY]  final  int  hasHitEOF  =  coll.size()  >  0;  [CE]  ';'  expected  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  hasHitEOF  =  coll.size()  >  0;  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  hasHitEOF  =  coll.size()  >  0;	      	non-compiled	[CE]  ';'  expected	8	None	replace
41	[BUG]  [BUGGY]  headers.put(keyword,  restLen,  IOUtils.readFully(ch));  [CE]  ';'  expected  [FE]        NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  restLen,  IOUtils.readFully(ch));  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  restLen,  IOUtils.readFully(ch));	  headers.put(keyword,    restLen);    	non-compiled	[CE]  ';'  expected	1	None	replace
42	[BUG]  [BUGGY]  headers.put(keyword,  new  String(len));  [CE]  ';'  expected  [FE]                    NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  new  String(len));  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  String(len));	  headers.put(keyword,    null);    	non-compiled	[CE]  ';'  expected	7	None	replace
43	[BUG]  [BUGGY]  headers.put(keyword,  new  BigInteger(remainderLen));  [CE]  ';'  expected  [FE]            NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  new  BigInteger(remainderLen));  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigInteger(remainderLen));	  headers.put(keyword,    i);    	non-compiled	[CE]  ';'  expected	3	None	replace
44	[BUG]  [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen));  [CE]  ';'  expected  [FE]              NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  new  BigDecimal(remainderLen));  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  new  BigDecimal(remainderLen));	  headers.put(keyword,    i);    	non-compiled	[CE]  ';'  expected	3	None	replace
45	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  [CE]  ';'  expected  [FE]                      NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);	      	non-compiled	[CE]  ';'  expected	8	None	replace
46	[BUG]  [BUGGY]  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  [CE]  ';'  expected  [FE]                        NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  keyword.toString(CharsetNames.UTF_8);	      	non-compiled	[CE]  ';'  expected	8	None	replace
47	[BUG]  [BUGGY]  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8)+ "  - "  +  coll.toString(CharsetNames.UTF_8);  [CE]  ';'  expected  [FE]                          NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  String  keyword  =  keyword.toString(CharsetNames.UTF_8)+ "  - "  +  coll.toString(CharsetNames.UTF_8);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  String  keyword  =  keyword.toString(CharsetNames.UTF_8)+ "  - "  +  coll.toString(CharsetNames.UTF_8);	      	non-compiled	[CE]  ';'  expected	8	None	replace
48	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read "  +  restLen);  }  [CE]  ';'  expected  [FE]                            NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read "  +  restLen);  }  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( "Paxheader.  Expected "  +  keyword  + "  bytes,  read "  +  restLen);  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
49	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [CE]  ';'  expected  [FE]                              NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  if(markLimit  ==  0)  {  throw  new  IOException( " ");  }	      	non-compiled	[CE]  ';'  expected	8	None	replace
50	[BUG]  [BUGGY]  headers.put(keyword,  comp);  [CE]  ';'  expected  [FE]                NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  comp);  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  comp);	  headers.put(keyword,    read);    	non-compiled	[CE]  ';'  expected	5	None	replace
51	[BUG]  [BUGGY]  headers.put(keyword,  coll;  [CE]  illegal  start  of  expression  [FE]          NegativeArraySizeException    [CONTEXT]    if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL    [BUGGY]  headers.put(keyword,  coll;  [BUGGY]    }  else  {  final  byte[]  rest  =  new  byte[restLen];  final  int  got  =  IOUtils.readFully(i,  rest);  if  (got  !=  restLen)  {  throw  new  IOException(   "Failed  to  read     "  +     "Paxheader.  Expected     "  +  restLen  +     "  bytes,  read     "  +  got);  }  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.7071067811865475	472	472	1	replace	headers.put(keyword,  coll;	  headers.put(keyword,    coll);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
