bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  len  =  headers.length()  -  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length()  -  1;	  int    len    =    headers.length();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
2	[BUG]  [BUGGY]  int  len  =  headers.length()  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length()  +  1;	  int    len    =    headers.length();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
3	[BUG]  [BUGGY]  int  len  =  headers.length()  -  2;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length()  -  2;	  int    len    =    headers.length();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
4	[BUG]  [BUGGY]  int  len  =  headers.length()  *  2;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length()  *  2;	  int    len    =    headers.length();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
5	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  numRecords  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  numRecords  =  headers.size()  -  1;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
6	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  numRecords  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  numRecords  =  headers.size()  +  1;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
7	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  numRecords  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  numRecords  =  headers.size()  -  2;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
8	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  numRecords  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  numRecords  =  headers.size()  *  2;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
9	[BUG]  [BUGGY]  int  numRecords  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  numRecords  =  headers.size()  -  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  numRecords  =  headers.size()  -  4;	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
10	[BUG]  [BUGGY]  Integer  i  =  headers.getInt();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.getInt();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.getInt();	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
11	[BUG]  [BUGGY]  Integer  i  =  headers.getInt(ch);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.getInt(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.getInt(ch);	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
12	[BUG]  [BUGGY]  Integer  i  =  headers.readInt()  +  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.readInt()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.readInt()  +  1;	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
13	[BUG]  [BUGGY]  Integer  i  =  headers.getIntValue();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.getIntValue();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.getIntValue();	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
14	[BUG]  [BUGGY]  Integer  i  =  headers.getIntValue(ch);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.getIntValue(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.getIntValue(ch);	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
15	[BUG]  [BUGGY]  char  len  =  globalPaxHeaders.getLength();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  char  len  =  globalPaxHeaders.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	char  len  =  globalPaxHeaders.getLength();	  int    len    =    globalPaxHeaders.getLength();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
16	[BUG]  [BUGGY]  long  len  =  globalPaxHeaders.getLength();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  long  len  =  globalPaxHeaders.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	long  len  =  globalPaxHeaders.getLength();	  int    len    =    globalPaxHeaders.getLength();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
17	[BUG]  [BUGGY]  Integer  len  =  globalPaxHeaders.getLength();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  globalPaxHeaders.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  globalPaxHeaders.getLength();	  int    len    =    globalPaxHeaders.getLength();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
18	[BUG]  [BUGGY]  int  len  =  globalPaxHeaders.getLength()  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  globalPaxHeaders.getLength()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  globalPaxHeaders.getLength()  -  1;	  int    len    =    globalPaxHeaders.getLength();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
19	[BUG]  [BUGGY]  int  len  =  globalPaxHeaders.getLength()  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  globalPaxHeaders.getLength()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  globalPaxHeaders.getLength()  +  1;	  int    len    =    globalPaxHeaders.getLength();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.size();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.size();	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
21	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.iterator().next();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.iterator().next();	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
22	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.entrySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.entrySet().iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.entrySet().iterator().next();	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
23	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.size()  >  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.size()  >  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.size()  >  0;	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
24	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.values().iterator().next();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.values().iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.values().iterator().next();	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
25	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.get(ch);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.get(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.get(ch);	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
26	[BUG]  [BUGGY]  t  len  =  headers.size();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  t  len  =  headers.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	t  len  =  headers.size();	  int    len    =    headers.size()    -    4;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
27	[BUG]  [BUGGY]  String  len  =  headers.indexOf('  ');  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  String  len  =  headers.indexOf('  ');  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	String  len  =  headers.indexOf('  ');	  char    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
28	[BUG]  [BUGGY]  BigInteger  len  =  headers.indexOf('  ');  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.indexOf('  ');  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.indexOf('  ');	  char    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
29	[BUG]  [BUGGY]  Character  len  =  headers.indexOf('  ');  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.indexOf('  ');  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.indexOf('  ');	  char    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
30	[BUG]  [BUGGY]  Char  len  =  headers.indexOf('  ');  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.indexOf('  ');  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.indexOf('  ');	  char    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
31	[BUG]  [BUGGY]  Integer  i  =  headers.get(globalPaxHeaders.size());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.get(globalPaxHeaders.size());  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.get(globalPaxHeaders.size());	  Integer    i    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
32	[BUG]  [BUGGY]  Integer  i  =  headers.get(headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.get(headers.size()  -  1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.get(headers.size()  -  1);	  Integer    i    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
33	[BUG]  [BUGGY]  Integer  i  =  headers.get(globalPaxHeaders.size()  -  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.get(globalPaxHeaders.size()  -  1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.get(globalPaxHeaders.size()  -  1);	  Integer    i    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
34	[BUG]  [BUGGY]  Integer  i  =  headers.get(globalPaxHeaders.size()  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.get(globalPaxHeaders.size()  +  1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.get(globalPaxHeaders.size()  +  1);	  Integer    i    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
35	[BUG]  [BUGGY]  Integer  i  =  globalPaxHeaders.get(headers.size());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  globalPaxHeaders.get(headers.size());  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  globalPaxHeaders.get(headers.size());	  Integer    i    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
36	[BUG]  [BUGGY]  Integer  i  =  headers.get(headers.size()  +  1);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.get(headers.size()  +  1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.get(headers.size()  +  1);	  Integer    i    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
37	[BUG]  [BUGGY]  int  len  =  headers.size()  <  0?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  <  0?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  <  0?  headers.size()  :  0;	  int    len    =(headers.size()    >=    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
38	[BUG]  [BUGGY]  int  len  =(headers.size()  <  0)?  headers.size()  :  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  0)?  headers.size()  :  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  0)?  headers.size()  :  1;	  int    len    =(headers.size()    <    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
39	[BUG]  [BUGGY]  int  len  =  headers.length  +  2;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  +  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  +  2;	  int    len    =    headers.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
40	[BUG]  [BUGGY]  int  len  =  headers.length  *  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  *  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  *  1;	  int    len    =    headers.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
41	[BUG]  [BUGGY]  int  len  =  headers.length  +  3;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  +  3;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  +  3;	  int    len    =    headers.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
42	[BUG]  [BUGGY]  Char  len  =(char)headers.get(ch);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =(char)headers.get(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =(char)headers.get(ch);	  Char    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
43	[BUG]  [BUGGY]  Char  len  =  headers.get(ch);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.get(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.get(ch);	  Char    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
44	[BUG]  [BUGGY]  Char  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.getLength();	  Char    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
45	[BUG]  [BUGGY]  int  len  =(headers.size()  <  1)?  headers.size()  :  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  1)?  headers.size()  :  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  1)?  headers.size()  :  1;	  int    len    =(headers.size()    <    1)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
46	[BUG]  [BUGGY]  int  len  =(headers.size()  >  1)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  1)?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  1)?  headers.size()  :  0;	  int    len    =(headers.size()    <    1)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
47	[BUG]  [BUGGY]  int  len  =  headers.size()  <  1)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  <  1)?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  <  1)?  headers.size()  :  0;	  int    len    =(headers.size()    <    1)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
48	[BUG]  [BUGGY]  int  len  =(headers.size()  <  1)?  headers.size()  +  1  :  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  1)?  headers.size()  +  1  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  1)?  headers.size()  +  1  :  0;	  int    len    =(headers.size()    <    1)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
49	[BUG]  [BUGGY]  int  len  =(headers.size()  <  1)?  headers.length  :  0;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  1)?  headers.length  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  1)?  headers.length  :  0;	  int    len    =(headers.size()    <    1)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
50	[BUG]  [BUGGY]  int  len  =(headers.size()  >=  1)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >=  1)?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >=  1)?  headers.size()  :  0;	  int    len    =(headers.size()    <    1)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
51	[BUG]  [BUGGY]  Char  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.size()  -  1;	  Char    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
52	[BUG]  [BUGGY]  Char  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.size()  +  1;	  Char    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
53	[BUG]  [BUGGY]  Char  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.size()  -  2;	  Char    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
54	[BUG]  [BUGGY]  Char  len  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.size()  *  2;	  Char    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
55	[BUG]  [BUGGY]  int  n  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  n  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  n  =  headers.size()  -  1;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
56	[BUG]  [BUGGY]  int  n  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  n  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  n  =  headers.size()  +  1;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
57	[BUG]  [BUGGY]  int  n  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  n  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  n  =  headers.size()  -  2;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
58	[BUG]  [BUGGY]  int  n  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  n  =  globalPaxHeaders.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  n  =  globalPaxHeaders.size();	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
59	[BUG]  [BUGGY]  int  n  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  n  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  n  =  headers.size()  *  2;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
60	[BUG]  [BUGGY]  Integer  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.getLength();	  int    len    =    headers.getLength()    -    2;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  char  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  char  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	char  len  =  headers.getLength();	  int    len    =    headers.getLength()    -    2;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  t  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  t  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	t  len  =  headers.getLength();	  int    len    =    headers.getLength()    -    2;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
63	[BUG]  [BUGGY]  long  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  long  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	long  len  =  headers.getLength();	  int    len    =    headers.getLength()    -    2;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
64	[BUG]  [BUGGY]  int  len  =(headers.size()  <  0)?  headers.get(ch):  0;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  0)?  headers.get(ch):  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  0)?  headers.get(ch):  0;	  int    len    =(headers.size()    >    0)?    headers.get(ch):    0;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
65	[BUG]  [BUGGY]  int  len  =(headers.size()  >  0)?  headers.get(ch):  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  0)?  headers.get(ch):  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  0)?  headers.get(ch):  1;	  int    len    =(headers.size()    >    0)?    headers.get(ch):    0;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
66	[BUG]  [BUGGY]  int  len  =(headers.size()  <  1)?  headers.get(ch):  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  1)?  headers.get(ch):  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  1)?  headers.get(ch):  0;	  int    len    =(headers.size()    >    0)?    headers.get(ch):    0;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
67	[BUG]  [BUGGY]  int  len  =(headers.size()  ==  0)?  headers.get(ch):  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  ==  0)?  headers.get(ch):  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  ==  0)?  headers.get(ch):  0;	  int    len    =(headers.size()    >    0)?    headers.get(ch):    0;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
68	[BUG]  [BUGGY]  int  len  =(headers.size()  >=  0)?  headers.get(ch):  0;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >=  0)?  headers.get(ch):  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >=  0)?  headers.get(ch):  0;	  int    len    =(headers.size()    >    0)?    headers.get(ch):    0;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
69	[BUG]  [BUGGY]  int  len  =(headers.size()  >  1)?  headers.get(ch):  0;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  1)?  headers.get(ch):  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  1)?  headers.get(ch):  0;	  int    len    =(headers.size()    >    0)?    headers.get(ch):    0;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
70	[BUG]  [BUGGY]  int  len  =(headers.size()  <  0)?  headers.getLength()  :  0;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  0)?  headers.getLength()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  0)?  headers.getLength()  :  0;	  int    len    =(headers.size()    >    0)?    headers.getLength()    :    0;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
71	[BUG]  [BUGGY]  int  len  =(headers.size()  >  0)?  headers.getLength()  :  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  0)?  headers.getLength()  :  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  0)?  headers.getLength()  :  1;	  int    len    =(headers.size()    >    0)?    headers.getLength()    :    0;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
72	[BUG]  [BUGGY]  int  len  =(headers.size()  <  1)?  headers.getLength()  :  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  1)?  headers.getLength()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  1)?  headers.getLength()  :  0;	  int    len    =(headers.size()    >    0)?    headers.getLength()    :    0;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
73	[BUG]  [BUGGY]  int  len  =(headers.size()  ==  0)?  headers.getLength()  :  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  ==  0)?  headers.getLength()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  ==  0)?  headers.getLength()  :  0;	  int    len    =(headers.size()    >    0)?    headers.getLength()    :    0;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
74	[BUG]  [BUGGY]  int  len  =(headers.size()  >  0)?  headers.getLength()  -  1  :  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  0)?  headers.getLength()  -  1  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  0)?  headers.getLength()  -  1  :  0;	  int    len    =(headers.size()    >    0)?    headers.getLength()    :    0;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
75	[BUG]  [BUGGY]  int  len  =(headers.size()  >  0)?  headers.getLength()  +  1  :  0;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  0)?  headers.getLength()  +  1  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  0)?  headers.getLength()  +  1  :  0;	  int    len    =(headers.size()    >    0)?    headers.getLength()    :    0;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
76	[BUG]  [BUGGY]  int  len  =  headers.indexOf('  ',  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.indexOf('  ',  1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.indexOf('  ',  1);	  int    len    =    headers.indexOf('    ',    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
77	[BUG]  [BUGGY]  int  len  =  headers.indexOf('  ',  2);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.indexOf('  ',  2);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.indexOf('  ',  2);	  int    len    =    headers.indexOf('    ',    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
78	[BUG]  [BUGGY]  char  len  =  headers.indexOf('  ',  0);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  char  len  =  headers.indexOf('  ',  0);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	char  len  =  headers.indexOf('  ',  0);	  int    len    =    headers.indexOf('    ',    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
79	[BUG]  [BUGGY]  int  len  =  headers.indexOf('  ',  4);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.indexOf('  ',  4);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.indexOf('  ',  4);	  int    len    =    headers.indexOf('    ',    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
80	[BUG]  [BUGGY]  int  len  =  headers.indexOf('  ',  3);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.indexOf('  ',  3);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.indexOf('  ',  3);	  int    len    =    headers.indexOf('    ',    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
81	[BUG]  [BUGGY]  int  len  =  headers.size()  >  0?  headers.size()  :  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  >  0?  headers.size()  :  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  >  0?  headers.size()  :  1;	  int    len    =    headers.size()    >    0?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
82	[BUG]  [BUGGY]  int  len  =  headers.size()  >  1?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  >  1?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  >  1?  headers.size()  :  0;	  int    len    =    headers.size()    >    0?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
83	[BUG]  [BUGGY]  int  len  =  headers.size()  >  0?  headers.size()  +  1  :  0;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  >  0?  headers.size()  +  1  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  >  0?  headers.size()  +  1  :  0;	  int    len    =    headers.size()    >    0?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
84	[BUG]  [BUGGY]  int  len  =  headers.size()  >  0?  headers.length  :  0;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  >  0?  headers.length  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  >  0?  headers.length  :  0;	  int    len    =    headers.size()    >    0?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
85	[BUG]  [BUGGY]  int  len  =(headers.size()  >  0)?  headers.length  :  0;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  0)?  headers.length  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  0)?  headers.length  :  0;	  int    len    =(headers.size()    ==    0)?    headers.length    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
86	[BUG]  [BUGGY]  int  len  =(headers.size()  ==  0)?  headers.length  :  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  ==  0)?  headers.length  :  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  ==  0)?  headers.length  :  1;	  int    len    =(headers.size()    ==    0)?    headers.length    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
87	[BUG]  [BUGGY]  int  len  =(headers.size()  <  0)?  headers.length  :  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  0)?  headers.length  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  0)?  headers.length  :  0;	  int    len    =(headers.size()    ==    0)?    headers.length    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
88	[BUG]  [BUGGY]  int  len  =(headers.size()  >=  0)?  headers.length  :  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >=  0)?  headers.length  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >=  0)?  headers.length  :  0;	  int    len    =(headers.size()    ==    0)?    headers.length    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
89	[BUG]  [BUGGY]  Character  len  =  headers.iterator().next();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.iterator().next();	  Character    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
90	[BUG]  [BUGGY]  Character  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.getLength();	  Character    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
91	[BUG]  [BUGGY]  Character  len  =  headers.entrySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.entrySet().iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.entrySet().iterator().next();	  Character    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
92	[BUG]  [BUGGY]  Character  len  =  headers.get(ch);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.get(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.get(ch);	  Character    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
93	[BUG]  [BUGGY]  Character  len  =  headers.keySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.keySet().iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.keySet().iterator().next();	  Character    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
94	[BUG]  [BUGGY]  Character  len  =  headers.getChars(0,  ch);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.getChars(0,  ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.getChars(0,  ch);	  Character    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
95	[BUG]  [BUGGY]  char  len  =  headers.indexOf('  ',  -1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  char  len  =  headers.indexOf('  ',  -1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	char  len  =  headers.indexOf('  ',  -1);	  int    len    =    headers.indexOf('    ',    -1);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
96	[BUG]  [BUGGY]  Double  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.size()  -  1;	  Double    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
97	[BUG]  [BUGGY]  Double  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.size()  +  1;	  Double    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
98	[BUG]  [BUGGY]  Double  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.size()  -  2;	  Double    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
99	[BUG]  [BUGGY]  Double  len  =  headers.size()  /  2;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.size()  /  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.size()  /  2;	  Double    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
100	[BUG]  [BUGGY]  Double  len  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.size()  *  2;	  Double    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
101	[BUG]  [BUGGY]  Double  len  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.size()  -  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.size()  -  4;	  Double    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
102	[BUG]  [BUGGY]  int  len  =(headers.size()  >  0)?  headers.size()  :  2;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  0)?  headers.size()  :  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  0)?  headers.size()  :  2;	  int    len    =(headers.size()    >    0)?    headers.size()    :    1;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
103	[BUG]  [BUGGY]  Double  len  =  0L;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  0L;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  0L;	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
104	[BUG]  [BUGGY]  Double  len  =  headers.length;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.length;	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
105	[BUG]  [BUGGY]  Double  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.getLength();	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
106	[BUG]  [BUGGY]  double  len  =  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  double  len  =  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	double  len  =  0;	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
107	[BUG]  [BUGGY]  Double  len  =  getLength();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  getLength();	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
108	[BUG]  [BUGGY]  Len  len  =  headers.length;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.length;	  Len    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
109	[BUG]  [BUGGY]  Len  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.getLength();	  Len    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
110	[BUG]  [BUGGY]  Len  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.size()  -  1;	  Len    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
111	[BUG]  [BUGGY]  Len  len  =  headers.size()  >  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.size()  >  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.size()  >  0;	  Len    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
112	[BUG]  [BUGGY]  Len  len  =  0L;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  0L;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  0L;	  Len    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
113	[BUG]  [BUGGY]  int  len  =  headers.length  -  128;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  128;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  128;	  int    len    =    headers.length    -    1L;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
114	[BUG]  [BUGGY]  int  len  =  headers.length  -  10.0;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  10.0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  10.0;	  int    len    =    headers.length    -    1L;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
115	[BUG]  [BUGGY]  int  len  =  headers.length  /  1L;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  /  1L;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  /  1L;	  int    len    =    headers.length    -    1L;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
116	[BUG]  [BUGGY]  final  int  n  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  n  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  n  =  headers.size()  -  1;	  final    int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
117	[BUG]  [BUGGY]  final  int  n  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  n  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  n  =  headers.size()  +  1;	  final    int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
118	[BUG]  [BUGGY]  final  int  n  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  n  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  n  =  headers.size()  -  2;	  final    int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
119	[BUG]  [BUGGY]  final  int  n  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  n  =  globalPaxHeaders.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  n  =  globalPaxHeaders.size();	  final    int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
120	[BUG]  [BUGGY]  final  int  n  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  n  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  n  =  headers.size()  *  2;	  final    int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
121	[BUG]  [BUGGY]  final  int  n  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  n  =  headers.size()  -  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  n  =  headers.size()  -  4;	  final    int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
122	[BUG]  [BUGGY]  char  len  =  headers.getLength()  -  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  char  len  =  headers.getLength()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	char  len  =  headers.getLength()  -  1;	  int    len    =    headers.getLength()    -    1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
123	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf('  ',  0);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.indexOf('  ',  0);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.indexOf('  ',  0);	  Integer    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
124	[BUG]  [BUGGY]  Integer  len  =  headers.get(ch);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.get(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.get(ch);	  Integer    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
125	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf('  ',  -1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.indexOf('  ',  -1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.indexOf('  ',  -1);	  Integer    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
126	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf(ch);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.indexOf(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.indexOf(ch);	  Integer    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
127	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf('  ',  ch);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.indexOf('  ',  ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.indexOf('  ',  ch);	  Integer    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
128	[BUG]  [BUGGY]  int  len  =(headers.size()  ==  0)?  headers.size()  :  2;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  ==  0)?  headers.size()  :  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  ==  0)?  headers.size()  :  2;	  int    len    =(headers.size()    ==    0)?    headers.size()    :    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
129	[BUG]  [BUGGY]  int  len  =(headers.size()  >=  0)?  headers.size()  :  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >=  0)?  headers.size()  :  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >=  0)?  headers.size()  :  1;	  int    len    =(headers.size()    ==    0)?    headers.size()    :    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
130	[BUG]  [BUGGY]  int  len  =(headers.size()!=  0)?  headers.size()  :  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()!=  0)?  headers.size()  :  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()!=  0)?  headers.size()  :  1;	  int    len    =(headers.size()    ==    0)?    headers.size()    :    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
131	[BUG]  [BUGGY]  BigInteger  len  =  headers.length;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.length;	  BigInteger    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
132	[BUG]  [BUGGY]  BigInteger  len  =  0L;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  0L;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  0L;	  BigInteger    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
133	[BUG]  [BUGGY]  BigInteger  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.size()  -  1;	  BigInteger    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
134	[BUG]  [BUGGY]  BigInteger  len  =  headers.size()  >  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.size()  >  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.size()  >  0;	  BigInteger    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
135	[BUG]  [BUGGY]  char  len  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  char  len  =  globalPaxHeaders.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	char  len  =  globalPaxHeaders.size();	  int    len    =    globalPaxHeaders.size();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
136	[BUG]  [BUGGY]  long  len  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  long  len  =  globalPaxHeaders.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	long  len  =  globalPaxHeaders.size();	  int    len    =    globalPaxHeaders.size();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
137	[BUG]  [BUGGY]  final  int  len  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  len  =  globalPaxHeaders.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  len  =  globalPaxHeaders.size();	  int    len    =    globalPaxHeaders.size();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
138	[BUG]  [BUGGY]  float  len  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  float  len  =  globalPaxHeaders.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	float  len  =  globalPaxHeaders.size();	  int    len    =    globalPaxHeaders.size();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
139	[BUG]  [BUGGY]  double  len  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  double  len  =  globalPaxHeaders.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	double  len  =  globalPaxHeaders.size();	  int    len    =    globalPaxHeaders.size();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
140	[BUG]  [BUGGY]  int  len  =(headers.size()  >  0)?  headers.size()  /  1  :  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  0)?  headers.size()  /  1  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  0)?  headers.size()  /  1  :  0;	  int    len    =(headers.size()    >    0)?    headers.size()    -    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
141	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  numRecords  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  numRecords  =  headers.size()  -  1;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
142	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  numRecords  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  numRecords  =  headers.size()  +  1;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
143	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  numRecords  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  numRecords  =  headers.size()  -  2;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
144	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  numRecords  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  numRecords  =  headers.size()  *  2;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
145	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  numRecords  =  headers.size()  -  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  numRecords  =  headers.size()  -  4;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
146	[BUG]  [BUGGY]  int  len  =  headers.length  /  2;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  /  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  /  2;	  int    len    =    headers.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
147	[BUG]  [BUGGY]  final  int  ch  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  ch  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  ch  =  headers.size()  -  1;	  final    int    ch    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
148	[BUG]  [BUGGY]  final  int  ch  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  ch  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  ch  =  headers.size()  +  1;	  final    int    ch    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
149	[BUG]  [BUGGY]  final  int  ch  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  ch  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  ch  =  headers.size()  -  2;	  final    int    ch    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
150	[BUG]  [BUGGY]  final  int  ch  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  ch  =  globalPaxHeaders.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  ch  =  globalPaxHeaders.size();	  final    int    ch    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
151	[BUG]  [BUGGY]  final  int  ch  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  ch  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  ch  =  headers.size()  *  2;	  final    int    ch    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
152	[BUG]  [BUGGY]  final  int  ch  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  ch  =  headers.size()  -  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  ch  =  headers.size()  -  4;	  final    int    ch    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
153	[BUG]  [BUGGY]  Character  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.size()  -  1;	  Character    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
154	[BUG]  [BUGGY]  Character  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.size()  +  1;	  Character    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
155	[BUG]  [BUGGY]  Character  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.size()  -  2;	  Character    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
156	[BUG]  [BUGGY]  Character  len  =  headers.toArray(new  Character(ch));  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.toArray(new  Character(ch));  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.toArray(new  Character(ch));	  Character    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
157	[BUG]  [BUGGY]  Integer  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.size()  -  1;	  Integer    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
158	[BUG]  [BUGGY]  Integer  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.size()  +  1;	  Integer    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
159	[BUG]  [BUGGY]  Integer  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.size()  -  2;	  Integer    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
160	[BUG]  [BUGGY]  Integer  len  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.size()  *  2;	  Integer    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
161	[BUG]  [BUGGY]  int  len  =  headers.length  /  4;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  /  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  /  4;	  int    len    =    headers.length    -    4;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
162	[BUG]  [BUGGY]  Integer  i  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.size()  -  1;	  Integer    i    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
163	[BUG]  [BUGGY]  Integer  i  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.size()  +  1;	  Integer    i    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
164	[BUG]  [BUGGY]  Integer  i  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.size()  -  2;	  Integer    i    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
165	[BUG]  [BUGGY]  Integer  i  =  headers.get(ch);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.get(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.get(ch);	  Integer    i    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
166	[BUG]  [BUGGY]  Integer  i  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.size()  *  2;	  Integer    i    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
167	[BUG]  [BUGGY]  int  len  =  globalPaxHeaders.length  -  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  globalPaxHeaders.length  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  globalPaxHeaders.length  -  1;	  int    len    =    globalPaxHeaders.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
168	[BUG]  [BUGGY]  char  len  =  globalPaxHeaders.length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  char  len  =  globalPaxHeaders.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	char  len  =  globalPaxHeaders.length;	  int    len    =    globalPaxHeaders.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
169	[BUG]  [BUGGY]  int  len  =  globalPaxHeaders.length  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  globalPaxHeaders.length  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  globalPaxHeaders.length  +  1;	  int    len    =    globalPaxHeaders.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
170	[BUG]  [BUGGY]  Integer  len  =  globalPaxHeaders.length;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  globalPaxHeaders.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  globalPaxHeaders.length;	  int    len    =    globalPaxHeaders.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
171	[BUG]  [BUGGY]  int  len  =  globalPaxHeaders.length  -  2;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  globalPaxHeaders.length  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  globalPaxHeaders.length  -  2;	  int    len    =    globalPaxHeaders.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
172	[BUG]  [BUGGY]  long  len  =  globalPaxHeaders.length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  long  len  =  globalPaxHeaders.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	long  len  =  globalPaxHeaders.length;	  int    len    =    globalPaxHeaders.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
173	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  len  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  len  =  headers.size()  -  1;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
174	[BUG]  [BUGGY]  final  int  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  len  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  len  =  headers.size()  +  1;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
175	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  len  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  len  =  headers.size()  -  2;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
176	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  len  =  headers.size()  -  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  len  =  headers.size()  -  4;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
177	[BUG]  [BUGGY]  final  int  len  =  headers.length;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  len  =  headers.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  len  =  headers.length;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
178	[BUG]  [BUGGY]  int  len  =(headers.size()  >>  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >>  0)?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >>  0)?  headers.size()  :  0;	  int    len    =(headers.size()!=    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
179	[BUG]  [BUGGY]  int  len  =  headers.size()  >>  0?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  >>  0?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  >>  0?  headers.size()  :  0;	  int    len    =(headers.size()!=    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
180	[BUG]  [BUGGY]  int  len  =  headers.length  /  3;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  /  3;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  /  3;	  int    len    =    headers.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
181	[BUG]  [BUGGY]  int  len  =  headers.length  /  8;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  /  8;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  /  8;	  int    len    =    headers.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
182	[BUG]  [BUGGY]  int  len  =  headers.length  /  1  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  /  1  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  /  1  +  1;	  int    len    =    headers.length    -    1    +    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
183	[BUG]  [BUGGY]  int  len  =  headers.length  *  1  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  *  1  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  *  1  +  1;	  int    len    =    headers.length    -    1    +    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
184	[BUG]  [BUGGY]  Integer  len  =  headers.length  -  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.length  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.length  -  1;	  int    len    =    headers.length    -    1    +    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
185	[BUG]  [BUGGY]  int  len  =  headers.getLength()  /  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.getLength()  /  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.getLength()  /  1;	  int    len    =    headers.getLength()    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
186	[BUG]  [BUGGY]  int  len  =  headers.length  /  6;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  /  6;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  /  6;	  int    len    =    headers.length    -    6;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
187	[BUG]  [BUGGY]  int  len  =  headers.getLength()  /  2;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.getLength()  /  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.getLength()  /  2;	  int    len    =    headers.getLength()    *    2;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
188	[BUG]  [BUGGY]  int  len  =  headers.getLength()  *  2  +  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.getLength()  *  2  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.getLength()  *  2  +  1;	  int    len    =    headers.getLength()    *    2;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
189	[BUG]  [BUGGY]  int  len  =  headers.length  -  1  +  ch;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  1  +  ch;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  1  +  ch;	  int    len    =    headers.length    -    1    +    length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
190	[BUG]  [BUGGY]  int  len  =  headers.length  -  1  +  width;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  1  +  width;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  1  +  width;	  int    len    =    headers.length    -    1    +    length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
191	[BUG]  [BUGGY]  int  len  =  headers.length  -  1  +  size;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  1  +  size;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  1  +  size;	  int    len    =    headers.length    -    1    +    length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
192	[BUG]  [BUGGY]  int  len  =  headers.length  -  1  +  this.headers.length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  1  +  this.headers.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  1  +  this.headers.length;	  int    len    =    headers.length    -    1    +    length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
193	[BUG]  [BUGGY]  int  len  =  headers.length  -  1  +  length  +  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  1  +  length  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  1  +  length  +  1;	  int    len    =    headers.length    -    1    +    length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
194	[BUG]  [BUGGY]  int  len  =  headers.indexOf('  ',  ch  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.indexOf('  ',  ch  +  1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.indexOf('  ',  ch  +  1);	  int    len    =    headers.indexOf('    ',    ch);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
195	[BUG]  [BUGGY]  char  len  =  headers.indexOf('  ',  ch);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  char  len  =  headers.indexOf('  ',  ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	char  len  =  headers.indexOf('  ',  ch);	  int    len    =    headers.indexOf('    ',    ch);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
196	[BUG]  [BUGGY]  int  len  =  headers.indexOf('  ',  ch  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.indexOf('  ',  ch  -  1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.indexOf('  ',  ch  -  1);	  int    len    =    headers.indexOf('    ',    ch);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
197	[BUG]  [BUGGY]  Integer  len  =  headers.length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.length;	  Integer    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
198	[BUG]  [BUGGY]  String  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  String  len  =  headers.size()  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	String  len  =  headers.size()  -  1;	  String    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
199	[BUG]  [BUGGY]  String  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  String  len  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	String  len  =  headers.size()  +  1;	  String    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
200	[BUG]  [BUGGY]  String  len  =  headers.get(ch);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  String  len  =  headers.get(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	String  len  =  headers.get(ch);	  String    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
201	[BUG]  [BUGGY]  String  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  String  len  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	String  len  =  headers.size()  -  2;	  String    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
202	[BUG]  [BUGGY]  String  len  =  0L;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  String  len  =  0L;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	String  len  =  0L;	  String    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
203	[BUG]  [BUGGY]  final  String  len  =  0;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  String  len  =  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  String  len  =  0;	  String    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
204	[BUG]  [BUGGY]  Len  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.size()  +  1;	  Len    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
205	[BUG]  [BUGGY]  Len  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.size()  -  2;	  Len    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
206	[BUG]  [BUGGY]  Len  len  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.size()  *  2;	  Len    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
207	[BUG]  [BUGGY]  Len  len  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.size()  -  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.size()  -  4;	  Len    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
208	[BUG]  [BUGGY]  Len  len  =  headers.size()  +  2;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.size()  +  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.size()  +  2;	  Len    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
209	[BUG]  [BUGGY]  BigInteger  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.size()  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.size()  +  1;	  BigInteger    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
210	[BUG]  [BUGGY]  BigInteger  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.size()  -  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.size()  -  2;	  BigInteger    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
211	[BUG]  [BUGGY]  BigInteger  len  =  headers.size()  /  2;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.size()  /  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.size()  /  2;	  BigInteger    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
212	[BUG]  [BUGGY]  BigInteger  len  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.size()  -  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.size()  -  4;	  BigInteger    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
213	[BUG]  [BUGGY]  BigInteger  len  =  headers.size()  *  2;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.size()  *  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.size()  *  2;	  BigInteger    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
214	[BUG]  [BUGGY]  Integer  i  =  headers.get(headers.size()  -  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.get(headers.size()  -  2);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.get(headers.size()  -  2);	  Integer    i    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
215	[BUG]  [BUGGY]  int  len  =(headers.size()  >=  0)?  headers.getLength()  :  0;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >=  0)?  headers.getLength()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >=  0)?  headers.getLength()  :  0;	  int    len    =(headers.size()    >    0)?    headers.getLength()    :    0;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
216	[BUG]  [BUGGY]  Len  len  =  headers.iterator().next();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.iterator().next();	  Len    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
217	[BUG]  [BUGGY]  Len  len  =  headers.indexOf('  ');  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.indexOf('  ');  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.indexOf('  ');	  Len    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
218	[BUG]  [BUGGY]  Len  len  =  headers.indexOf('  ')+  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.indexOf('  ')+  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.indexOf('  ')+  1;	  Len    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
219	[BUG]  [BUGGY]  int  len  =  headers.length  /  1  +  length;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  /  1  +  length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  /  1  +  length;	  int    len    =    headers.length    -    1    +    length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
220	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.length;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.length;	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
221	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.values();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.values();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.values();	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
222	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.getLength();	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
223	[BUG]  [BUGGY]  Int  len  =  headers.size();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Int  len  =  headers.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Int  len  =  headers.size();	  int    len    =    headers.size()    -    4;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
224	[BUG]  [BUGGY]  int  n  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  n  =  headers.size()  -  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  n  =  headers.size()  -  4;	  int    n    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
225	[BUG]  [BUGGY]  Integer  len  =  headers.indexOf('  ',  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.indexOf('  ',  1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.indexOf('  ',  1);	  Integer    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
226	[BUG]  [BUGGY]  BigInteger  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.getLength();	  BigInteger    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
227	[BUG]  [BUGGY]  BigInteger  len  =  headers.getLength(0);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.getLength(0);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.getLength(0);	  BigInteger    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
228	[BUG]  [BUGGY]  int  len  =  headers.size()  ==  0?  headers.size()  :  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  ==  0?  headers.size()  :  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  ==  0?  headers.size()  :  1;	  int    len    =(headers.size()    ==    0)?    headers.size()    :    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
229	[BUG]  [BUGGY]  Character  len  =  headers.length;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.length;	  Character    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
230	[BUG]  [BUGGY]  int  len  =(headers.size()  >  0)?  headers.size()  -  1  :  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  0)?  headers.size()  -  1  :  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  0)?  headers.size()  -  1  :  1;	  int    len    =(headers.size()    >    0)?    headers.size()    :    1;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
231	[BUG]  [BUGGY]  int  len  =  headers.length()  -  4;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length()  -  4;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length()  -  4;	  int    len    =    headers.length();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
232	[BUG]  [BUGGY]  int  numRecords  =  this.headers.size();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  numRecords  =  this.headers.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  numRecords  =  this.headers.size();	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
233	[BUG]  [BUGGY]  BigInteger  len  =  headers.get(ch);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.get(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.get(ch);	  BigInteger    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
234	[BUG]  [BUGGY]  BigInteger  len  =  headers.get(headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  BigInteger  len  =  headers.get(headers.size()  -  1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	BigInteger  len  =  headers.get(headers.size()  -  1);	  BigInteger    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
235	[BUG]  [BUGGY]  final  int  ch  =  headers.get(headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  ch  =  headers.get(headers.size()  -  1);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  ch  =  headers.get(headers.size()  -  1);	  final    int    ch    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
236	[BUG]  [BUGGY]  final  int  ch  =  headers.get(headers.size());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  ch  =  headers.get(headers.size());  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  ch  =  headers.get(headers.size());	  final    int    ch    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
237	[BUG]  [BUGGY]  int  len  =(headers.size()  ==  0)?  headers.length  -  1  :  0;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  ==  0)?  headers.length  -  1  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  ==  0)?  headers.length  -  1  :  0;	  int    len    =(headers.size()    ==    0)?    headers.length    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
238	[BUG]  [BUGGY]  int  len  =(headers.size()  ==  1)?  headers.length  :  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  ==  1)?  headers.length  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  ==  1)?  headers.length  :  0;	  int    len    =(headers.size()    ==    0)?    headers.length    :    0;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
239	[BUG]  [BUGGY]  int  len  =  headers.getLength()  *  2  +  ch;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.getLength()  *  2  +  ch;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.getLength()  *  2  +  ch;	  int    len    =    headers.getLength()    *    2;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
240	[BUG]  [BUGGY]  int  len  =  headers.getLength()  *  2  +  length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.getLength()  *  2  +  length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.getLength()  *  2  +  length;	  int    len    =    headers.getLength()    *    2;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
241	[BUG]  [BUGGY]  String  len  =  headers.length;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  String  len  =  headers.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	String  len  =  headers.length;	  String    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
242	[BUG]  [BUGGY]  String  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  String  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	String  len  =  headers.getLength();	  String    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
243	[BUG]  [BUGGY]  Double  len  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  globalPaxHeaders.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  globalPaxHeaders.size();	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
244	[BUG]  [BUGGY]  Double  len  =  globalPaxHeaders.length;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  globalPaxHeaders.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  globalPaxHeaders.length;	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
245	[BUG]  [BUGGY]  Double  len  =  headers.indexOf('  ')+  1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.indexOf('  ')+  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.indexOf('  ')+  1;	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
246	[BUG]  [BUGGY]  Double  len  =  headers.indexOf('  ');  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.indexOf('  ');  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.indexOf('  ');	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
247	[BUG]  [BUGGY]  Char  len  =  headers.getChars(0,  ch);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.getChars(0,  ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.getChars(0,  ch);	  Char    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
248	[BUG]  [BUGGY]  Char  len  =  headers.get(0);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.get(0);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.get(0);	  Char    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
249	[BUG]  [BUGGY]  Int  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Int  len  =  headers.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Int  len  =  headers.getLength();	  int    len    =    headers.getLength()    -    2;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
250	[BUG]  [BUGGY]  int  len  =  headers.size()  >  0)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  >  0)?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  >  0)?  headers.size()  :  0;	  int    len    =(headers.size()    >    0)?    headers.size()    -    1    :    0;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
251	[BUG]  [BUGGY]  int  len  =  headers.length  -  2  +  1;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  2  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  2  +  1;	  int    len    =    headers.length    -    1    +    1;    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
252	[BUG]  [BUGGY]  int  len  =  headers.length  +  1L;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  +  1L;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  +  1L;	  int    len    =    headers.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
253	[BUG]  [BUGGY]  int  len  =  headers.size()  >  0?  headers.getLength()  :  0;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  >  0?  headers.getLength()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  >  0?  headers.getLength()  :  0;	  int    len    =    headers.size()    >    0?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
254	[BUG]  [BUGGY]  int  len  =  headers.size()  >  0?  headers.get(ch):  0;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  >  0?  headers.get(ch):  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  >  0?  headers.get(ch):  0;	  int    len    =    headers.size()    >    0?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
255	[BUG]  [BUGGY]  Double  len  =  headers.get(ch);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.get(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.get(ch);	  Double    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
256	[BUG]  [BUGGY]  Character  len  =  headers.values();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.values();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.values();	  Character    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
257	[BUG]  [BUGGY]  Character  len  =  headers.keySet();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.keySet();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.keySet();	  Character    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
258	[BUG]  [BUGGY]  float  len  =  globalPaxHeaders.getLength();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  float  len  =  globalPaxHeaders.getLength();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	float  len  =  globalPaxHeaders.getLength();	  int    len    =    globalPaxHeaders.getLength();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
259	[BUG]  [BUGGY]  Len  len  =  headers.get(ch);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.get(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.get(ch);	  Len    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
260	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.readInt(0);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.readInt(0);	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
261	[BUG]  [BUGGY]  Integer  i  =  headers.readInt(ch);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.readInt(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.readInt(ch);	  Integer    i    =    headers.readInt();    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
262	[BUG]  [BUGGY]  int  len  =(headers.size()  >  0)?  headers.get(ch):  -1;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  0)?  headers.get(ch):  -1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  0)?  headers.get(ch):  -1;	  int    len    =(headers.size()    >    0)?    headers.get(ch):    0;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
263	[BUG]  [BUGGY]  int  len  =(headers.size()  >  0)?  headers.getLimit()  :  0;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  >  0)?  headers.getLimit()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  >  0)?  headers.getLimit()  :  0;	  int    len    =(headers.size()    >    0)?    headers.getLength()    :    0;    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
264	[BUG]  [BUGGY]  Len  len  =  headers.values().size();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.values().size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.values().size();	  Len    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
265	[BUG]  [BUGGY]  int  len  =  headers.length  -  1L  +  1;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  1L  +  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  1L  +  1;	  int    len    =    headers.length    -    1L;    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
266	[BUG]  [BUGGY]  int  len  =  headers.indexOf('  ',  0L);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.indexOf('  ',  0L);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.indexOf('  ',  0L);	  int    len    =    headers.indexOf('    ',    0);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
267	[BUG]  [BUGGY]  Integer  len  =  headers.iterator().next();  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.iterator().next();	  Integer    len    =    headers.indexOf('    ');    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
268	[BUG]  [BUGGY]  int  len  =  headers.size  /  1;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size  /  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size  /  1;	  int    len    =    headers.length    /    1;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
269	[BUG]  [BUGGY]  double  len  =  globalPaxHeaders.length;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  double  len  =  globalPaxHeaders.length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	double  len  =  globalPaxHeaders.length;	  int    len    =    globalPaxHeaders.length;    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
270	[BUG]  [BUGGY]  final  String  len  =  headers.size();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  String  len  =  headers.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  String  len  =  headers.size();	  String    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
271	[BUG]  [BUGGY]  Len  len  =  headers.values().length;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Len  len  =  headers.values().length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Len  len  =  headers.values().length;	  Len    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
272	[BUG]  [BUGGY]  Character  len  =  headers.getLength(0);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.getLength(0);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.getLength(0);	  Character    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
273	[BUG]  [BUGGY]  Char  len  =  headers.toArray(new  String[headers.size()  ]);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.toArray(new  String[headers.size()  ]);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.toArray(new  String[headers.size()  ]);	  Char    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
274	[BUG]  [BUGGY]  Char  len  =  headers.toArray(new  String[remainders.size()  ]);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.toArray(new  String[remainders.size()  ]);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.toArray(new  String[remainders.size()  ]);	  Char    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
275	[BUG]  [BUGGY]  Char  len  =  headers.keySet().size();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.keySet().size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.keySet().size();	  Char    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
276	[BUG]  [BUGGY]  int  len  =(headers.size()  <  headers.size())?  headers.get(ch):  0;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  headers.size())?  headers.get(ch):  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  headers.size())?  headers.get(ch):  0;	  int    len    =(headers.size()    >    0)?    headers.get(ch):    0;    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
277	[BUG]  [BUGGY]  int  len  =(headers.size()!=  1)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()!=  1)?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()!=  1)?  headers.size()  :  0;	  int    len    =(headers.size()!=    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
278	[BUG]  [BUGGY]  int  len  =  headers.size()!=  0?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()!=  0?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()!=  0?  headers.size()  :  0;	  int    len    =(headers.size()!=    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
279	[BUG]  [BUGGY]  Character  len  =  headers.keySet().size();  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Character  len  =  headers.keySet().size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Character  len  =  headers.keySet().size();	  Character    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
280	[BUG]  [BUGGY]  double  len  =  headers.size();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  double  len  =  headers.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	double  len  =  headers.size();	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
281	[BUG]  [BUGGY]  Double  len  =  headers.getLength(ch);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.getLength(ch);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.getLength(ch);	  Double    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
282	[BUG]  [BUGGY]  final  int  numRecords  =  headers.size()  +  2;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  final  int  numRecords  =  headers.size()  +  2;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	final  int  numRecords  =  headers.size()  +  2;	  final    int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
283	[BUG]  [BUGGY]  int  len  =(headers.size()  <  SMALL_BUFFER_SIZE)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  SMALL_BUFFER_SIZE)?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  SMALL_BUFFER_SIZE)?  headers.size()  :  0;	  int    len    =(headers.size()    <    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
284	[BUG]  [BUGGY]  Integer  i  =  headers.values().size();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.values().size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.values().size();	  Integer    i    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
285	[BUG]  [BUGGY]  Integer  i  =  headers.keySet().size();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.keySet().size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.keySet().size();	  Integer    i    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
286	[BUG]  [BUGGY]  int  len  =(headers.size()  <  2)?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  2)?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  2)?  headers.size()  :  0;	  int    len    =(headers.size()    <    1)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
287	[BUG]  [BUGGY]  int  len  =(headers.size()  <  1?  headers.size()  :  0);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =(headers.size()  <  1?  headers.size()  :  0);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =(headers.size()  <  1?  headers.size()  :  0);	  int    len    =(headers.size()    <    1)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
288	[BUG]  [BUGGY]  Double  len  =  headers.values().size();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Double  len  =  headers.values().size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Double  len  =  headers.values().size();	  Double    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
289	[BUG]  [BUGGY]  int  len  =  headers.length  -  1  +  length  -  1;  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  1  +  length  -  1;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  1  +  length  -  1;	  int    len    =    headers.length    -    1    +    length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
290	[BUG]  [BUGGY]  int  len  =  headers.length  -  2  +  length;  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  2  +  length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  2  +  length;	  int    len    =    headers.length    -    1    +    length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
291	[BUG]  [BUGGY]  int  len  =  headers.length  -  1  +  this.blockSize;  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.length  -  1  +  this.blockSize;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.length  -  1  +  this.blockSize;	  int    len    =    headers.length    -    1    +    length;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
292	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.keySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.keySet().iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.keySet().iterator().next();	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
293	[BUG]  [BUGGY]  UnsupportedOperation  len  =  headers.values().length;  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  UnsupportedOperation  len  =  headers.values().length;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	UnsupportedOperation  len  =  headers.values().length;	  UnsupportedOperation    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
294	[BUG]  [BUGGY]  Char  len  =  headers.keySet().iterator().next();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.keySet().iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.keySet().iterator().next();	  Char    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
295	[BUG]  [BUGGY]  Char  len  =  headers.iterator().next();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Char  len  =  headers.iterator().next();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Char  len  =  headers.iterator().next();	  Char    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
296	[BUG]  [BUGGY]  int  len  =  headers.size()  >=  0?  headers.size()  :  0;  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  int  len  =  headers.size()  >=  0?  headers.size()  :  0;  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	int  len  =  headers.size()  >=  0?  headers.size()  :  0;	  int    len    =(headers.size()    >=    0)?    headers.size()    :    0;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
297	[BUG]  [BUGGY]  Integer  numRecords  =  headers.size();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  numRecords  =  headers.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  numRecords  =  headers.size();	  int    numRecords    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
298	[BUG]  [BUGGY]  len  =  headers.size();  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  len  =  headers.size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	len  =  headers.size();	  String    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
299	[BUG]  [BUGGY]  Integer  i  =  headers.get(globalPaxHeaders.indexOf(ch));  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  i  =  headers.get(globalPaxHeaders.indexOf(ch));  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  i  =  headers.get(globalPaxHeaders.indexOf(ch));	  Integer    i    =    headers.get(headers.size());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
300	[BUG]  [BUGGY]  Integer  len  =  headers.values().size();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.values().size();  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.values().size();	  Integer    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
301	[BUG]  [BUGGY]  Integer  len  =  headers.getLength(0);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      throws  IOException  {  final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;      [BUGGY]  Integer  len  =  headers.getLength(0);  [BUGGY]      int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream();  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	458	458	1	replace	Integer  len  =  headers.getLength(0);	  Integer    len    =    0;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
