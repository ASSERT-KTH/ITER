bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(512);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(128);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(128);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(128);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(512);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  2);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    -    1);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
4	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    -    1);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
5	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    -    1);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
6	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
7	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
8	[BUG]  [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
9	[BUG]  [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(ch);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(ch);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(ch);  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
10	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i.next());  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  String  keyword  =  headers.get(i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  String  keyword  =  headers.get(i.next());	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
11	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE,  read);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Len.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
12	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  +  read);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Len.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
13	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ByteArrayOutputStream.MAX_VALUE,  read);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ByteArrayOutputStream.MAX_VALUE,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ByteArrayOutputStream.MAX_VALUE,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Len.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
14	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  -  read);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Len.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
15	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE,  len);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Len.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
16	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  ch);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    len);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
17	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  -  read);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    len);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
18	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  restLen);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  restLen);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  restLen);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    len);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
19	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  *  len);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  *  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  *  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    len);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
20	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    len);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
21	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  read);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
22	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  len);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
23	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
24	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  read);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
25	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getEncoding());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getEncoding());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getEncoding());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
26	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  headers);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  headers);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
27	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  /  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  /  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  /  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
28	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
29	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  length  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  length  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  length  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  final  int  keywordLimit  =  coll.toString(CharsetNames.UTF_8)+  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keywordLimit  =  coll.toString(CharsetNames.UTF_8)+  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keywordLimit  =  coll.toString(CharsetNames.UTF_8)+  1;	  final    int    keywordLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
32	[BUG]  [BUGGY]  final  int  len  =  coll.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  coll.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  coll.toString(CharsetNames.UTF_8);	  final    int    keywordLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
33	[BUG]  [BUGGY]  final  int  keywordLimit  =  i.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keywordLimit  =  i.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keywordLimit  =  i.toString(CharsetNames.UTF_8);	  final    int    keywordLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
34	[BUG]  [BUGGY]  final  int  keywordLimit  =  coll.toString(CharsetNames.UTF_8)+  read;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keywordLimit  =  coll.toString(CharsetNames.UTF_8)+  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keywordLimit  =  coll.toString(CharsetNames.UTF_8)+  read;	  final    int    keywordLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
35	[BUG]  [BUGGY]  final  int  keywordLimit  =  coll.toString(CharsetNames.US_ASCII);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keywordLimit  =  coll.toString(CharsetNames.US_ASCII);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keywordLimit  =  coll.toString(CharsetNames.US_ASCII);	  final    int    keywordLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
36	[BUG]  [BUGGY]  final  int  keywordLimit  =  headers.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keywordLimit  =  headers.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keywordLimit  =  headers.toString(CharsetNames.UTF_8);	  final    int    keywordLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
37	[BUG]  [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  markLimit  =  coll.toString(CharsetNames.UTF_8);	  final    int    keywordLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
38	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
39	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  0);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  0);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
40	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  4);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  4);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
41	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
42	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
43	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  3);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  3);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  3);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
44	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  len);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
45	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  read);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    ch);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
48	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  ch);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    ch);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
49	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(4,  ch);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(4,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(4,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    ch);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
50	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  ch);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    ch);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
51	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.length  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.length  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.length  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    -    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
52	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(write,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
53	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(write);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
54	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  i.read);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    i.read);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
55	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i.in);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i.in);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i.in);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    i.read);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
56	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  i.read);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    i.read);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
57	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  i.read);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    i.read);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
58	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  read  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1L,    read);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
59	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  read  -  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  read  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1L,    read);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
60	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  0);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  0);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1L,    read);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
61	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0L,  read);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0L,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0L,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1L,    read);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
62	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(128,  read);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(128,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(128,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1L,    read);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
63	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  ch.read());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  ch.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  ch.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
64	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.read());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
65	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  ch);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
66	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
67	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  i.read());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  i.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
68	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  headers.size()  -  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  headers.size()  -  1;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
69	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  read;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  headers.size()  -  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  headers.size()  -  read;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
70	[BUG]  [BUGGY]  final  int  len  =  headers.size()  +  read;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  headers.size()  +  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  headers.size()  +  read;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
71	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  2;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  headers.size()  -  2;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  headers.size()  -  2;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  final  int  len  =  headers.size()  +  1;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  headers.size()  +  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  headers.size()  +  1;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
73	[BUG]  [BUGGY]  final  int  len  =  globalPaxHeaders.size();  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  globalPaxHeaders.size();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  globalPaxHeaders.size();	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
74	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  read);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(10,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
75	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  0);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  0);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(10,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(32,  0);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(32,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(32,  0);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(10,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
77	[BUG]  [BUGGY]  ch  =  i.read(remainders);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read(remainders);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read(remainders);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
78	[BUG]  [BUGGY]  ch  =  i.getValue();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.getValue();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.getValue();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
79	[BUG]  [BUGGY]  ch  =  i.in.read();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.in.read();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.in.read();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
80	[BUG]  [BUGGY]  ch  =  i.next();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.next();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.next();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
81	[BUG]  [BUGGY]  ch  =  headers.read();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  headers.read();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  headers.read();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
82	[BUG]  [BUGGY]  ch  =  i.read()  +  1;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read()  +  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read()  +  1;	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
83	[BUG]  [BUGGY]  final  int  len  =  headers.read();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  headers.read();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  headers.read();	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
84	[BUG]  [BUGGY]  final  int  len  =  globalPaxHeaders.read();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  globalPaxHeaders.read();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  globalPaxHeaders.read();	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
85	[BUG]  [BUGGY]  final  int  len  =  i.read(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.read(globalPaxHeaders);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.read(globalPaxHeaders);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
86	[BUG]  [BUGGY]  final  int  len  =  i.read(remainders);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.read(remainders);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.read(remainders);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
87	[BUG]  [BUGGY]  final  int  len  =  i.read(ch);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.read(ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.read(ch);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
88	[BUG]  [BUGGY]  final  int  len  =  i.readInt();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.readInt();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.readInt();	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
89	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1,    read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
90	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  read);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1,    read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
91	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read  -  1);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1,    read);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
92	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  len  -  read);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  len  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    +    len);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
93	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  2);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    +    len);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
94	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  ch);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    +    len);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
95	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  len,  read);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  len,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  len,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    +    len);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
96	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  1,  len);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  1,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  +  1,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    +    len);    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
97	[BUG]  [BUGGY]  while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
98	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	while((  ch  =  i.read())!=  -1)  {  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
99	[BUG]  [BUGGY]  while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
100	[BUG]  [BUGGY]  while((  ch  =  i.read())!=  -1)  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  while((  ch  =  i.read())!=  -1)  {  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	while((  ch  =  i.read())!=  -1)  {	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
101	[BUG]  [BUGGY]  while(i.hasNext())  {  if(len  <  =  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  while(i.hasNext())  {  if(len  <  =  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	while(i.hasNext())  {  if(len  <  =  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
102	[BUG]  [BUGGY]  read  =  headers.get(i.next());  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  read  =  headers.get(i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	read  =  headers.get(i.next());	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
103	[BUG]  [BUGGY]  while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.get(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.get(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
104	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
105	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
106	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  len);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  -  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
107	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  *  2);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  *  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  *  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
108	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
109	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
110	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  read);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
111	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  ch);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
112	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  headers.length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  headers.length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
113	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  len);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
114	[BUG]  [BUGGY]  headers.remove(i.next());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  headers.remove(i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	headers.remove(i.next());	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.remove(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
115	[BUG]  [BUGGY]  Headers.remove(headers.get(i));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  Headers.remove(headers.get(i));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	Headers.remove(headers.get(i));	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.remove(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
116	[BUG]  [BUGGY]  Headers.remove(headers.get(i.next()));  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  Headers.remove(headers.get(i.next()));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	Headers.remove(headers.get(i.next()));	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.remove(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
117	[BUG]  [BUGGY]  lungul(i.next())  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  lungul(i.next())  {  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	lungul(i.next())  {	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.remove(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
118	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
119	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
120	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  ch);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
121	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
122	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
123	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read,  len);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  read,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
124	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  read);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
125	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  i.read());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  i.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
126	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  -  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
127	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record.read());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
128	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.read());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
129	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(bytes.read());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(bytes.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(bytes.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
130	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
131	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1,  read);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
132	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  *  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
133	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1  +  read);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
134	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(long.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
135	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  Long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  Long.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
136	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(byte.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(byte.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(byte.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
137	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  length);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
138	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read,  ch);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
139	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  read);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
140	[BUG]  [BUGGY]  final  int  len  =  i.next();  headers.put(keyword,  len);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.next();  headers.put(keyword,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.next();  headers.put(keyword,  len);	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
141	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len);  }  else  {  headers.put(keyword,  len);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len);  }  else  {  headers.put(keyword,  len);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len);  }  else  {  headers.put(keyword,  len);  }	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
142	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len);  }  else  {  headers.put(keyword,  read);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len);  }  else  {  headers.put(keyword,  read);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len);  }  else  {  headers.put(keyword,  read);  }	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
143	[BUG]  [BUGGY]  final  int  len  =  i.getLastChild();  headers.put(keyword,  len);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.getLastChild();  headers.put(keyword,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.getLastChild();  headers.put(keyword,  len);	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
144	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len);  }  else  {  headers.remove(ch);  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len);  }  else  {  headers.remove(ch);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len);  }  else  {  headers.remove(ch);  }	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
145	[BUG]  [BUGGY]  final  int  keyword  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
146	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  keyword  =  i.next();  if(keyword  ==  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  keyword  =  i.next();  if(keyword  ==  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  keyword  =  i.next();  if(keyword  ==  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
147	[BUG]  [BUGGY]  final  int  keyword  =  i.next();  if(keyword  ==  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  i.next();  if(keyword  ==  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  i.next();  if(keyword  ==  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
148	[BUG]  [BUGGY]  final  int  keyword  =  i.next();  if(ch!='')  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  i.next();  if(ch!='')  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  i.next();  if(ch!='')  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
149	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L,  read);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256L);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
150	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
151	[BUG]  [BUGGY]  final  int  keyword  =  i.next();  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  i.next();  if(keyword!=  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  i.next();  if(keyword!=  null)  {  continue;  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
152	[BUG]  [BUGGY]  final  int  keyword  =  i.next();  if(keyword  ==  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  i.next();  if(keyword  ==  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  i.next();  if(keyword  ==  null)  {  continue;  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
153	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  keyword  =  i.next();  if(keyword  ==  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  keyword  =  i.next();  if(keyword  ==  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  keyword  =  i.next();  if(keyword  ==  null)  {  continue;  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
154	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1,  len);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  1,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
155	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  2);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
156	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  len  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
157	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
158	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  /  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  /  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  /  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
159	[BUG]  [BUGGY]  final  int  len  =  i.next();  if(len  >  0)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.next();  if(len  >  0)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.next();  if(len  >  0)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
160	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  0)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  0)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  0)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
161	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >=  len)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >=  len)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >=  len)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
162	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  ==  len)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  ==  len)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  if(len  ==  len)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
163	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  restLen)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  restLen)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  restLen)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
164	[BUG]  [BUGGY]  final  int  len  =  i.next();  if(len  ==  len)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.next();  if(len  ==  len)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.next();  if(len  ==  len)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
165	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len!=  len)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len!=  len)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  if(len!=  len)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
166	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
167	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  ch.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  ch.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  ch.length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
168	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  -  read);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
169	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.length,  ch);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.length,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers.length,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
170	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
171	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  +  read);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
172	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  *  2);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  *  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  *  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
173	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  0);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  0);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1,    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
174	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  2);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(2,  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1,    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
175	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
176	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
177	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  3);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  3);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  3);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    1);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
178	[BUG]  [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  String  keyword  =  coll.toString(CharsetNames.UTF_8);	  final    int    keyword    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
179	[BUG]  [BUGGY]  final  int  keyword  =  coll.toString(CharsetNames.UTF_8)+  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  coll.toString(CharsetNames.UTF_8)+  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  coll.toString(CharsetNames.UTF_8)+  1;	  final    int    keyword    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
180	[BUG]  [BUGGY]  final  int  keyword  =  i.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  i.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  i.toString(CharsetNames.UTF_8);	  final    int    keyword    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
181	[BUG]  [BUGGY]  final  int  keyword  =  headers.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  headers.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  headers.toString(CharsetNames.UTF_8);	  final    int    keyword    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
182	[BUG]  [BUGGY]  final  int  keyword  =  coll.toString(CharsetNames.UTF_8)+  read;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  coll.toString(CharsetNames.UTF_8)+  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  coll.toString(CharsetNames.UTF_8)+  read;	  final    int    keyword    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
183	[BUG]  [BUGGY]  final  int  keyword  =  coll.toString(CharsetNames.US_ASCII);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  coll.toString(CharsetNames.US_ASCII);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  coll.toString(CharsetNames.US_ASCII);	  final    int    keyword    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
184	[BUG]  [BUGGY]  final  int  keyword  =  col.toString(CharsetNames.UTF_8)+  1;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  col.toString(CharsetNames.UTF_8)+  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  col.toString(CharsetNames.UTF_8)+  1;	  final    int    keyword    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
185	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  ch);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
186	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers,  read);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
187	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(globalPaxHeaders,  ch);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(globalPaxHeaders,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(globalPaxHeaders,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
188	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  globalPaxHeaders);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  globalPaxHeaders);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
189	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  headers);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  headers);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
190	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  ch);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    +    read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
191	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  read,  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  +  read,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    +    read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
192	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  *  read);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  *  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch  *  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    +    read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
193	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  read);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    +    read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
194	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharset());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
195	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
196	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharsets());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharsets());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getCharsets());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
197	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getAverage());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getAverage());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getAverage());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
198	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
199	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  len);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
200	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
201	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  headers.length);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  headers.length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
202	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  ch);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
203	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
204	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
205	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
206	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
207	[BUG]  [BUGGY]  final  int  len  =  coll.length()  -  read;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  coll.length()  -  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  coll.length()  -  read;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
208	[BUG]  [BUGGY]  final  int  len  =  coll.length()  -  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  coll.length()  -  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  coll.length()  -  1;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
209	[BUG]  [BUGGY]  final  int  len  =  coll.length()  +  read;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  coll.length()  +  read;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  coll.length()  +  read;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
210	[BUG]  [BUGGY]  final  int  len  =  i.length();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.length();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.length();	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
211	[BUG]  [BUGGY]  final  int  len  =  coll.length()  +  1;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  coll.length()  +  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  coll.length()  +  1;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
212	[BUG]  [BUGGY]  final  int  len  =  headers.length();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  headers.length();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  headers.length();	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
213	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  read);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
214	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  -  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
215	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(255,  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(255,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(255,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
216	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  256);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  256);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  256);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
217	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  len  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
218	[BUG]  [BUGGY]  headers.add(i.next());  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  headers.add(i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	headers.add(i.next());	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
219	[BUG]  [BUGGY]  final  int  len  =  i.next();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.next();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.next();	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
220	[BUG]  [BUGGY]  Headers.add(headers,  i.next());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  Headers.add(headers,  i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	Headers.add(headers,  i.next());	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
221	[BUG]  [BUGGY]  Context.reportCodeChange();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  Context.reportCodeChange();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	Context.reportCodeChange();	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
222	[BUG]  [BUGGY]  read  =  i.next();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  read  =  i.next();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	read  =  i.next();	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
223	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
224	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  continue;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
225	[BUG]  [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  continue;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
226	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
227	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
228	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
229	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record,  len);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
230	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    ch);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
231	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch,  read);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    ch);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
232	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  +  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    ch);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
233	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  +  2);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  +  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  +  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    ch);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
234	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(255,  ch);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(255,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(255,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    ch);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
235	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    -    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
236	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
237	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
238	[BUG]  [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword  ==  null)  {  return  headers;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
239	[BUG]  [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null  ||  keyword.length()  ==  0)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null  ||  keyword.length()  ==  0)  {  return  headers;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  String  keyword  =  headers.get(i.next());  if(keyword!=  null  ||  keyword.length()  ==  0)  {  return  headers;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
240	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  len  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
241	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(16);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
242	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    i);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
243	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  i);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  i);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    i);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
244	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  i);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16,  i);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    i);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
245	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  i);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  i);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    i);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
246	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read,  len);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
247	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  *  read);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  *  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  *  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
248	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  256);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  256);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  -  256);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
249	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record.length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record.length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(record);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
250	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record,  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(record,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(record);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
251	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(record);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
252	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
253	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  *  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  *  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  *  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
254	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  3);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  3);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read  +  3);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read    +    1);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
255	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion()  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
256	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read  -  len);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  read  -  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    len);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
257	[BUG]  [BUGGY]  Headers.remove(headers.size()  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  Headers.remove(headers.size()  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	Headers.remove(headers.size()  -  1);	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.remove(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
258	[BUG]  [BUGGY]  final  int  keywordLimit  =  str.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keywordLimit  =  str.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keywordLimit  =  str.toString(CharsetNames.UTF_8);	  final    int    keywordLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
259	[BUG]  [BUGGY]  final  int  keywordLimit  =  col.toString(CharsetNames.UTF_8)+  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keywordLimit  =  col.toString(CharsetNames.UTF_8)+  1;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keywordLimit  =  col.toString(CharsetNames.UTF_8)+  1;	  final    int    keywordLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
260	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16  -  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(16  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(16);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
261	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256  -  read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
262	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L  *  read);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L  *  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256L  *  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
263	[BUG]  [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next()).toString();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next()).toString();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next()).toString();  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
264	[BUG]  [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next()  +  read);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next()  +  read);  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next()  +  read);  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
265	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  read  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  read  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  read  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
266	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
267	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  ch);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    ch);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
268	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    ch);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
269	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1,    1);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
270	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  len);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    len);    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
271	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L  +  read);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1L,    read);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
272	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1  -  read);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1L,    read);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
273	[BUG]  [BUGGY]  final  int  keyword  =  str.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  str.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  str.toString(CharsetNames.UTF_8);	  final    int    keyword    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
274	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  i);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1,  i);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    i);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
275	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
276	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  2);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  2);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  2);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
277	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  ch);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  read  +  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
278	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  i.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  i.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(headers,  i.length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
279	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    +    read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
280	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US  +  read);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    +    read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
281	[BUG]  [BUGGY]  Headers.add(headers.get(i.next()));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  Headers.add(headers.get(i.next()));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	Headers.add(headers.get(i.next()));	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
282	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
283	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read()  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
284	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.getLength();  headers.put(keyword,  len);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.getLength();  headers.put(keyword,  len);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.getLength();  headers.put(keyword,  len);  }	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
285	[BUG]  [BUGGY]  final  int  len  =  i.getNext();  headers.put(keyword,  len);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.getNext();  headers.put(keyword,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.getNext();  headers.put(keyword,  len);	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
286	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len  +  read);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len  +  read);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  len  +  read);  }	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
287	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  read);  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  read);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  headers.put(keyword,  read);  }	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
288	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  read  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  read  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  read  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
289	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  key  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  key  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  key  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
290	[BUG]  [BUGGY]  final  int  read  =  i.next();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  read  =  i.next();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  read  =  i.next();	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
291	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
292	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  headers);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  headers);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
293	[BUG]  [BUGGY]  read  +=  headers.get(i.next());  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  read  +=  headers.get(i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	read  +=  headers.get(i.next());	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
294	[BUG]  [BUGGY]  InputStream  is  =  headers.get(i.next());  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  InputStream  is  =  headers.get(i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	InputStream  is  =  headers.get(i.next());	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
295	[BUG]  [BUGGY]  headers.put(i.next(),  headers);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  headers.put(i.next(),  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	headers.put(i.next(),  headers);	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
296	[BUG]  [BUGGY]  Len  =  headers.get(i.next());  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  Len  =  headers.get(i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	Len  =  headers.get(i.next());	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
297	[BUG]  [BUGGY]  read  +=  headers.size();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  read  +=  headers.size();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	read  +=  headers.size();	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
298	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i.read  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i.read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  i.read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    i.read);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
299	[BUG]  [BUGGY]  final  int  read  =  headers.get(i.next());  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  read  =  headers.get(i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  read  =  headers.get(i.next());	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
300	[BUG]  [BUGGY]  final  int  ch  =  headers.get(i.next());  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  ch  =  headers.get(i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  ch  =  headers.get(i.next());	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
301	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  read  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
302	[BUG]  [BUGGY]  ch  =  i.read(globalPaxHeaders);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read(globalPaxHeaders);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read(globalPaxHeaders);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
303	[BUG]  [BUGGY]  ch  =  i.read(headers);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read(headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read(headers);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
304	[BUG]  [BUGGY]  ch  =  i.read(globalPaxHeaders,  headers);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read(globalPaxHeaders,  headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read(globalPaxHeaders,  headers);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
305	[BUG]  [BUGGY]  ch  =  i.read(globalPaxHeaders,  read);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read(globalPaxHeaders,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read(globalPaxHeaders,  read);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
306	[BUG]  [BUGGY]  ch  =  i.read(len);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read(len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read(len);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
307	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Integer.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Integer.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Integer.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
308	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(int.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
309	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Byte.MAX_VALUE,  read);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Byte.MAX_VALUE,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Byte.MAX_VALUE,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
310	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US,  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
311	[BUG]  [BUGGY]  final  int  len  =  globalPaxHeaders.length();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  globalPaxHeaders.length();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  globalPaxHeaders.length();	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
312	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len.length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len.length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Len.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
313	[BUG]  [BUGGY]  final  int  len  =  i.read(len);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.read(len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.read(len);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
314	[BUG]  [BUGGY]  final  int  len  =  i.read(headers);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.read(headers);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.read(headers);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
315	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
316	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Locale.US  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    -    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
317	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(size  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    -    1);    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
318	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
319	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  &  0xff);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  &  0xff);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read()  &  0xff);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
320	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  len);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
321	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Read.length  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    -    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
322	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  -  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    -    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
323	[BUG]  [BUGGY]  final  int  len  =  i.next();  if(len  >  len)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.next();  if(len  >  len)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.next();  if(len  >  len)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
324	[BUG]  [BUGGY]  final  int  len  =  i.next();  if(len  <  len)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.next();  if(len  <  len)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.next();  if(len  <  len)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
325	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  <  len)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  <  len)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  if(len  <  len)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
326	[BUG]  [BUGGY]  final  int  len  =  i.next();  if(len  >=  0)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.next();  if(len  >=  0)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.next();  if(len  >=  0)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
327	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  *  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  *  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  *  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    +    1);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
328	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.next);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.next);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.next);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
329	[BUG]  [BUGGY]  final  int  read  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  read  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  read  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
330	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
331	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0L);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0L);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  0L);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
332	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  16);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  16);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  16);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
333	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  read  =  i.next();  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  read  =  i.next();  if(keyword!=  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  read  =  i.next();  if(keyword!=  null)  {  continue;  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
334	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  512);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  512);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512,  512);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(512);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
335	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1,  read  -  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1,  read  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  1,  read  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    1);    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
336	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  0);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  0);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
337	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  0);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  0);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
338	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read,  0);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
339	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  0);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in,  0);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    0);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
340	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
341	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
342	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Length.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Length.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Length.MAX_VALUE);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
343	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  i.read);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    read);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
344	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  i.read());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  i.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    i.read());    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
345	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  -  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.length  -  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
346	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  headers.length);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  headers.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  headers.length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers.length);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
347	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.remove();  headers.put(keyword,  len);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.remove();  headers.put(keyword,  len);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.remove();  headers.put(keyword,  len);  }	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
348	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.getLastChild();  headers.put(keyword,  len);  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.getLastChild();  headers.put(keyword,  len);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.getLastChild();  headers.put(keyword,  len);  }	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
349	[BUG]  [BUGGY]  Headers.put(keyword,  i.next());  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  Headers.put(keyword,  i.next());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	Headers.put(keyword,  i.next());	  if(i.hasNext())    {    final    int    len    =    i.next();    headers.put(keyword,    len);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
350	[BUG]  [BUGGY]  final  int  keywordLimit  =  i.toString();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keywordLimit  =  i.toString();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keywordLimit  =  i.toString();	  final    int    keywordLimit    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
351	[BUG]  [BUGGY]  while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.next());  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.remove(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
352	[BUG]  [BUGGY]  if(headers.contains(ch))  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.next());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.contains(ch))  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.contains(ch))  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.remove(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
353	[BUG]  [BUGGY]  if(headers.size()  ==  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.next());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.size()  ==  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.size()  ==  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.remove(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
354	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.getKeyword());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.remove(i.getKeyword());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.remove(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
355	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.get(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.get(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.remove(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
356	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  i.read);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  read  -  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    len);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
357	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  read  -  len);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  read  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  read  -  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    len);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
358	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch  -  len);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch  -  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch  -  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    read    -    len);    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
359	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.size()  >  0)  {  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.size()  >  0)  {  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
360	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.size()  >  0)  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.size()  >  0)  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
361	[BUG]  [BUGGY]  final  int  ch  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  ch  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  ch  =  headers.get(i.next());  if(keyword!=  null)  {  continue;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
362	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(10,    0);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
363	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
364	[BUG]  [BUGGY]  if(headers.size()  ==  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.size()  ==  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.size()  ==  len)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
365	[BUG]  [BUGGY]  if(headers.size()  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.size()  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.size()  ==  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  return  headers.get(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
366	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  read;  ++i)  {  return  headers.get(i.next());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  read;  ++i)  {  return  headers.get(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  read;  ++i)  {  return  headers.get(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    return    headers.get(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
367	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  i.read());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.read(),  i.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read());    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
368	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512  -  read);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512  -  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(512  -  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256    -    read);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
369	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
370	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(read,  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
371	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len,  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(read,    len);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
372	[BUG]  [BUGGY]  final  int  i  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  i  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  i  =  i.next();  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
373	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  SMALL_BUFFER_SIZE)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  SMALL_BUFFER_SIZE)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  SMALL_BUFFER_SIZE)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
374	[BUG]  [BUGGY]  final  int  len  =  i.next();  if(len  >  SMALL_BUFFER_SIZE)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.next();  if(len  >  SMALL_BUFFER_SIZE)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.next();  if(len  >  SMALL_BUFFER_SIZE)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
375	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  3)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  3)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  3)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
376	[BUG]  [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  6)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  6)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  int  len  =  i.next();  if(len  >  6)  {  continue;  }	  if(i.hasNext())    {    final    int    len    =    i.next();    if(len    >    len)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
377	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(32);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(32);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(32);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(16);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
378	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  4);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  4);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
379	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length    -    1);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
380	[BUG]  [BUGGY]  final  int  len  =  coll.length()  -  2;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  coll.length()  -  2;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  coll.length()  -  2;	  final    int    len    =    coll.length();    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
381	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  len);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  len);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
382	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  16);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  16);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  16);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
383	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Long.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
384	[BUG]  [BUGGY]  final  int  len  =  headers.size()  -  4;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  headers.size()  -  4;  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  headers.size()  -  4;	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
385	[BUG]  [BUGGY]  final  int  len  =  headers.getLength();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  headers.getLength();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  headers.getLength();	  final    int    len    =    headers.size();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
386	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.read);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
387	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.getCharsetNames());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.getCharsetNames());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.getCharsetNames());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
388	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.getVersion());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.getVersion());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.getVersion(),  i.getVersion());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.getVersion());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
389	[BUG]  [BUGGY]  final  int  keyword  =  i.toString();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  keyword  =  i.toString();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  keyword  =  i.toString();	  final    int    keyword    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
390	[BUG]  [BUGGY]  final  char  keyword  =  coll.toString(CharsetNames.UTF_8);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  char  keyword  =  coll.toString(CharsetNames.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  char  keyword  =  coll.toString(CharsetNames.UTF_8);	  final    int    keyword    =    coll.toString(CharsetNames.UTF_8);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
391	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  ch  +  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  ch  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Long.MAX_VALUE,  ch  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    +    read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
392	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len  +  read);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len  +  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len  +  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch    +    read);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
393	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  i.read);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  -  read,  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    -    read);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
394	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(10);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(8);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
395	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
396	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  i);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  i);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
397	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
398	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  i.read);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    read);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
399	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch  -  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(0,  ch  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    ch);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
400	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  ch);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  ch);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  ch);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(0,    ch);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
401	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  i);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(1L,  i);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1L,    read);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
402	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(3L,  read);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(3L,  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(3L,  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(1L,    read);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
403	[BUG]  [BUGGY]  ch  =  i.read(Long.parseLong(keyword));  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read(Long.parseLong(keyword));  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read(Long.parseLong(keyword));	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
404	[BUG]  [BUGGY]  ch  =  i.read(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read(Long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read(Long.MAX_VALUE);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
405	[BUG]  [BUGGY]  ch  =  i.read(Long.MIN_VALUE);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read(Long.MIN_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read(Long.MIN_VALUE);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
406	[BUG]  [BUGGY]  ch  =  i.read(blockSize);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.read(blockSize);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.read(blockSize);	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
407	[BUG]  [BUGGY]  ch  =  i.seek();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  ch  =  i.seek();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	ch  =  i.seek();	  ch    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
408	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.size()  >  0)  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.size()  >  0)  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
409	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.size()  >  0)  {  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.size()  >  0)  {  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers.get(keyword);  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers.get(keyword);    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
410	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  read);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  /  read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
411	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  4);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  4);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(len  +  4);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(len    +    read);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
412	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.size()  >  0)  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.size()  >  0)  {  final  String  keyword  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
413	[BUG]  [BUGGY]  final  int  ch  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  ch  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  ch  =  headers.get(i.next());  if(keyword!=  null)  {  return  headers;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
414	[BUG]  [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next()).toString();  if(keyword!=  null)  {  return  headers;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next()).toString();  if(keyword!=  null)  {  return  headers;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  final  String  keyword  =  headers.get(i.next()).toString();  if(keyword!=  null)  {  return  headers;  }	  if(i.hasNext())    {    final    String    keyword    =    headers.get(i.next());    if(keyword!=    null)    {    return    headers;    }    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
415	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  charsetLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  charsetLen);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  charsetLen);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
416	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  chars.length);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  chars.length);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  chars.length);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    len);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
417	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Lens.UTF_8);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Lens.UTF_8);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Lens.UTF_8);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
418	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  i.read);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  i.read);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(length,  i.read);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(length,    read);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
419	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readInt());  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readInt());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readInt());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
420	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.in);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.in);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.in);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
421	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readBytes());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readBytes());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(i.readBytes());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(i.read);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
422	[BUG]  [BUGGY]  while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.add(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	while(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.add(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
423	[BUG]  [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.add(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(headers.size()  >  0)  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.add(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
424	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  read;  ++i)  {  headers.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  read;  ++i)  {  headers.add(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  read;  ++i)  {  headers.add(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
425	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.add(i.getKeyword());  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.add(i.getKeyword());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  for(int  i  =  0;  i  <  len;  ++i)  {  headers.add(i.getKeyword());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
426	[BUG]  [BUGGY]  if(i.hasNext())  {  for(int  i  =  read;  i  <  len;  ++i)  {  headers.add(i.next());  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  if(i.hasNext())  {  for(int  i  =  read;  i  <  len;  ++i)  {  headers.add(i.next());  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	if(i.hasNext())  {  for(int  i  =  read;  i  <  len;  ++i)  {  headers.add(i.next());  }	  if(i.hasNext())    {    for(int    i    =    0;    i    <    len;    ++i)    {    headers.add(i.next());    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
427	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch,  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch,  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(256,  ch,  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(256,    ch);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
428	[BUG]  [BUGGY]  final  int  i  =  i.next();  if(keyword!=  null)  {  continue;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  i  =  i.next();  if(keyword!=  null)  {  continue;  }  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  i  =  i.next();  if(keyword!=  null)  {  continue;  }	  if(i.hasNext())    {    final    int    keyword    =    i.next();    if(keyword!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
429	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  i.read());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  i.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  i.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
430	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  in.read());  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  in.read());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(in.read(),  in.read());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(in.read());    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
431	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.size());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.size());  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers.size());	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
432	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers,  i);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers,  i);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(ch,  headers,  i);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(ch,    headers);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
433	[BUG]  [BUGGY]  final  int  len  =  i.read(Long.MAX_VALUE);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.read(Long.MAX_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.read(Long.MAX_VALUE);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
434	[BUG]  [BUGGY]  final  int  len  =  i.getLength();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.getLength();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.getLength();	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
435	[BUG]  [BUGGY]  final  int  len  =  i.getHeaderLength();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.getHeaderLength();  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.getHeaderLength();	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
436	[BUG]  [BUGGY]  final  int  len  =  i.read(Long.MIN_VALUE);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.read(Long.MIN_VALUE);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.read(Long.MIN_VALUE);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
437	[BUG]  [BUGGY]  final  int  len  =  i.read(data);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  int  len  =  i.read(data);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  int  len  =  i.read(data);	  final    int    len    =    i.read();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
438	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  +  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  +  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Len.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
439	[BUG]  [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  -  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      final  Map<String,  String>  headers  =  new  HashMap<String,  String>(globalPaxHeaders);  while(true){  //  get  length  int  ch;  int  len  =  0;  int  read  =  0;  while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '  '){        [BUGGY]  final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  -  1);  [BUGGY]      while((ch  =  i.read())  !=  -1)  {  read++;  if  (ch  ==  '='){  //  end  of  keyword  final  String  keyword  =  coll.toString(CharsetNames.UTF_8);  final  int  restLen  =  len  -  read;  if  (restLen  ==  1)  {  //  only  NL  headers.remove(keyword);  }  else  {  final  byte[]  rest  =  new  byte[restLen];  [CLASS]  TarArchiveInputStream  [METHOD]  parsePaxHeaders  [RETURN_TYPE]  Map  InputStream  i  [VARIABLES]  byte[]  SMALL_BUF  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  keyword  value  ByteArrayOutputStream  coll  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  read  readNow  recordSize  restLen  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.35355339059327373	464	464	1	replace	final  ByteArrayOutputStream  coll  =  new  ByteArrayOutputStream(Len.MAX_VALUE  -  1);	  final    ByteArrayOutputStream    coll    =    new    ByteArrayOutputStream(Len.MAX_VALUE);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
