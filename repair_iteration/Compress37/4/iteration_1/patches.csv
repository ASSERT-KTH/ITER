bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
2	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
3	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
7	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
8	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
9	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
10	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  hasHitEOF)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
14	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
15	[BUG]  [BUGGY]  if(isVersion()  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isVersion()  ||  isDirectory())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isVersion()  ||  isDirectory())  {	  if(isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
16	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isVersion())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isVersion())  {	  if(isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
17	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isVersion()  ||  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  hasHitEOF)  {	  if(isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
18	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
19	[BUG]  [BUGGY]  if(!isDirectory()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  ||  isVersion())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isVersion())  {	  if(isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
20	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {	  if(!isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
21	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class))  {	  if(!isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
22	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
23	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
24	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
25	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
26	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
27	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  Integer  entrySize  =  getEntrySize();  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entrySize  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
31	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entrySize  =  getEntrySize();  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entrySize  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entryOffset  =  getEntryOffset();  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entryOffset  =  getEntrySize();  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  Integer  entryOffset  =  getEntrySize();  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  Integer  entryOffset  =  getEntryOffset();  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntryOffset();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset(entry);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entryOffset  =  getEntryOffset(entry);  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset(entry);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
38	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
39	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
40	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
43	[BUG]  [BUGGY]  if(!isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  ||  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  hasHitEOF)  {	  if(isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isDirectory())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isDirectory())  {	  if(isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
47	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
48	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
49	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
50	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
51	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isDirectory())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.class)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
52	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
53	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
54	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
55	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
56	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
57	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
58	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
59	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
60	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
61	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
62	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
63	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
64	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
65	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
66	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
67	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isDirectory())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory())  {	  if(isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
71	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isVersion())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isVersion())  {	  if(isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
72	[BUG]  [BUGGY]  if(!isDirectory()  &&  isVersion())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  &&  isVersion())  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isVersion())  {	  if(isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
73	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
74	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  long  entryOffset  =  getEntrySize();  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
76	[BUG]  [BUGGY]  long  entrySize  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  long  entrySize  =  getEntrySize();  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entrySize  =  getEntrySize();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
77	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize().length;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entryOffset  =  getEntrySize().length;  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntrySize().length;	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
78	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
81	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
82	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
83	[BUG]  [BUGGY]  if(!isDirectory()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  &&  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  hasHitEOF)  {	  if(isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
84	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
85	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
86	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
87	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
88	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
89	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
90	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
91	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
92	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
93	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
94	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
95	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
96	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
97	[BUG]  [BUGGY]  long  entryOffset  =  System.currentTimeMillis();  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  long  entryOffset  =  System.currentTimeMillis();  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  System.currentTimeMillis();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
98	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  int  entryOffset  =  getEntryLength();  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryLength();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
99	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(!isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
100	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(!isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
101	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(!isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
102	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEncoding)  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEncoding)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  ||  isEncoding)  {	  if(isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
103	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
104	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
105	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
106	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEncoding)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  isEncoding)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEncoding)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
107	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(!hasHitEOF  &&  hasHitEOF)  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  hasHitEOF)  {	  if(!hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
108	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class,  true))  {  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class,  true))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.class,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
109	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE))  {  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException    [CONTEXT]    public  int  available()  throws  IOException  {    [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE))  {  [BUGGY]    return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
