bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
2	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
3	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
4	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
5	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
6	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
7	[BUG]  [BUGGY]  if(!isVersion()  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isVersion()  &&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isVersion()  &&  isDirectory())  {	  if(!isDirectory()    &&    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
8	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isVersion())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isVersion())  {	  if(!isDirectory()    &&    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
9	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.NULL_VALUE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.NULL_VALUE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
10	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
11	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
12	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.NULL_VALUE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.NULL_VALUE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.NULL_VALUE)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
13	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.MAX_VALUE))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.MAX_VALUE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.MAX_VALUE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
14	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
15	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
16	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  2))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  2))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  2))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
17	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
18	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(!isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
19	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {	  if(!isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
20	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.class))  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
21	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||!isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||!isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.class)||!isDirectory())  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
22	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
23	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
24	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
25	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
26	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.UTF8)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.UTF8)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.UTF8)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
27	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
28	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
29	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.class))  {	  if(!isDirectory()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
30	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
31	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
32	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
33	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
34	[BUG]  [BUGGY]  if(isHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
35	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
36	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(!hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
37	[BUG]  [BUGGY]  if(!isEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
38	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
39	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
40	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize().length  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize().length  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntrySize().length  -  1;	  int    entryOffset    =    getEntrySize().length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
41	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize().length  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize().length  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntrySize().length  +  1;	  int    entryOffset    =    getEntrySize().length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
42	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize().length;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntrySize().length;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getEntrySize().length;	  int    entryOffset    =    getEntrySize().length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
43	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize().length  -  2;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize().length  -  2;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntrySize().length  -  2;	  int    entryOffset    =    getEntrySize().length;    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
44	[BUG]  [BUGGY]  if(hasHitEOF  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
45	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
46	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
47	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
48	[BUG]  [BUGGY]  int  entrySize  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntryOffset();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entrySize  =  getEntryOffset();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
49	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entrySize  =  getEntrySize()  +  1;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
50	[BUG]  [BUGGY]  int  entrySize  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntrySize()  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entrySize  =  getEntrySize()  -  1;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
51	[BUG]  [BUGGY]  int  entrySize  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  this.currEntry.getEntrySize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entrySize  =  this.currEntry.getEntrySize();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
52	[BUG]  [BUGGY]  int  entrySize  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getRecordSize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entrySize  =  getRecordSize();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
53	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
54	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
55	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
56	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
57	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
58	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
59	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT,  true))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
60	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.USE_DEFAULT)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.USE_DEFAULT)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.USE_DEFAULT)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
61	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
62	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
63	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
64	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
65	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isVersion()  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isVersion()  ||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isVersion()  ||  isDirectory())  {	  if(isVersion()    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
66	[BUG]  [BUGGY]  if(isVersion()  ||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isVersion()  ||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isVersion()  ||  isDirectory()  ||  hasHitEOF)  {	  if(isVersion()    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
67	[BUG]  [BUGGY]  if(isVersion()  ||  isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isVersion()  ||  isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isVersion()  ||  isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {	  if(isVersion()    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
68	[BUG]  [BUGGY]  if(isRecordSize()  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isRecordSize()  ||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isRecordSize()  ||  isDirectory())  {	  if(isVersion()    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
69	[BUG]  [BUGGY]  if(!isVersion()  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isVersion()  ||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isVersion()  ||  isDirectory())  {	  if(isVersion()    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
70	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
71	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
72	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
73	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  available))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  available))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  available))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
74	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  available()))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  available()))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  available()))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
75	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
76	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
77	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
78	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
79	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
81	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
82	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
83	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
84	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
85	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
86	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
87	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
88	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
89	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
90	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
91	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
92	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
93	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
94	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TITLE_FONT)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TITLE_FONT)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TITLE_FONT)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
95	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.class)||  isDirectory()  ||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
96	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
97	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  2))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  2))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  2))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
98	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
99	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
100	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
101	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
102	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
103	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
104	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
105	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
106	[BUG]  [BUGGY]  long  entrySize  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntryOffset();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entrySize  =  getEntryOffset();	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
107	[BUG]  [BUGGY]  long  entrySize  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntrySize()  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entrySize  =  getEntrySize()  +  1;	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
108	[BUG]  [BUGGY]  long  entrySize  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  this.currEntry.getEntrySize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entrySize  =  this.currEntry.getEntrySize();	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
109	[BUG]  [BUGGY]  long  entrySize  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntrySize()  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entrySize  =  getEntrySize()  -  1;	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
110	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
111	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
112	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
113	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
114	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
115	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
116	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
117	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
118	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)&&  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
119	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(ArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(ArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(ArchiveEntry.class)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
120	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TAR_BUFFER_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TAR_BUFFER_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TAR_BUFFER_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
121	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
122	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
123	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
124	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
125	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
126	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
127	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
128	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
129	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
130	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
131	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
132	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntrySize()  +  1;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
133	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntrySize()  -  1;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
134	[BUG]  [BUGGY]  int  entryOffset  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getRecordSize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getRecordSize();	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
135	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
136	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
137	[BUG]  [BUGGY]  if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(!isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
138	[BUG]  [BUGGY]  if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(!isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
139	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
140	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
141	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
142	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
143	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_SIZE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_SIZE)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
144	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
145	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
146	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
147	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
148	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize()  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entrySize  =  getEntrySize()  +  1;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
149	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize()  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entrySize  =  getEntrySize()  -  1;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
150	[BUG]  [BUGGY]  Integer  entrySize  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntryOffset();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entrySize  =  getEntryOffset();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
151	[BUG]  [BUGGY]  Integer  entrySize  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  this.currEntry.getEntrySize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entrySize  =  this.currEntry.getEntrySize();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
152	[BUG]  [BUGGY]  Integer  entrySize  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getRecordSize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entrySize  =  getRecordSize();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
153	[BUG]  [BUGGY]  Integer  entrySize  =  getEntry().length;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntry().length;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entrySize  =  getEntry().length;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
154	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
155	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)||  isDirectory())  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
156	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)&&  isDirectory())  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
157	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UTF8))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UTF8))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UTF8))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
158	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
159	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
160	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
161	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
162	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
163	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
164	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
165	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
166	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
167	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
168	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
169	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
170	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
171	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
172	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
173	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
174	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
175	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
176	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
177	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
178	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
179	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
180	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX,  true))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
181	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
182	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
183	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
184	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
185	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
186	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
187	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
188	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
189	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  available()))  {  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  available()))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  available()))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
190	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {	  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
191	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory()  ||  hasHitEOF)  {	  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
192	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory()  &&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory()  &&  hasHitEOF)  {	  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
193	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isDirectory())  {	  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
194	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {	  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
195	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE  ||  isDirectory()))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE  ||  isDirectory()))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE  ||  isDirectory()))  {	  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
196	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntryOffset()  +  1;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
197	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntryOffset()  -  1;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
198	[BUG]  [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntryOffset();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntryOffset();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  this.currEntry.getEntryOffset();	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
199	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset(0);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset(0);  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntryOffset(0);	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
200	[BUG]  [BUGGY]  Long  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Long  entryOffset  =  getEntryOffset();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Long  entryOffset  =  getEntryOffset();	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
201	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  2;  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset()  -  2;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntryOffset()  -  2;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
202	[BUG]  [BUGGY]  long  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntryLength();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getEntryLength();	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
203	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength()  +  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryLength()  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryLength()  +  1;	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
204	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength()  -  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryLength()  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryLength()  -  1;	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
205	[BUG]  [BUGGY]  int  entryOffset  =  getEntryCount();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryCount();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryCount();	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
206	[BUG]  [BUGGY]  int  entryOffset  =  getEntryStart();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryStart();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryStart();	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
207	[BUG]  [BUGGY]  int  entryOffset  =  getEntryLength()  -  2;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryLength()  -  2;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryLength()  -  2;	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
208	[BUG]  [BUGGY]  if(!hasHitEOF  &&  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  zipEncoding)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  zipEncoding)  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
209	[BUG]  [BUGGY]  if(isEncoding  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEncoding  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEncoding  ||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
210	[BUG]  [BUGGY]  if(isEncoding  &&!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEncoding  &&!hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEncoding  &&!hasHitEOF)  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
211	[BUG]  [BUGGY]  if(!hasHitEOF  &&  zipEncoding.length()  >  0)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  zipEncoding.length()  >  0)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  zipEncoding.length()  >  0)  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
212	[BUG]  [BUGGY]  if(!hasHitEOF  &&  zipEncoding.equals(encoding))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  zipEncoding.equals(encoding))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  zipEncoding.equals(encoding))  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
213	[BUG]  [BUGGY]  if(!hasHitEOF  &&  zipEncoding.equals(this.zipEncoding))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  zipEncoding.equals(this.zipEncoding))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  zipEncoding.equals(this.zipEncoding))  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
214	[BUG]  [BUGGY]  if(isEncoding  ||  isHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEncoding  ||  isHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEncoding  ||  isHitEOF)  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
215	[BUG]  [BUGGY]  long  entryOffset  =  getEntryOffset();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntryOffset();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getEntryOffset();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
216	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  +  1;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset()  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset()  +  1;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
217	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  -  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset()  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset()  -  1;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
218	[BUG]  [BUGGY]  int  entryOffset  =  this.currEntry.getEntryOffset();  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  this.currEntry.getEntryOffset();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  this.currEntry.getEntryOffset();	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
219	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset()  -  2;  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset()  -  2;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset()  -  2;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
220	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset().length;  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset().length;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset().length;	  int    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
221	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
222	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES  ||  hasHitEOF))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
223	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
224	[BUG]  [BUGGY]  if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
225	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class,  false))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.class,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class,    true))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
226	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.class,  true))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.class,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.class,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class,    true))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
227	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class,  true)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class,  true)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.class,  true)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class,    true))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
228	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class,  true)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class,  true)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.class,  true)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class,    true))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
229	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class,  true))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class,    true))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
230	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.class)&&  isDirectory())  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
231	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY,  true))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
232	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
233	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
234	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
235	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
236	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(!isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
237	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntrySize()  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getEntrySize()  +  1;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
238	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntrySize()  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getEntrySize()  -  1;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
239	[BUG]  [BUGGY]  long  entryOffset  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getRecordSize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getRecordSize();	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
240	[BUG]  [BUGGY]  long  entryOffset  =  getEntryStart();  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntryStart();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getEntryStart();	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
241	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
242	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
243	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
244	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
245	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
246	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
247	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
248	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
249	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
250	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
251	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
252	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
253	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX,  true))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
254	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
255	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
256	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX,  false))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
257	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
258	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
259	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
260	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
261	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
262	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
263	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
264	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE,  true))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
265	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
266	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.SOURCE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.SOURCE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.SOURCE)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
267	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_INT))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_INT))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_INT))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
268	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.SOURCE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.SOURCE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.SOURCE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
269	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE,  available()))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE,  available()))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE,  available()))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
270	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8))  {	  if(!isDirectory()    &&    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
271	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)&&!isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)&&!isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)&&!isDirectory())  {	  if(!isDirectory()    &&    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
272	[BUG]  [BUGGY]  if(!isDirectory()  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
273	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
274	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  true))  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
275	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
276	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
277	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
278	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
279	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
280	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
281	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
282	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
283	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
284	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
285	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
286	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
287	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
288	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UNINITIALIZER)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UNINITIALIZER)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UNINITIALIZER)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
289	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER,  true))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
290	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.UNINITIALIZER))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.UNINITIALIZER))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.UNINITIALIZER))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
291	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
292	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isDirectory())  {	  if(hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
293	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
294	[BUG]  [BUGGY]  if(getHitEOF()  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getHitEOF()  ||  isDirectory())  {	  if(hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
295	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isDirectory()  ||  hasHitEOF)  {	  if(hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
296	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(!isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
297	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isRecordSize())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isRecordSize())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isRecordSize())  {	  if(isDirectory()    ||    isVersion()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
298	[BUG]  [BUGGY]  if(isVersion()  ||  isDirectory()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isVersion()  ||  isDirectory()  ||  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isVersion()  ||  isDirectory()  ||  isVersion())  {	  if(isDirectory()    ||    isVersion()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
299	[BUG]  [BUGGY]  if(!isDirectory()  ||  isVersion()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isVersion()  ||  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isVersion()  ||  isVersion())  {	  if(isDirectory()    ||    isVersion()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
300	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEncoding)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEncoding)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEncoding)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
301	[BUG]  [BUGGY]  if(isDirectory()  ||  isEncoding  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEncoding  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEncoding  ||  hasHitEOF)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
302	[BUG]  [BUGGY]  if(isEncoding()  ||  hasHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEncoding()  ||  hasHitEOF  ||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEncoding()  ||  hasHitEOF  ||  isDirectory())  {	  if(isDirectory()    ||    hasHitEOF    ||    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
303	[BUG]  [BUGGY]  if(isDirectory()  ||  zipEncoding  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  zipEncoding  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  zipEncoding  ||  hasHitEOF)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
304	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  zipEncoding)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  zipEncoding)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  ||  zipEncoding)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
305	[BUG]  [BUGGY]  if(!isDirectory()  ||  hasHitEOF  ||  isEncoding)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  hasHitEOF  ||  isEncoding)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  hasHitEOF  ||  isEncoding)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
306	[BUG]  [BUGGY]  if(isDir()  ||  hasHitEOF  ||  isEncoding)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  hasHitEOF  ||  isEncoding)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  hasHitEOF  ||  isEncoding)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
307	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
308	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(!isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
309	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
310	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
311	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
312	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.BLOCK_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.BLOCK_SIZE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.BLOCK_SIZE)||  isDirectory())  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
313	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.BLOCK_SIZE)||!isDirectory())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.BLOCK_SIZE)||!isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.BLOCK_SIZE)||!isDirectory())  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
314	[BUG]  [BUGGY]  if(isVersion()  ||!isDirectory())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isVersion()  ||!isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isVersion()  ||!isDirectory())  {	  if(!isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
315	[BUG]  [BUGGY]  if(isDirty()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirty()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirty()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(!isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
316	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
317	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
318	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
319	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(!hasHitEOF    &&    isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
320	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {	  if(!hasHitEOF    &&    isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
321	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(!hasHitEOF    &&    isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
322	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {	  if(!hasHitEOF    &&    isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
323	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
324	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
325	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
326	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
327	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
328	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
329	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
330	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
331	[BUG]  [BUGGY]  if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
332	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE)||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE)||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE)||  isDirectory()  ||  hasHitEOF)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
333	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
334	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
335	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
336	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
337	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
338	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
339	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
340	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
341	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
342	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
343	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
344	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
345	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
346	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
347	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
348	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
349	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
350	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
351	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
352	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
353	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.class)||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
354	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isDirectory())  {	  if(isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
355	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
356	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
357	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
358	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
359	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
360	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
361	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
362	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
363	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
364	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
365	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  false))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
366	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
367	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_VERSION))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_VERSION))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_VERSION))  {	  if(isDirectory()    ||    isVersion()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
368	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.SHORT_DESCRIPTION))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.SHORT_DESCRIPTION))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.SHORT_DESCRIPTION))  {	  if(isDirectory()    ||    isVersion()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
369	[BUG]  [BUGGY]  if(!isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    isVersion()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
370	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.SOURCE))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.SOURCE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.SOURCE))  {	  if(isDirectory()    ||    isVersion()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
371	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.SHORT_DESCENDING))  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.SHORT_DESCENDING))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.SHORT_DESCENDING))  {	  if(isDirectory()    ||    isVersion()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
372	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class)||  isDirectory())  {	  if(isEnabled(TarArchiveEntry.class)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
373	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isDirectory()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.class)||  isDirectory()  &&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.class)||  isDirectory()  &&  hasHitEOF)  {	  if(isEnabled(TarArchiveEntry.class)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
374	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.class)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.class)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.class)&&  isDirectory())  {	  if(isEnabled(TarArchiveEntry.class)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
375	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
376	[BUG]  [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  hasHitEOF)  {	  if(!hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
377	[BUG]  [BUGGY]  if(!hasHitEOF  &&  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
378	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
379	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
380	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
381	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
382	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isDirectory())  {	  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
383	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory()  ||  hasHitEOF)  {	  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
384	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory()  &&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory()  &&  hasHitEOF)  {	  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
385	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory())  {	  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
386	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isDirectory())  {	  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
387	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isVersion())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isVersion())  {	  if(!hasHitEOF    &&    isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
388	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isDirectory()  ||  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isDirectory()  ||  isVersion())  {	  if(!hasHitEOF    &&    isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
389	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  isDirectory()  ||  isVersion())  {	  if(!hasHitEOF    &&    isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
390	[BUG]  [BUGGY]  if(hasHitEOF  &&  isDirectory()  &&  isVersion())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isDirectory()  &&  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isDirectory()  &&  isVersion())  {	  if(!hasHitEOF    &&    isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
391	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
392	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE,  true))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
393	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
394	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
395	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TYPE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TYPE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_TYPE)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
396	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE,  false))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
397	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
398	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  +  1;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntrySize()  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntrySize()  +  1;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
399	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  1;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntrySize()  -  1;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
400	[BUG]  [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  this.currEntry.getEntrySize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  this.currEntry.getEntrySize();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
401	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryLength();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntryLength();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
402	[BUG]  [BUGGY]  Integer  entryOffset  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getRecordSize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getRecordSize();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
403	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryStart();  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryStart();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntryStart();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
404	[BUG]  [BUGGY]  if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
405	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isDirectory()  ||  hasHitEOF)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
406	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
407	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
408	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
409	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
410	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
411	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
412	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  false))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  false))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    true))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
413	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    true))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
414	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    true))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
415	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    true))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
416	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  false))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  false))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    true))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
417	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME,  true)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME,  true)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME,  true)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    true))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
418	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
419	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
420	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
421	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
422	[BUG]  [BUGGY]  long  entryOffset  =  getEntryOffset(entry);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntryOffset(entry);  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getEntryOffset(entry);	  int    entryOffset    =    getEntryOffset(entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
423	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset(entrySize);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset(entrySize);  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset(entrySize);	  int    entryOffset    =    getEntryOffset(entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
424	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset(entry.length);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset(entry.length);  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset(entry.length);	  int    entryOffset    =    getEntryOffset(entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
425	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset(entry.getValue());  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset(entry.getValue());  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset(entry.getValue());	  int    entryOffset    =    getEntryOffset(entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
426	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset(entry.getKey());  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset(entry.getKey());  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset(entry.getKey());	  int    entryOffset    =    getEntryOffset(entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
427	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset(entry.getLength());  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset(entry.getLength());  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset(entry.getLength());	  int    entryOffset    =    getEntryOffset(entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
428	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
429	[BUG]  [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
430	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION),  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION),  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
431	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
432	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
433	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
434	[BUG]  [BUGGY]  if(!isDirectory()  ||  isVersion()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isVersion()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isVersion()  ||  hasHitEOF)  {	  if(isDirectory()    ||    isVersion()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
435	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isDirectory()  ||  isVersion())  {	  if(isDirectory()    ||    isVersion()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
436	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  isVersion()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  isVersion()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  isDirectory()  ||  isVersion()  ||  hasHitEOF)  {	  if(isDirectory()    ||    isVersion()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
437	[BUG]  [BUGGY]  if(hasHitEOF  ||  isVersion()  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isVersion()  ||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isVersion()  ||  isDirectory())  {	  if(isDirectory()    ||    isVersion()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
438	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory()  ||  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
439	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)&&  isDirectory())  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
440	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory()  &&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory()  &&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory()  &&  hasHitEOF)  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
441	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
442	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory()  ||  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory()  ||  isVersion())  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
443	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAME)&&  isDirectory())  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
444	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
445	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)&&  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
446	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
447	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
448	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
449	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
450	[BUG]  [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getHitEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
451	[BUG]  [BUGGY]  if(isHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
452	[BUG]  [BUGGY]  int  entryOffset  =  System.currentTimeMillis();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  System.currentTimeMillis();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  System.currentTimeMillis();	  long    entryOffset    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
453	[BUG]  [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  +  1;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  +  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  System.currentTimeMillis()  +  1;	  long    entryOffset    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
454	[BUG]  [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  -  1;  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  -  1;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  System.currentTimeMillis()  -  1;	  long    entryOffset    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
455	[BUG]  [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  System.currentTimeMillis()  /  DateTimeConstants.MILLIS_PER_SECOND;	  long    entryOffset    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
456	[BUG]  [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  /  1000;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  /  1000;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  System.currentTimeMillis()  /  1000;	  long    entryOffset    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
457	[BUG]  [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  /  2;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  /  2;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  System.currentTimeMillis()  /  2;	  long    entryOffset    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
458	[BUG]  [BUGGY]  if(!isDirectory()  &&  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(!isDirectory()    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
459	[BUG]  [BUGGY]  if(!isDirectory()  &&  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!isDirectory()    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
460	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.UTF8))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.UTF8))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.UTF8))  {	  if(isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
461	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
462	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.SIZE))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.SIZE))  {	  if(isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
463	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.NULL_VALUE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.NULL_VALUE))  {	  if(isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
464	[BUG]  [BUGGY]  if(isEOF()  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEOF()  ||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEOF()  ||  isDirectory())  {	  if(hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
465	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
466	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
467	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX),  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX),  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
468	[BUG]  [BUGGY]  if(!isEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(!hasHitEOF    &&    isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
469	[BUG]  [BUGGY]  if(!hasHitEOF  &&  currEntry.isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  currEntry.isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  currEntry.isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(!hasHitEOF    &&    isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
470	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(!hasHitEOF    &&    isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
471	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
472	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
473	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
474	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    true))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
475	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
476	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
477	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
478	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
479	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
480	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.DEFAULT_TEST_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.DEFAULT_TEST_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.DEFAULT_TEST_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
481	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
482	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  available))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  available))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  available))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
483	[BUG]  [BUGGY]  if(isDirectory()  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  &&  hasHitEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
484	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(ArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(ArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(ArchiveEntry.class))  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
485	[BUG]  [BUGGY]  int  entryOffset  =  this.currEntry.getEntryLength();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  this.currEntry.getEntryLength();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  this.currEntry.getEntryLength();	  int    entryOffset    =    getEntryLength();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
486	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  false))  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME,  false))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
487	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
488	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
489	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
490	[BUG]  [BUGGY]  if(getDirectory()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
491	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
492	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(ArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(ArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(ArchiveEntry.class)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
493	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.class)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
494	[BUG]  [BUGGY]  if(getDirectory()!=  null  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()!=  null  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()!=  null  &&  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
495	[BUG]  [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
496	[BUG]  [BUGGY]  if(isEOF()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEOF()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEOF()  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
497	[BUG]  [BUGGY]  if(HitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(HitEOF  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(HitEOF  ||  hasHitEOF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
498	[BUG]  [BUGGY]  if(!isDirectory()  &&  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!isDirectory()    &&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
499	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(!isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
500	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
501	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
502	[BUG]  [BUGGY]  if(!isEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
503	[BUG]  [BUGGY]  if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
504	[BUG]  [BUGGY]  if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!isDirectory()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
505	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
506	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
507	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
508	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
509	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
510	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME  ||  isDirectory()))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAME  ||  isDirectory()))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAME  ||  isDirectory()))  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
511	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
512	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
513	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_PREFIX)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_PREFIX)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_PREFIX)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
514	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
515	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
516	[BUG]  [BUGGY]  int  entryOffset  =  this.currEntry.getEntrySize();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  this.currEntry.getEntrySize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  this.currEntry.getEntrySize();	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
517	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
518	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
519	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  isDirectory())  {	  if(!hasHitEOF    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
520	[BUG]  [BUGGY]  if(!isEOF()  &&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEOF()  &&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEOF()  &&  isDirectory())  {	  if(!hasHitEOF    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
521	[BUG]  [BUGGY]  if(!hasHitEOF  &&  getDirectory())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  getDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  getDirectory())  {	  if(!hasHitEOF    &&    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
522	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
523	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BACKSLASH)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BACKSLASH)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_BACKSLASH)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
524	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_BUFFER_SIZE)&&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
525	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntryOffset().length;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntryOffset().length;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntryOffset().length;	  Integer    entryOffset    =    getEntryOffset();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
526	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
527	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
528	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
529	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_TYPE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_TYPE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_TYPE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
530	[BUG]  [BUGGY]  if(isEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
531	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX  +  1))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
532	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
533	[BUG]  [BUGGY]  if(isDirectory()  ||  zipEncoding  ||  isEncoding)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  zipEncoding  ||  isEncoding)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  zipEncoding  ||  isEncoding)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
534	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
535	[BUG]  [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
536	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
537	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
538	[BUG]  [BUGGY]  long  entrySize  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getEntryLength();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entrySize  =  getEntryLength();	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
539	[BUG]  [BUGGY]  long  entrySize  =  getRecordSize();  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entrySize  =  getRecordSize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entrySize  =  getRecordSize();	  long    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
540	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(isDirectory()    ||    isVersion()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
541	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarInputStream.class))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarInputStream.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarInputStream.class))  {	  if(isDirectory()    ||    isVersion()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
542	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.BASELINE_VALUE))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.BASELINE_VALUE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.BASELINE_VALUE))  {	  if(isDirectory()    ||    isVersion()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
543	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_HIDE_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_HIDE_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_HIDE_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
544	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
545	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_HANDLER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_HANDLER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_HANDLER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
546	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
547	[BUG]  [BUGGY]  if(getDirectory()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()!=  null  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
548	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(!isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
549	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
550	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(ArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(ArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(ArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
551	[BUG]  [BUGGY]  if(isVersion()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isVersion()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isVersion()  ||  isEnabled(TarArchiveEntry.class))  {	  if(isVersion()    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
552	[BUG]  [BUGGY]  if(isVersion()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isVersion()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isVersion()  ||  hasHitEOF)  {	  if(isVersion()    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
553	[BUG]  [BUGGY]  if(getDirectory()  ||  isVersion()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isVersion()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isVersion()  ||  hasHitEOF)  {	  if(isDirectory()    ||    isVersion()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
554	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isDirectory()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  isDirectory()  ||  hasHitEOF)  {	  if(isDirectory()    ||    isVersion()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
555	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  2;  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntrySize()  -  2;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntrySize()  -  2;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
556	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
557	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.NULL_VALUE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.NULL_VALUE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.NULL_VALUE))  {	  if(!isDirectory()    &&    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
558	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.UTF8))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.UTF8))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.UTF8))  {	  if(!isDirectory()    &&    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
559	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
560	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
561	[BUG]  [BUGGY]  if(!isEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
562	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UNINITIALIZER))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UNINITIALIZER))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UNINITIALIZER))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
563	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
564	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NONE))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NONE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NONE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
565	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
566	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
567	[BUG]  [BUGGY]  int  entrySize  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntryLength();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entrySize  =  getEntryLength();	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
568	[BUG]  [BUGGY]  if(!isEncoding  &&!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEncoding  &&!hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEncoding  &&!hasHitEOF)  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
569	[BUG]  [BUGGY]  if(isEncoding  ||!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEncoding  ||!hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEncoding  ||!hasHitEOF)  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
570	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEncodingRecorder)  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEncodingRecorder)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEncodingRecorder)  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
571	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
572	[BUG]  [BUGGY]  if(!isEOF  &&  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEOF  &&  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEOF  &&  isEnabled(TarArchiveEntry.class))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
573	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_DELAYED))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_DELAYED))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_DELAYED))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
574	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_FIELD_NAMES))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
575	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_INFINITY))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_INFINITY))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_INFINITY))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
576	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_CHECKED))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_CHECKED))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_CHECKED))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
577	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.SOURCE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.SOURCE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.SOURCE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
578	[BUG]  [BUGGY]  int  entryOffset  =  getEntryOffset(entry.getBytes());  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntryOffset(entry.getBytes());  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntryOffset(entry.getBytes());	  int    entryOffset    =    getEntryOffset(entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
579	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
580	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(ArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(ArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(ArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
581	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isDirectory())  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
582	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
583	[BUG]  [BUGGY]  if(isEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
584	[BUG]  [BUGGY]  if(isEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
585	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
586	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
587	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
588	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
589	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE),  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE),  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
590	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
591	[BUG]  [BUGGY]  Integer  entrySize  =  getEntryLength();  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntryLength();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entrySize  =  getEntryLength();	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
592	[BUG]  [BUGGY]  Integer  entrySize  =  getEntrySize().length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entrySize  =  getEntrySize().length;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entrySize  =  getEntrySize().length;	  Integer    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
593	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  hasHitEOF)  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
594	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)&&  hasHitEOF)  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
595	[BUG]  [BUGGY]  if(isEnabled(TarDirectory.class)||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarDirectory.class)||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarDirectory.class)||  isEnabled(TarArchiveEntry.class))  {	  if(isEnabled(TarArchiveEntry.class)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
596	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
597	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
598	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
599	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
600	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
601	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
602	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
603	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
604	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX),  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX),  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
605	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
606	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY),  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY),  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
607	[BUG]  [BUGGY]  if(!isEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
608	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
609	[BUG]  [BUGGY]  if(isEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEOF()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
610	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_VERSION_1_5))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_VERSION_1_5))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_VERSION_1_5))  {	  if(isDirectory()    ||    isVersion()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
611	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    isVersion()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
612	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_VERSION_MASK))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_VERSION_MASK))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_VERSION_MASK))  {	  if(isDirectory()    ||    isVersion()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
613	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(currEntry  ==  null  ||  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
614	[BUG]  [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDir()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
615	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
616	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UTF_8)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UTF_8)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UTF_8)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
617	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE),  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE),  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE),  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
618	[BUG]  [BUGGY]  if(!isDirectory()  &&  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
619	[BUG]  [BUGGY]  if(!hitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(!hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
620	[BUG]  [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(Feature.QUOTE_FIELD_NAMES)||!hasHitEOF)  {	  if(!hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
621	[BUG]  [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  /  DateTimeConstants.MILLIS_PER_SIZE;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  /  DateTimeConstants.MILLIS_PER_SIZE;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  System.currentTimeMillis()  /  DateTimeConstants.MILLIS_PER_SIZE;	  long    entryOffset    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
622	[BUG]  [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  /  DateTimeConstants.MILLIS_PER_HOUR;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  /  DateTimeConstants.MILLIS_PER_HOUR;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  System.currentTimeMillis()  /  DateTimeConstants.MILLIS_PER_HOUR;	  long    entryOffset    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
623	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
624	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
625	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
626	[BUG]  [BUGGY]  if(!isEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEOF  &&  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
627	[BUG]  [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
628	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {	  if(!isDirectory()    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
629	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_INSTANCE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_INSTANCE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_INSTANCE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
630	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_DOWN))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_DOWN))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_DOWN))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
631	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
632	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
633	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
634	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(!isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
635	[BUG]  [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(currEntry  ==  null  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
636	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
637	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(!hasHitEOF    &&    isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
638	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
639	[BUG]  [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
640	[BUG]  [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ==  null  ||  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
641	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
642	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
643	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VISIBILITY))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VISIBILITY))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_VISIBILITY))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_VERSION))    {    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
644	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class,  true))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.class,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class,    true))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
645	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.class,  false))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.class,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(TarArchiveEntry.class,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class,    true))    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
646	[BUG]  [BUGGY]  if(isEncoding()  ||  hasHitEOF  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEncoding()  ||  hasHitEOF  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEncoding()  ||  hasHitEOF  ||  hasHitEOF)  {	  if(isDirectory()    ||    hasHitEOF    ||    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
647	[BUG]  [BUGGY]  Long  entryOffset  =  getEntrySize();  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Long  entryOffset  =  getEntrySize();  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Long  entryOffset  =  getEntrySize();	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
648	[BUG]  [BUGGY]  Integer  entryOffset  =  getEntry().length;  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  Integer  entryOffset  =  getEntry().length;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	Integer  entryOffset  =  getEntry().length;	  Integer    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
649	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
650	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TYPE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
651	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TYPE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TYPE))    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
652	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(!isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
653	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
654	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.class)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.class)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.class)||  isDirectory())  {	  if(isEnabled(TarArchiveEntry.class)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
655	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    isVersion()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
656	[BUG]  [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isVersion()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isVersion()    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
657	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||!isDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||!isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)||!isDirectory())  {	  if(!isDirectory()    &&    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
658	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
659	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(!isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
660	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
661	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getEntrySize()  +  SMALL_BUFFER_SIZE;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
662	[BUG]  [BUGGY]  long  entryOffset  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  getEntrySize()  -  blockSize;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  getEntrySize()  -  blockSize;	  long    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
663	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasHitEMIF)  {  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasHitEMIF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  hasHitEMIF)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
664	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasHitEC)  {  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasHitEC)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  hasHitEC)  {	  if(hasHitEOF    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
665	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
666	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_ENTRY))    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
667	[BUG]  [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  -  entrySize;  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  long  entryOffset  =  System.currentTimeMillis()  -  entrySize;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	long  entryOffset  =  System.currentTimeMillis()  -  entrySize;	  long    entryOffset    =    System.currentTimeMillis();    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
668	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME,  true)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME,    true))    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
669	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  getClass()))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  getClass()))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  getClass()))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
670	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
671	[BUG]  [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  &&  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(!isDirectory()    &&    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
672	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UNKNOWN_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
673	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
674	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isEnabled(TarArchiveEntry.HARD_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isEnabled(TarArchiveEntry.HARD_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isEnabled(TarArchiveEntry.HARD_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
675	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
676	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNKNOWN_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNKNOWN_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
677	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
678	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
679	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isDirectory())  {	  if(isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
680	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize()  -  blockSize;  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize()  -  blockSize;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntrySize()  -  blockSize;	  int    entryOffset    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
681	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(!isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
682	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.BLOCK_SIZE)||  isEnabled(TarArchiveEntry.SMALL_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
683	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
684	[BUG]  [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(Feature.QUOTE_FIELD_NAME)||  isDirectory())  {	  if(isEnabled(Feature.QUOTE_FIELD_NAME)||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
685	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.UTF8)&&  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.UTF8)&&  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.UTF8)&&  isEnabled(TarArchiveEntry.UTF8)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UTF8)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
686	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  true))  {	  if(!isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
687	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
688	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE,  true))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
689	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.HARD_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.HARD_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.HARD_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
690	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.HARD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.HARD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL_VALUE)||  isEnabled(TarArchiveEntry.HARD_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.NULL_VALUE))    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
691	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class)||  isVersion()  ||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.class)||  isVersion()  ||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.class)||  isVersion()  ||  hasHitEOF)  {	  if(isDirectory()    ||    isVersion()    ||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
692	[BUG]  [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.UTF8))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.UTF8))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.UTF8))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
693	[BUG]  [BUGGY]  if(hasHitEOF  &&  isVersion()  ||  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isVersion()  ||  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isVersion()  ||  isDirectory())  {	  if(isVersion()    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
694	[BUG]  [BUGGY]  int  entryOffset  =  getEntrySize(entry);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entryOffset  =  getEntrySize(entry);  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entryOffset  =  getEntrySize(entry);	  int    entryOffset    =    getEntryOffset(entry);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
695	[BUG]  [BUGGY]  if(!hasHitEOF  &&  zipEncoding  ==  null)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  zipEncoding  ==  null)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  zipEncoding  ==  null)  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
696	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEncoding)  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEncoding)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  isEncoding)  {	  if(!hasHitEOF    &&    isEncoding)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
697	[BUG]  [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ==  null  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
698	[BUG]  [BUGGY]  if(isDirty()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirty()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirty()  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(isDirectory()    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
699	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
700	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
701	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
702	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isDirectory())  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
703	[BUG]  [BUGGY]  int  entrySize  =  getEntry().length;  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  int  entrySize  =  getEntry().length;  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	int  entrySize  =  getEntry().length;	  int    entrySize    =    getEntrySize();    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
704	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
705	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
706	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
707	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ARRAY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
708	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.DEFAULT_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
709	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
710	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)&&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
711	[BUG]  [BUGGY]  if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
712	[BUG]  [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.EXTENDS_PER_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
713	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,  false))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE,    true))    {    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
714	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  isEnabled(TarArchiveEntry.class))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
715	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  TarEncoding.UTF8))  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  TarEncoding.UTF8))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE,  TarEncoding.UTF8))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
716	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES)||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
717	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.USE_DEFAULT))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
718	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.USE_DEFAULT))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.USE_DEFAULT))    {    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
719	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isVersion()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isVersion()  ||  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isVersion()  ||  isVersion())  {	  if(isDirectory()    ||    isVersion()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
720	[BUG]  [BUGGY]  if(isDirectory()  ||  isDirectory()  ||  isVersion())  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isDirectory()  ||  isVersion())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isDirectory()  ||  isVersion())  {	  if(isDirectory()    ||    isVersion()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
721	[BUG]  [BUGGY]  if(hasHitEOF  ||  hasDirectory())  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  ||  hasDirectory())  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  ||  hasDirectory())  {	  if(hasHitEOF    ||    isDirectory())    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
722	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isDirectory()  ||  isEnabled(TarArchiveEntry.UTF8))  {	  if(!hasHitEOF    &&    isDirectory()    ||    isVersion())    {    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
723	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
724	[BUG]  [BUGGY]  if(getDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  hasHitEOF  &&  isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(isDirectory()    ||    hasHitEOF    &&    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
725	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
726	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
727	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
728	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_TEST_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
729	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE  +  1))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE    +    1))    {    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
730	[BUG]  [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(getDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
731	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_FIELD_NAME))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
732	[BUG]  [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(isDirectory()    ||    hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAME))    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
733	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.AUTO_QUOTE_FIELD_SIZE))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.AUTO_QUOTE_FIELD_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_SIZE)||  isEnabled(Feature.AUTO_QUOTE_FIELD_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
734	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
735	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this.zipEncoding))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this.zipEncoding))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.class,  this.zipEncoding))  {	  if(hasHitEOF    &&    isEnabled(TarArchiveEntry.class))    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
736	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UNINITIALIZER))  {  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UNINITIALIZER))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.UNINITIALIZER))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
737	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER_KEY))  {  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER_KEY))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.UNINITIALIZER_KEY))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
738	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.NULL))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.UNINITIALIZER))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
739	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.class)&&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.class)&&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.class)&&  isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
740	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.class)&&  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)&&    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
741	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH_SIZE))  {  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE)||  isEnabled(TarArchiveEntry.DEFAULT_BACKSLASH_SIZE))  {	  if(!hasHitEOF    &&    isEnabled(TarArchiveEntry.DEFAULT_ENTRY_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
742	[BUG]  [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  ||  isEnabled(Feature.QUOTE_FIELD_NAMES)||  isEnabled(Feature.QUOTE_BUFFER_SIZE))  {	  if(!hasHitEOF    ||    isEnabled(Feature.QUOTE_FIELD_NAMES))    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
743	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  isEnabled(Feature.QUOTE_FIELD_SIZE,  true))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  isEnabled(Feature.QUOTE_FIELD_SIZE,  true))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAMES,  true)||  isEnabled(Feature.QUOTE_FIELD_SIZE,  true))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAMES,    true))    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
744	[BUG]  [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isDirectory()  ||  isEnabled(Feature.QUOTE_FIELD_NAME)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(Feature.QUOTE_FIELD_NAME)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
745	[BUG]  [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.SEMI_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.SEMI_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isEnabled(TarArchiveEntry.UTF8)||  isEnabled(TarArchiveEntry.SEMI_BUFFER_SIZE))  {	  if(isEnabled(TarArchiveEntry.UTF8))    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
746	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.class)||  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
747	[BUG]  [BUGGY]  if(!isEnabled(TarArchiveEntry.class)&&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!isEnabled(TarArchiveEntry.class)&&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!isEnabled(TarArchiveEntry.class)&&  isEnabled(TarArchiveEntry.class)||  hasHitEOF)  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.class)||    hasHitEOF)    {    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
748	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.SOURCE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.SOURCE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.SOURCE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
749	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_FIRST))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_FIRST))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE_FIRST))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
750	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE,  this))  {  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE,  this))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.SOURCE,  this))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.SOURCE))    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
751	[BUG]  [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(!hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_PREFIX))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
752	[BUG]  [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(isDirectory()  ||  isEnabled(TarArchiveEntry.DEFAULT_PREFIX)||  isEnabled(TarArchiveEntry.DEFAULT_BUFFER_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_PREFIX))    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
753	[BUG]  [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      public  int  available()  throws  IOException  {      [BUGGY]  if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {  [BUGGY]      return  0;  }  if  (entrySize  -  entryOffset  >  Integer.MAX_VALUE)  {  return  Integer.MAX_VALUE;  }  return  (int)  (entrySize  -  entryOffset);  }  [CLASS]  TarArchiveInputStream  [METHOD]  available  [RETURN_TYPE]  int  [VARIABLES]  byte[]  SMALL_BUF  boolean  hasHitEOF  ZipEncoding  zipEncoding  InputStream  is  String  encoding  Map  globalPaxHeaders  int  SMALL_BUFFER_SIZE  blockSize  recordSize  long  entryOffset  entrySize  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	184	184	1	replace	if(hasHitEOF  &&  isEnabled(TarArchiveEntry.DEFAULT_SIZE)||  isEnabled(TarArchiveEntry.BLOCK_SIZE))  {	  if(isDirectory()    ||    isEnabled(TarArchiveEntry.DEFAULT_SIZE)||    isEnabled(TarArchiveEntry.BLOCK_SIZE))    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
