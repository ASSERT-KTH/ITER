bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
2	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
3	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
4	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  *  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead  *  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
5	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  entrySize  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
6	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead  +  2);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead  +  2);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
7	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  numToRead);	  totalRead    =    str.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
8	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  entrySize,  hasHitEOF);	  totalRead    =    str.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
9	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  entryOffset,  hasHitEOF);	  totalRead    =    str.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
10	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  entryOffset);	  totalRead    =    str.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
11	[BUG]  [BUGGY]  int  totalRead  =  str.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  int  totalRead  =  str.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	int  totalRead  =  str.read(buf,  offset,  numToRead);	  totalRead    =    str.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
12	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
13	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryLimit,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryLimit,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
14	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
15	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  entryOffset,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
16	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  entryOffset  +  numToRead);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
17	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entryOffset  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  entryOffset  +  1);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
18	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entrySize  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  entrySize  +  1);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
19	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
20	[BUG]  [BUGGY]  numToRead  =  buffer.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  buffer.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  buffer.read(buf,  offset,  numToRead  +  1);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
21	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entryOffset  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  entryOffset  +  1);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
22	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  *  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead  *  1);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
23	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
24	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
25	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
26	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
27	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
28	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
29	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
30	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
31	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
32	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
33	[BUG]  [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
34	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
35	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
37	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
38	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  entryOffset,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
39	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
40	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
41	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
42	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
43	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
44	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
46	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
47	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  +  1,  entrySize);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
48	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  numToRead,  offset  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  numToRead,  offset  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  numToRead,  offset  +  1,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
49	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
50	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entrySize  +  1,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
51	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecorded);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
52	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecorded);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
53	[BUG]  [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	ch  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecorded);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
54	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecorded);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
55	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize,  isDirectory());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize,  isDirectory());  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize,  isDirectory());	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
56	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
57	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  isDirectory());  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  isDirectory());  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize,  numToRead,  isDirectory());	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
58	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
59	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  0);	  numToRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
60	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  1);	  numToRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
61	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  entrySize,  0);	  numToRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
62	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  0L);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  0L);	  numToRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
63	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  rest.read(buf,  offset,  0);	  numToRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
64	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  available,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  available,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  available,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    available);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
65	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  available);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  available);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  available);	  totalRead    =    is.read(buf,    offset,    numToRead,    available);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
66	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.length);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.length);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    is.read);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
67	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  currEntry.read);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  currEntry.read);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  currEntry.read);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    is.read);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
68	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    is.read);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
69	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    is.read);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
70	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.offset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.offset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.offset);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    is.read);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
71	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    is.read);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
72	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
73	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
74	[BUG]  [BUGGY]  numToRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
75	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
76	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  0,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
77	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0,  numToRead,  entrySize);	  totalRead    =    is.read(buf,    offset,    0,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
78	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entrySize,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
79	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  numToRead,  0,  buf.length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  numToRead,  0,  buf.length,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  numToRead,  0,  buf.length,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
80	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  off,  0,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  off,  0,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  off,  0,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
81	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entrySize,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0,  entrySize,  numToRead);	  totalRead    =    is.read(buf,    offset,    0,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
82	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
83	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryLimit,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryLimit,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryLimit,  numToRead);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
84	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  entrySize,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
85	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  entrySize);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
86	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
87	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  0,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
88	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  markLimit);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  markLimit);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  markLimit);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
89	[BUG]  [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  ch  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	ch  =  currEntry.read(buf,  offset,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
90	[BUG]  [BUGGY]  entrySize  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  entrySize  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	entrySize  =  currEntry.read(buf,  offset,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
91	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  entryOffset);	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
92	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  entryOffset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  entryOffset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  entryOffset,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
93	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  entryOffset,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
94	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
95	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
96	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
97	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
98	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
99	[BUG]  [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
100	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
101	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  hasHitEOF,  numToRead);	  totalRead    =    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
102	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    cache.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
103	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  entrySize  +  1);	  totalRead    =    cache.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
104	[BUG]  [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  cache.read(buf,  offset,  numToRead  +  1);	  totalRead    =    cache.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
105	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead  +  2);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead  +  2);	  totalRead    =    cache.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
106	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead  *  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead  *  1);	  totalRead    =    cache.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
107	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
108	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
109	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  recv.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
110	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
111	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
112	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
113	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
114	[BUG]  [BUGGY]  n  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  n  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	n  =  currEntry.read(buf,  offset,  numToRead);	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
115	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
116	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
117	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
118	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
119	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
120	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
121	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
122	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
123	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  entrySize);	  numToRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
124	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  entryOffset);	  numToRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
125	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entryLimit,  entrySize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entryLimit,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  entryLimit,  entrySize);	  numToRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
126	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  entrySize);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
127	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  numRecords);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  numRecords);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
128	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
129	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  entryOffset);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
130	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
131	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset  +  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
132	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryOffset  +  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  entryOffset  +  numToRead);	  totalRead    =    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
133	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  numToRead);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  +  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entrySize  +  numToRead);	  totalRead    =    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
134	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset  -  numToRead);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset  -  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset  -  numToRead);	  totalRead    =    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
135	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  +  numToRead);	  totalRead    =    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
136	[BUG]  [BUGGY]  numToRead  =  read.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  read.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  read.read(buf,  offset,  numToRead  +  1);	  totalRead    =    read.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
137	[BUG]  [BUGGY]  totalRead  =  read.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  read.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  read.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    read.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
138	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead);	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
139	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
140	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
141	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
142	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  0);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
143	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
144	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
145	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
146	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entryOffset);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
147	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
148	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  0);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
149	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
150	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
151	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entrySize,  0,  numToRead);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
152	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  i);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  i);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  i);	  totalRead    =    i.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
153	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  0,  numToRead,  hasHitEOF);	  totalRead    =    i.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
154	[BUG]  [BUGGY]  numToRead  =  i.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  i.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  i.read(buf,  offset,  0,  numToRead);	  totalRead    =    i.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
155	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  0,  numToRead);	  totalRead    =    i.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
156	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  entrySize);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
157	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  numRecords);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  numRecords);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  numRecords);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
158	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  0,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
159	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
160	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  entryOffset);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
161	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  numToRead  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
162	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  entrySize);	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
163	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
164	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
165	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
166	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
167	[BUG]  [BUGGY]  if(entryOffset  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
168	[BUG]  [BUGGY]  if(entryOffset  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
169	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
170	[BUG]  [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
171	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
172	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize,  0);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
173	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  0L);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  0L);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
174	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  repaint.read(buf,  offset,  0);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
175	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
176	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
177	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
178	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead!=  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
179	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
180	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
181	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
182	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
183	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
184	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
185	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
186	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
187	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
188	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
189	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
190	[BUG]  [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
191	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  0,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
192	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  0,  numToRead);	  totalRead    =    rest.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
193	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  0,  entrySize);	  totalRead    =    rest.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
194	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  0,  numToRead  +  1);	  totalRead    =    rest.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
195	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  rest.read(buf,  offset,  0,  numToRead);	  totalRead    =    rest.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
196	[BUG]  [BUGGY]  if(entryOffset  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
197	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
198	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
199	[BUG]  [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
200	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  0,  numToRead);	  numToRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
201	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  0,  numToRead,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
202	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  0,  numToRead  +  1);	  numToRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
203	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  0,  entrySize);	  numToRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
204	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  1,  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  1,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  1,  numToRead);	  numToRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
205	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryLen);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
206	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryLen  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryLen  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entryLen  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
207	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryLen,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryLen,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entryLen,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
208	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  false);	  numToRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
209	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  false,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  false,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  false,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
210	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead,  false);	  numToRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
211	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize,  false);  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  entrySize,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  entrySize,  false);	  numToRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
212	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  false,  true);  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  false,  true);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  false,  true);	  numToRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
213	[BUG]  [BUGGY]  numToRead  =  i.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  i.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  i.read(buf,  offset,  numToRead  +  1);	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
214	[BUG]  [BUGGY]  totalRead  =  buf.read(i,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buf.read(i,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buf.read(i,  offset,  numToRead  +  1);	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
215	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  true,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  true,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    true);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
216	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  true);	  totalRead    =    is.read(buf,    offset,    numToRead,    true);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
217	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  true);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  true);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF,  true);	  totalRead    =    is.read(buf,    offset,    numToRead,    true);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
218	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  true);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  true);	  totalRead    =    is.read(buf,    offset,    numToRead,    true);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
219	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
220	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    cache.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
221	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  totalRead    =    cache.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
222	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);	  totalRead    =    cache.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
223	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);	  totalRead    =    cache.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
224	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  entryOffset,  hasHitEOF);	  totalRead    =    cache.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
225	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
226	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  entrySize,  numToRead,  hasHitEOF);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
227	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  entryOffset,  hasHitEOF);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
228	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
229	[BUG]  [BUGGY]  numToRead  =  buffer.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  buffer.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  buffer.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
230	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  offset,  hasHitEOF);	  totalRead    =    is.read(buf,    numToRead,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
231	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  off,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  off,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  off,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    numToRead,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
232	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  numToRead,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  numToRead,  offset,  entrySize,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  numToRead,  offset,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    numToRead,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
233	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  numToRead,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  numToRead,  offset,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  numToRead,  offset,  entrySize);	  totalRead    =    is.read(buf,    numToRead,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
234	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entrySize  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  entrySize  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
235	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  *  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  *  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
236	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  1);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
237	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  2);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  +  2);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
238	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead);	  totalRead    =    cache.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
239	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  entrySize,  hasHitEOF);	  totalRead    =    cache.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
240	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  entryOffset);	  totalRead    =    cache.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
241	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  entrySize,  numToRead);	  totalRead    =    cache.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
242	[BUG]  [BUGGY]  totalRead  =  cache.read(currEntry,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(currEntry,  offset,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(currEntry,  offset,  entrySize);	  totalRead    =    cache.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
243	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
244	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
245	[BUG]  [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead!=  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
246	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >=  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
247	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
248	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
249	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
250	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entrySize,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
251	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryLimit,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryLimit,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryLimit,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
252	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
253	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
254	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
255	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
256	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  false);	  totalRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
257	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  false,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  false,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  false,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
258	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  false);	  totalRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
259	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  false);	  totalRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
260	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  false);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entrySize,  false);	  totalRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
261	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
262	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
263	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  0,  entrySize);	  totalRead    =    currEntry.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
264	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  0,  numToRead  +  1);	  totalRead    =    currEntry.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
265	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  0,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  0,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  0,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    currEntry.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
266	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
267	[BUG]  [BUGGY]  if(entryOffset  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
268	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
269	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  rest.read(buf,  offset,  entrySize);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
270	[BUG]  [BUGGY]  numToRead  =  repaint.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  repaint.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  repaint.read(buf,  offset,  numToRead);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
271	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  true);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead,  true);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
272	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory,  hasHitEOF);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
273	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
274	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory);  }  else  {  entryOffset  +=  numToRead;  }	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
275	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0L,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0L,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0L,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0L);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
276	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0L);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0L);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0L);	  totalRead    =    is.read(buf,    offset,    0L);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
277	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0L,  entrySize);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0L,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0L,  entrySize);	  totalRead    =    is.read(buf,    offset,    0L);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
278	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset  +  1);	  totalRead    =    is.read(buf,    offset,    entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
279	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize  -  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entrySize  -  1);	  totalRead    =    is.read(buf,    offset,    entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
280	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  length);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
281	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  length,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
282	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  length);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  length);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
283	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryLimit);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryLimit);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entryLimit);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
284	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
285	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize,  numToRead);	  totalRead    =    rest.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
286	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entryOffset  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
287	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
288	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  entrySize  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  entrySize  +  1);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
289	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  repaint.read(buf,  offset,  numToRead  +  1);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
290	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  recv.read(buf,  offset,  numToRead  +  1);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
291	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  0,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
292	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0,  entryOffset);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
293	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  numToRead,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  numToRead,  0,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  numToRead,  0,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
294	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  numToRead  +  1,  hasHitEOF);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
295	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  entrySize  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  entrySize  +  1);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
296	[BUG]  [BUGGY]  numToRead  =  str.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  str.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  str.read(buf,  offset,  numToRead  +  1);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
297	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  +  2);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  numToRead  +  2);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
298	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  numToRead  *  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  numToRead  *  1);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
299	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
300	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
301	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  =  currEntry.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  =  currEntry.read(buf,  offset,  numToRead);  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  =  currEntry.read(buf,  offset,  numToRead);  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
302	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  entryOffset  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
303	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  restLen);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  0,  restLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  0,  restLen);	  totalRead    =    is.read(buf,    offset,    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
304	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  restLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  restLen);	  totalRead    =    is.read(buf,    offset,    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
305	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
306	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  totalRead  =  currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
307	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  0);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    currEntry.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
308	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
309	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
310	[BUG]  [BUGGY]  if(numToRead  ==  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
311	[BUG]  [BUGGY]  if(numToRead  >=  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >=  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >=  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
312	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
313	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
314	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
315	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  throw  new  IllegalStateException( " ");  }	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
316	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  false;  }	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
317	[BUG]  [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  hasHitEOF;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  hasHitEOF;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(i.hasNext())  {  totalRead  =  i.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  hasHitEOF;  }	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
318	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  0,  numToRead);	  totalRead    =    cache.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
319	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  entrySize,  0);	  totalRead    =    cache.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
320	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  0L);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  0L);	  totalRead    =    cache.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
321	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entryOffset,  0);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entryOffset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  entryOffset,  0);	  totalRead    =    cache.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
322	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  len);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  len);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
323	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  0,  len);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  0,  len);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  0,  len);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
324	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  1);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
325	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  entryOffset);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
326	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  true);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  true);	  numToRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
327	[BUG]  [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  currEntry.read(buf,  offset,  numToRead,  isDirectory);	  numToRead    =    currEntry.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
328	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset,  0,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset,  0,  entrySize);	  totalRead    =    is.read(buf,    offset,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
329	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  len);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  len);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
330	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  true,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  true,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  true,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
331	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  true,  false);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  true,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  true,  false);	  numToRead    =    is.read(buf,    offset,    numToRead,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
332	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
333	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
334	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
335	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead  *  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0,  numToRead  *  1);	  totalRead    =    is.read(buf,    offset,    0,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
336	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead  +  1,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead  +  1,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0,  numToRead  +  1,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
337	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  remainingLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  remainingLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  remainingLen);	  totalRead    =    is.read(buf,    offset,    numToRead,    remainingLen);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
338	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  2);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  2);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  2);	  totalRead    =    is.read(buf,    offset,    numToRead,    remainingLen);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
339	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
340	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  +  2);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead  +  2);	  totalRead    =    is.read(buf,    offset,    numToRead    +    2);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
341	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  *  2);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  *  2);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  *  2);	  totalRead    =    is.read(buf,    offset,    numToRead    +    2);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
342	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead  +  2);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead  +  2);	  totalRead    =    is.read(buf,    offset,    numToRead    +    2);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
343	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  length);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  length);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  length);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
344	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  length  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  length  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    length);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
345	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
346	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
347	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  0)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  0)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  0)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
348	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
349	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  0);	  totalRead    =    str.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
350	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  0,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  0,  entrySize);	  totalRead    =    str.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
351	[BUG]  [BUGGY]  numToRead  =  strEntry.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  strEntry.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  strEntry.read(buf,  offset,  0,  numToRead);	  numToRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
352	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  cache.length);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  cache.length);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  cache.length);	  totalRead    =    is.read(buf,    offset,    numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
353	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
354	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >  0)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
355	[BUG]  [BUGGY]  if(numToRead  <  0)  {  currEntry  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  currEntry  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  currEntry  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
356	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
357	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputLength);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputLength);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputLength);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
358	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputSize);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputSize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  inputSize);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
359	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  entrySize  -  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0,  entrySize  -  1);	  totalRead    =    is.read(buf,    offset,    0,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
360	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  0,  entrySize);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  0,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  0,  entrySize);	  totalRead    =    cache.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
361	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
362	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
363	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
364	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
365	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entryOffset  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  entryOffset  +  1);	  totalRead    =    cache.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
366	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  true);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead,  true);	  totalRead    =    cache.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
367	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    cache.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
368	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  restLen);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  restLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  +  1,  restLen);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
369	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  cache);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1,  cache);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  +  1,  cache);	  totalRead    =    is.read(buf,    offset,    numToRead    +    1,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
370	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize  -  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  entrySize  -  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  entrySize  -  1);	  totalRead    =    cache.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
371	[BUG]  [BUGGY]  totalRead  =  strEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  strEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  strEntry.read(buf,  offset,  numToRead  +  1);	  totalRead    =    i.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
372	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  recv.read(buf,  offset,  entryOffset);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
373	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  repaint.read(buf,  offset,  entryOffset);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
374	[BUG]  [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  RestUtil.read(buf,  offset,  entryOffset);	  totalRead    =    rest.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
375	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0L);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0L);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  0L);	  totalRead    =    is.read(buf,    offset,    0L);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
376	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  offset,  entryOffset  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  offset,  entryOffset  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  offset,  entryOffset  +  1);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
377	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
378	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  buffer.length);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  buffer.length);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  buffer.length);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
379	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  length);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  length);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  length);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
380	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  buf.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  buf.length);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  +  buf.length);	  totalRead    =    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
381	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  +  numToRead);	  totalRead    =    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
382	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  remainingLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  remainingLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  remainingLen);	  totalRead    =    is.read(buf,    offset,    numToRead,    remainingLen);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
383	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  remainingLen  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  remainingLen  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  remainingLen  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    remainingLen);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
384	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  0)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
385	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
386	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
387	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
388	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  2);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  2);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  2);	  numToRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
389	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read  +  1);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  is.read  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    is.read);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
390	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  restLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  restLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  0,  restLen);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    is.read);    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
391	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  false);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  0,  false);	  numToRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
392	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead,  null);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead,  null);	  numToRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
393	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  recv.read(buf,  offset,  entrySize);	  totalRead    =    rest.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
394	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  repaint.read(buf,  offset,  entrySize);	  totalRead    =    rest.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
395	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
396	[BUG]  [BUGGY]  if(numToRead!=  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead!=  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead!=  -1)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
397	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  offset  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
398	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  3);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  3);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  +  3);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
399	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
400	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
401	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
402	[BUG]  [BUGGY]  totalRead  =  strEntry.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  strEntry.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  strEntry.read(buf,  offset,  0,  numToRead);	  totalRead    =    i.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
403	[BUG]  [BUGGY]  numToRead  =  RestUtil.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  RestUtil.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  RestUtil.read(buf,  offset,  numToRead);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
404	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  off,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
405	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buff,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buff,  offset,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buff,  offset,  entrySize);	  totalRead    =    currEntry.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
406	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  restLen,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  restLen,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  restLen,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
407	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryLimit,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entryLimit,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entryLimit,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
408	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
409	[BUG]  [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  curr.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  curr.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
410	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  numToRead,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  numToRead,  offset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  numToRead,  offset,  hasHitEOF);	  totalRead    =    is.read(buf,    numToRead,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
411	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  0,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
412	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  -1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  -1);	  totalRead    =    currEntry.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
413	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  1);	  totalRead    =    currEntry.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
414	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  restLen  +  1);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  restLen  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  restLen  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
415	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  count  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  count  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  count  +  1);	  numToRead    =    is.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
416	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded  +  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  isRecorded  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecorded);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
417	[BUG]  [BUGGY]  totalRead  =  restLen.read(buf,  offset,  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  restLen.read(buf,  offset,  numToRead,  restLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  restLen.read(buf,  offset,  numToRead,  restLen);	  totalRead    =    is.read(buf,    offset,    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
418	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  true);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  true);	  totalRead    =    is.read(buf,    offset,    numToRead,    true);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
419	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  null);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  null);	  totalRead    =    is.read(buf,    offset,    numToRead,    true);    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
420	[BUG]  [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  RestUtil.read(buf,  offset,  numToRead  +  1);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
421	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
422	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
423	[BUG]  [BUGGY]  if(entrySize!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
424	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset!=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
425	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  0,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
426	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  0,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
427	[BUG]  [BUGGY]  if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
428	[BUG]  [BUGGY]  if(entrySize!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
429	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
430	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
431	[BUG]  [BUGGY]  if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
432	[BUG]  [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
433	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  available());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  available());  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  available());	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
434	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  accessors);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  accessors);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  accessors);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
435	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0,  restLen);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0,  restLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  0,  restLen);	  totalRead    =    rest.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
436	[BUG]  [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  RestUtil.read(buf,  offset,  numToRead,  restLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  RestUtil.read(buf,  offset,  numToRead,  restLen);	  totalRead    =    rest.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
437	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  recv.read(buf,  offset,  0,  numToRead);	  totalRead    =    rest.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
438	[BUG]  [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
439	[BUG]  [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
440	[BUG]  [BUGGY]  if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
441	[BUG]  [BUGGY]  if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
442	[BUG]  [BUGGY]  if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
443	[BUG]  [BUGGY]  if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
444	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  iSize);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  iSize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  iSize);	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
445	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  entrySize);	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
446	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryLimit);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  entryLimit);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  entryLimit);	  totalRead    =    i.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
447	[BUG]  [BUGGY]  totalRead  =  read.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  read.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  read.read(buf,  offset,  numToRead,  false);	  totalRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
448	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  0,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  0,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  0,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    0,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
449	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
450	[BUG]  [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
451	[BUG]  [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
452	[BUG]  [BUGGY]  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
453	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  1,  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  1,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  1,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
454	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  0,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
455	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
456	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  0);	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
457	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  0);	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
458	[BUG]  [BUGGY]  totalRead  =  strEntry.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  strEntry.read(buf,  offset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  strEntry.read(buf,  offset,  0);	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
459	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
460	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
461	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  0,  entryOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  0,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  0,  entryOffset);	  totalRead    =    currEntry.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
462	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
463	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
464	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
465	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
466	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
467	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
468	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  0,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  0,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  0,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
469	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  count,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  count,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  count,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
470	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  1);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
471	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  -1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  -1);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
472	[BUG]  [BUGGY]  if(entrySize!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
473	[BUG]  [BUGGY]  if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
474	[BUG]  [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
475	[BUG]  [BUGGY]  if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
476	[BUG]  [BUGGY]  if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
477	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  isDirectory());  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  isDirectory());  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  isDirectory());	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
478	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  len,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  len,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  len,  numToRead);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
479	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  len);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  0,  len);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  0,  len);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
480	[BUG]  [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  rest.read(buf,  offset,  numToRead,  len);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  rest.read(buf,  offset,  numToRead,  len);	  numToRead    =    is.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
481	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  +  2);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead  +  2);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead  +  2);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
482	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  numToRead,  offset  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  numToRead,  offset  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  numToRead,  offset  +  1);	  totalRead    =    buffer.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
483	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
484	[BUG]  [BUGGY]  if(entrySize!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
485	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  numToRead)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
486	[BUG]  [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
487	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entrySize,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  entrySize,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  entrySize,  hasHitEOF);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
488	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
489	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  0,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  0,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  0,  hasHitEOF);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
490	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  true);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead,  true);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
491	[BUG]  [BUGGY]  totalRead  =  in.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  in.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  in.read(buf,  offset,  numToRead  +  1);	  totalRead    =    read.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
492	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  iOffset);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  iOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  iOffset);	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
493	[BUG]  [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  TotalRead  totalRead  =  currEntry.read(buf,  offset,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	TotalRead  totalRead  =  currEntry.read(buf,  offset,  entryOffset);	  totalRead    =    i.read(buf,    offset,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
494	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  entryLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  entryLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  entryLen);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
495	[BUG]  [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  ==  -1)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  ==  -1)  {  if(numToRead  <  0)  {  totalRead  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
496	[BUG]  [BUGGY]  if(numToRead  <  0)  {  currEntry  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  currEntry  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  currEntry  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
497	[BUG]  [BUGGY]  if(numToRead  <  0)  {  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
498	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  cache);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  cache);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  cache);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
499	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  fileEnd);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  fileEnd);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  fileEnd);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
500	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  entrySize  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  entrySize  +  1);	  totalRead    =    is.read(buf,    offset,    entrySize    +    1);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
501	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  0,  numToRead);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
502	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead,  0,  numToRead);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
503	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  isDirectory());  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  isDirectory());  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead,  isDirectory());	  totalRead    =    cache.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
504	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  entryLen);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  entryLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead,  entryLen);	  totalRead    =    cache.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
505	[BUG]  [BUGGY]  totalRead  =  recv.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  recv.read(buf,  offset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  recv.read(buf,  offset,  0);	  totalRead    =    rest.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
506	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryOffset);    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
507	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  0);	  totalRead    =    i.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
508	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  repaint.read(buf,  offset,  numToRead,  hasHitEOF);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
509	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  entryOffset);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  entryOffset);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  entryOffset);	  totalRead    =    rest.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
510	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >  0)  {  if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
511	[BUG]  [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  hasHitEOF  =  currEntry.read(buf,  offset,  entrySize);  }  else  {  hasHitEOF  =  true;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    hasHitEOF    =    true;    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
512	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  1,  numToRead);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  1,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  1,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
513	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entrySize,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
514	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entries.length);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entries.length);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entries.length);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
515	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  entrySize);	  totalRead    =    i.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
516	[BUG]  [BUGGY]  if(entryLimit  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryLimit  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryLimit  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
517	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
518	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  entrySize,  0);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  entrySize,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  entrySize,  0);	  totalRead    =    is.read(buf,    offset,    entrySize,    0);    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
519	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
520	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(numToRead  ==  -1)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
521	[BUG]  [BUGGY]  if(entrySize!=  entryOffset)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  entryOffset)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  entryOffset)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
522	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  entryOffset)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  0;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    0;    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
523	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  -1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  is.read(buf,  offset,  -1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  -1);	  numToRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
524	[BUG]  [BUGGY]  numToRead  =  str.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  str.read(buf,  offset,  0);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  str.read(buf,  offset,  0);	  numToRead    =    is.read(buf,    offset,    0);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
525	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  entrySize  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  entrySize  +  1);	  totalRead    =    is.read(buf,    offset,    numToRead,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
526	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
527	[BUG]  [BUGGY]  if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
528	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( "Truncated  TAR  archive ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IllegalStateException( "Truncated  TAR  archive ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
529	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "Truncated  TAR  archive ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "Truncated  TAR  archive ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( "Truncated  TAR  archive ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
530	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  <  numToRead)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  <  numToRead)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  <  numToRead)  {  throw  new  IllegalStateException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
531	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entryLen);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entryLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  entryLen);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryLen);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
532	[BUG]  [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  cache.read(buf,  offset,  numToRead,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
533	[BUG]  [BUGGY]  numToRead  =  str.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  str.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  str.read(buf,  offset,  numToRead,  hasHitEOF);	  numToRead    =    is.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
534	[BUG]  [BUGGY]  if(entrySize  ==  -1  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  -1  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  -1  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
535	[BUG]  [BUGGY]  if(entrySize  >=  -1  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  -1  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  -1  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
536	[BUG]  [BUGGY]  totalRead  =  str.read(buf,  off,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  str.read(buf,  off,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  str.read(buf,  off,  numToRead  +  1);	  totalRead    =    str.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
537	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entries);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entries);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entries);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isRecorded);    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
538	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  restLen);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  restLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  restLen);	  totalRead    =    is.read(buf,    offset,    numToRead,    restLen);    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
539	[BUG]  [BUGGY]  if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
540	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
541	[BUG]  [BUGGY]  if(entrySize  >=  entryOffset)  {  if(numToRead  >  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  entryOffset)  {  if(numToRead  >  0)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  entryOffset)  {  if(numToRead  >  0)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
542	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  if(numToRead  >  0)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >=  entrySize)  {  if(numToRead  >  0)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  >=  entrySize)  {  if(numToRead  >  0)  {  return  -1;  }	  if(numToRead    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
543	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
544	[BUG]  [BUGGY]  if(entrySize  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
545	[BUG]  [BUGGY]  if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
546	[BUG]  [BUGGY]  if(entrySize  >=  numToRead)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  numToRead)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  numToRead)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
547	[BUG]  [BUGGY]  if(entrySize  ==  -1  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  ==  -1  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  ==  -1  ||  hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
548	[BUG]  [BUGGY]  if(entrySize!=  entryOffset)  {  if(numToRead  ==  -1)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  entryOffset)  {  if(numToRead  ==  -1)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  entryOffset)  {  if(numToRead  ==  -1)  {  return  -1;  }	  if(numToRead    ==    -1)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
549	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  1);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    len);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
550	[BUG]  [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead,  true);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead,  true);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  cache.read(buf,  offset,  numToRead,  true);	  numToRead    =    is.read(buf,    offset,    numToRead,    true);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
551	[BUG]  [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  cache.read(buf,  offset,  numToRead,  false);	  numToRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
552	[BUG]  [BUGGY]  numToRead  =  str.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  str.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  str.read(buf,  offset,  numToRead,  false);	  numToRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
553	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  numToRead,  false);	  totalRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
554	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  false);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  false);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead,  false);	  totalRead    =    is.read(buf,    offset,    numToRead,    false);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
555	[BUG]  [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  hasHitEOF.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
556	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  entryOffset,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    numToRead,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
557	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
558	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
559	[BUG]  [BUGGY]  if(entryLimit  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryLimit  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryLimit  <  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
560	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
561	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  0)  {  if(!hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
562	[BUG]  [BUGGY]  if(numToRead  <  0)  {  entrySize  +=  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  entrySize  +=  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  entrySize  +=  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
563	[BUG]  [BUGGY]  if(numToRead  <  0)  {  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  currEntry.read(buf,  offset,  numToRead);  }  else  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
564	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  entrySize  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  entrySize  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >  0)  {  if(numToRead  <  0)  {  entrySize  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entrySize    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
565	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  0,  len);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  0,  len);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  0,  len);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
566	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0,  len);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead,  0,  len);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead,  0,  len);	  totalRead    =    is.read(buf,    offset,    numToRead,    0,    len);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
567	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  numToRead,  offset,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  numToRead,  offset,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  numToRead,  offset,  hasHitEOF);	  totalRead    =    is.read(buf,    numToRead,    offset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
568	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  entryLimit);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  entryLimit);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead,  entryLimit);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
569	[BUG]  [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  entryLen);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  buffer.read(buf,  offset,  numToRead,  entryLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  buffer.read(buf,  offset,  numToRead,  entryLen);	  totalRead    =    buffer.read(buf,    offset,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
570	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
571	[BUG]  [BUGGY]  if(entryLimit  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryLimit  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryLimit  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
572	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
573	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
574	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF  ||  hasDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    hasDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
575	[BUG]  [BUGGY]  if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
576	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( " ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
577	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( "Unknown  entry  size: ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( "Unknown  entry  size: ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  throw  new  IOException( "Unknown  entry  size: ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
578	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( "Unknown  entry  size: ");  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( "Unknown  entry  size: ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IOException( "Unknown  entry  size: ");  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IOException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
579	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  <  numToRead)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  <  numToRead)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  <  numToRead)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
580	[BUG]  [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  >=  entrySize)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
581	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
582	[BUG]  [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
583	[BUG]  [BUGGY]  if(entryLimit  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryLimit  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryLimit  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
584	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
585	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  off,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  off,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  off,  numToRead  +  1);	  totalRead    =    cache.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
586	[BUG]  [BUGGY]  if(entrySize!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize!=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
587	[BUG]  [BUGGY]  if(entryOffset  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryOffset  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryOffset  >=  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
588	[BUG]  [BUGGY]  if(entrySize  >=  numToRead)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  numToRead)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  numToRead)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }	  if(numToRead    ==    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
589	[BUG]  [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  0)  {  if(!hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  -1;  }	  if(numToRead    <    0)    {    if(!hasHitEOF    ||    isDirectory()    ||    entryOffset    ==    entrySize)    {    return    -1;    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
590	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  -1,  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  -1,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  -1,  numToRead);	  totalRead    =    currEntry.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
591	[BUG]  [BUGGY]  totalRead  =  repaint.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  repaint.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  repaint.read(buf,  offset,  0,  numToRead);	  totalRead    =    rest.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
592	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  0,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  0,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  0,  numToRead  +  1);	  totalRead    =    is.read(buf,    offset,    0,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
593	[BUG]  [BUGGY]  numToRead  =  cache.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  cache.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  cache.read(buf,  offset,  0,  numToRead);	  numToRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
594	[BUG]  [BUGGY]  numToRead  =  str.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  str.read(buf,  offset,  0,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  str.read(buf,  offset,  0,  numToRead);	  numToRead    =    is.read(buf,    offset,    0,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
595	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  buf.length);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead  +  buf.length);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead  +  buf.length);	  totalRead    =    is.read(buf,    offset,    entryOffset    +    numToRead);    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
596	[BUG]  [BUGGY]  numToRead  =  curr.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  curr.read(buf,  offset,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  curr.read(buf,  offset,  entrySize);	  numToRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
597	[BUG]  [BUGGY]  numToRead  =  str.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]                            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  str.read(buf,  offset,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  str.read(buf,  offset,  entrySize);	  numToRead    =    is.read(buf,    offset,    entrySize);    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
598	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  len,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  len,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  len,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    entryOffset,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
599	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead,  entrySize);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead,  entrySize);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  off,  numToRead,  entrySize);	  totalRead    =    currEntry.read(buf,    offset,    entrySize,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
600	[BUG]  [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  *  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  rest.read(buf,  offset,  numToRead  *  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  rest.read(buf,  offset,  numToRead  *  1);	  totalRead    =    rest.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
601	[BUG]  [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  this.currEntry.read(buf,  offset,  numToRead  +  1);	  totalRead    =    read.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
602	[BUG]  [BUGGY]  totalRead  =  headers.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  headers.read(buf,  offset,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  headers.read(buf,  offset,  numToRead  +  1);	  totalRead    =    read.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
603	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  entrySize  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  entrySize  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >  0)  {  if(numToRead  <  0)  {  entrySize  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
604	[BUG]  [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entrySize  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  <  0)  {  if(numToRead  >  0)  {  entrySize  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  <  0)  {  if(numToRead  >  0)  {  entrySize  =  currEntry.read(buf,  offset,  numToRead);  }  else  {  entryOffset  +=  numToRead;  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
605	[BUG]  [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  entrySize  =  currEntry.read(buf,  offset,  numToRead);  }  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(numToRead  >  0)  {  if(numToRead  <  0)  {  entrySize  =  currEntry.read(buf,  offset,  numToRead);  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(numToRead  >  0)  {  if(numToRead  <  0)  {  entrySize  =  currEntry.read(buf,  offset,  numToRead);  }	  if(numToRead    <    0)    {    totalRead    =    currEntry.read(buf,    offset,    numToRead);    }    else    {    entryOffset    +=    numToRead;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
606	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  ==  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
607	[BUG]  [BUGGY]  if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                      NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  <  =  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
608	[BUG]  [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  <  numToRead)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                        NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  <  numToRead)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  <  numToRead)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
609	[BUG]  [BUGGY]  if(entryLimit  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [CE]  illegal  start  of  type  [FE]                                          NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryLimit  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryLimit  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  1;  }	  if(entrySize    >    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    return    1;    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
610	[BUG]  [BUGGY]  totalRead  =  cache.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  cache.read(buf,  offset,  0,  numToRead,  hasHitEOF);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  cache.read(buf,  offset,  0,  numToRead,  hasHitEOF);	  totalRead    =    is.read(buf,    offset,    0,    numToRead,    hasHitEOF);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
611	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset,  isDirectory);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  numToRead,  offset,  isDirectory);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  numToRead,  offset,  isDirectory);	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
612	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryLen,  isDirectory());  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryLen,  isDirectory());  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  entryLen,  isDirectory());	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
613	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  isDirectory());  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  0,  isDirectory());  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  0,  isDirectory());	  totalRead    =    currEntry.read(buf,    offset,    numToRead,    isDirectory());    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
614	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  off,  numToRead  +  1);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  off,  numToRead  +  1);	  totalRead    =    currEntry.read(buf,    offset,    numToRead    +    1);    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
615	[BUG]  [BUGGY]  if(entryLimit  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entryLimit  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entryLimit  <  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
616	[BUG]  [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                                    NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	if(entrySize  >=  0)  {  if(hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  throw  new  IllegalStateException( " ");  }	  if(numToRead    <    0)    {    if(hasHitEOF    ||    isDirectory()    ||    entryOffset    >=    entrySize)    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
617	[BUG]  [BUGGY]  numToRead  =  recv.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  recv.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  recv.read(buf,  offset,  numToRead);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
618	[BUG]  [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]                                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  numToRead  =  cache.read(buf,  offset,  numToRead);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  cache.read(buf,  offset,  numToRead);	  numToRead    =    rest.read(buf,    offset,    numToRead);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
619	[BUG]  [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  remainingLen);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  i.read(buf,  offset,  numToRead,  remainingLen);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  i.read(buf,  offset,  numToRead,  remainingLen);	  totalRead    =    is.read(buf,    offset,    numToRead,    remainingLen);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
620	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  null);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  null);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  null);	  totalRead    =    is.read(buf,    offset,    numToRead,    available);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
621	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  this);  [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException      [CONTEXT]      if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException(     "No  current  tar  entry     ");  }  numToRead  =  Math.min(numToRead,  available());      [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead,  this);  [BUGGY]        if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException(     "Truncated  TAR  archive     ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead,  this);	  totalRead    =    is.read(buf,    offset,    numToRead,    available);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
