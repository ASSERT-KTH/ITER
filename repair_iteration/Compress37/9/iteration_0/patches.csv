bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [CE]  illegal  start  of  type  [FE]    NegativeArraySizeException  [CONTEXT]  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  numToRead  =  Math.min(numToRead,  available());  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);  [BUGGY]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  hasHitEOF);	totalRead  =  is.read(buf,  offset,  numToRead);  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
2	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize);  [CE]  illegal  start  of  type  [FE]      NegativeArraySizeException  [CONTEXT]  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  numToRead  =  Math.min(numToRead,  available());  [BUGGY]  totalRead  =  is.read(buf,  offset,  entrySize);  [BUGGY]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entrySize);	totalRead  =  is.read(buf,  offset,  numToRead);  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
3	[BUG]  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]        NegativeArraySizeException  [CONTEXT]  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  numToRead  =  Math.min(numToRead,  available());  [BUGGY]  totalRead  =  currEntry.read(buf,  offset,  numToRead);  [BUGGY]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  currEntry.read(buf,  offset,  numToRead);	totalRead  =  is.read(buf,  offset,  numToRead);  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
4	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset);  [CE]  illegal  start  of  type  [FE]          NegativeArraySizeException  [CONTEXT]  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  numToRead  =  Math.min(numToRead,  available());  [BUGGY]  totalRead  =  is.read(buf,  offset,  entryOffset);  [BUGGY]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  entryOffset);	totalRead  =  is.read(buf,  offset,  numToRead);  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
5	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  [CE]  illegal  start  of  type  [FE]            NegativeArraySizeException  [CONTEXT]  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  numToRead  =  Math.min(numToRead,  available());  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead  +  1);  [BUGGY]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead  +  1);	totalRead  =  is.read(buf,  offset,  numToRead);  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
6	[BUG]  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead);  [CE]  illegal  start  of  type  [FE]              NegativeArraySizeException  [CONTEXT]  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  numToRead  =  Math.min(numToRead,  available());  [BUGGY]  numToRead  =  is.read(buf,  offset,  numToRead);  [BUGGY]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	numToRead  =  is.read(buf,  offset,  numToRead);	totalRead  =  is.read(buf,  offset,  numToRead);  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
7	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0);  [CE]  illegal  start  of  type  [FE]                NegativeArraySizeException  [CONTEXT]  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  numToRead  =  Math.min(numToRead,  available());  [BUGGY]  totalRead  =  is.read(buf,  offset,  0);  [BUGGY]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0);	totalRead  =  is.read(buf,  offset,  numToRead);  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]    [CE]  illegal  start  of  type  [FE]                  NegativeArraySizeException  [CONTEXT]  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  numToRead  =  Math.min(numToRead,  available());  [BUGGY]    [BUGGY]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	  	totalRead  =  is.read(buf,  offset,  numToRead);  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead);  [CE]  illegal  start  of  type  [FE]    NegativeArraySizeException  [CONTEXT]  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  numToRead  =  Math.min(numToRead,  available());  [BUGGY]  totalRead  =  is.read(buf,  offset,  0,  numToRead);  [BUGGY]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  0,  numToRead);	totalRead  =  is.read(buf,  offset,  numToRead);  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  len);  [CE]  illegal  start  of  type  [FE]    NegativeArraySizeException  [CONTEXT]  if  (hasHitEOF  ||  isDirectory()  ||  entryOffset  >=  entrySize)  {  return  -1;  }  if  (currEntry  ==  null)  {  throw  new  IllegalStateException( "No  current  tar  entry ");  }  numToRead  =  Math.min(numToRead,  available());  [BUGGY]  totalRead  =  is.read(buf,  offset,  numToRead,  len);  [BUGGY]    if  (totalRead  ==  -1)  {  if  (numToRead  >  0)  {  throw  new  IOException( "Truncated  TAR  archive ");  }  hasHitEOF  =  true;  }  else  {  count(totalRead);  entryOffset  +=  totalRead;  }  [CLASS]  TarArchiveInputStream  [METHOD]  read  [RETURN_TYPE]  int  final  byte[]  buf  final  int  offset  int  numToRead  [VARIABLES]  byte[]  SMALL_BUF  buf  headerBuf  l  longLinkData  longNameData  record  rest  boolean  hasHitEOF  marked  shouldReset  ZipEncoding  zipEncoding  InputStream  i  is  String  encoding  key  keyword  val  value  Map  globalPaxHeaders  headers  int  SMALL_BUFFER_SIZE  blockSize  ch  got  len  length  markLimit  numToRead  offset  read  readNow  recordSize  restLen  totalRead  long  available  entryOffset  entrySize  n  numRecords  padding  skipped  TarArchiveEntry  currEntry  	projects/Compress37/src/main/java/org/apache/commons/compress/archivers/tar/TarArchiveInputStream.java	0.3779644730092272	654	654	1	replace	totalRead  =  is.read(buf,  offset,  numToRead,  len);	totalRead  =  is.read(buf,  offset,  numToRead);  	non-compiled	[CE]  illegal  start  of  type	17	None	replace
