projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128clearResult();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128rehash();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),f.value(max)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),f.value(max)<=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)<=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()){clearResult();}else{thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),sign==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkArgument(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,ret)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)==0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)<0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)>=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),f.value(max)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),f.value(max)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns()+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns(true);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns()-1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(ret,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret,Sign.NaN);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128thrownewIllegalArgumentException("");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Thread.currentThread().interval();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),sign==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doublemin=f.value(min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max+1));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(min));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals()+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(true);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getDoubleOfIntervals();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,ret)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=0;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=0.0;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=false;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128rehashCode();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(isInterval()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue()+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doubleret=getNumber().doubleValue();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue()+2;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max-sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128verifyInterval(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max-sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Preconditions.checkState(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkArgument(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(max));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableFormat.checkArgument(!setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns(-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableToJavaType.checkState(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkInterval(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.POSITIVE_INFINITY;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.NaN;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)!=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.notNull(min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals()-1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()&&isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(setResult()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()&&!isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentStatus();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(sign)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue()*sign;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckInterval(ret,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(tokenBuffer());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(256);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max),f.value(max)<=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(sign)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min+1)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128rehashTable();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,0.0)<=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=true;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getDouble();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNegativeIntervals();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getDoubleOfIntervals(true);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max+1));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,ret));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkArgument(!isInterval());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkArgument(!setResult(),sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)/1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(max)+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max)+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(min)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(isEnabled(Feature.QUOTE_FIELD_NAMES)||isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128result=isEnabled(Feature.QUOTE_FIELD_NAMES)&&isEnabled(Feature.QUOTE_FIELD_NAMES);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=0L;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=2;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max),sign==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns()*1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSignes();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.reportCodeChange();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(min)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkArgument(!isInterval());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkArgument(!setInterval());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkArgument(!setResult(),sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(sign,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,sign,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128verifyInterval(min,max,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128verifyInterval(min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128verifyInterval(min,min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128double.POSITIVE_INFINITY=false;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY:false;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY="";
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)<=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(ret,min)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max),f.value(max)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max),f.value(max)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max),f.value(max)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max),f.value(max+1)<=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(sign));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,min),f.value(max));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(min+1));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkInterval(min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkInterval(min,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkInterval(sign,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableToJavaType.checkState(!isInterval());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableToJavaType.checkState(!this.setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableToJavaType.checkState(!setResult(),false);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,ret,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(ret,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,ret,Sign.NaN);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!isInterval());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!setResult(),sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,sign,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(sign,max,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,ret,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max,sign,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),sign==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max-1)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,sign-max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(sign,max-min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,sign-min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue()*sign+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue()/sign;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue()*sign+2;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,sign,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret,sign,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret,sign,false);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckInterval(min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckInterval(ret,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckInterval(ret,min,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckInterval(ret,sign,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!isInterval()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!this.setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!isInterval()){thrownewIllegalArgumentException(".");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(sign+1)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(sign)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(sign)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.notEmpty(min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.notEmpty(sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.notNull(sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(32);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(256,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(256,256);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doubleret=getNumberOfSigns();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,sign,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min+1)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min+1)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min-1)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY:true;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=null;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,0.0)==0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,0.0)>=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,0.0)!=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns(0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns(1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns(2);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,min,max,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),sign>0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),sign!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),sign>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Thread.currentThread().interval(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Thread.currentThread().interval(this.min,this.max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Thread.currentThread().interval(null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Thread.currentThread().interval(this);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),sign!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!isInterval()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult()&&isIntervalVisible()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult()&&!isInterval()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(sign,max,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max,sign,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=1.0;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=10.0;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(ret,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(sign+1)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(sign)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(sign)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!isInterval());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult(),sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult(),false);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals().doubleValue();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doubleret=getNumberOfIntervals();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,min,max,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(max+1));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min+1),f.value(max+1));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Preconditions.checkState(!isInterval());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Preconditions.checkState(!result());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Preconditions.checkArgument(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns(false);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns(true,false);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns(true,1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max,sign-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max-1,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(false);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(true,false);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doubleret=getNumberOfIntervals(false);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(true,1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(ret,min)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getnumber().doubleValue();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,sign-max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(sign,max-min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,sign-min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue()*1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max,sign-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max-1,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),sign==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableFormat.checkArgument(!isInterval()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableFormat.checkArgument(!this.setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableFormat.checkState(!setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableFormat.checkArgument(!setResult()&&!isInterval()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.POSITIVE_INFINITY|Float.POSITIVE_INFINITY;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.POSITIVE_INFINITY+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min,max+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min,max-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min,max)-1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.NaN|Float.POSITIVE_INFINITY;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.NaN+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.MIN_VALUE;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min)+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret,Sign.NaN,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,sign,Sign.NaN);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max,Sign.NaN);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(ret,min,Sign.NaN);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentFunctionStatus();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMutableStatus();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentThrowable();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(tokenBuffer(),sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(tokenBuffer(0));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(this.tokenBuffer());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!isInterval());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!this.setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!setResult(),sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwables.thrownewIllegalArgumentException("");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128thrownewIllegalArgumentException("".getMessage());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128thrownewIllegalArgumentException("".equals(min));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(2);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doubleret=getNumber().doubleValue()+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doubleret=getNumber().doubleValue()*2;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doubleret=getNumber().doubleValue()+2;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max,sign+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),sign!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max)>=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max,ret,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doublemin=f.value(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doublemin=f.value(min+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doublemin=f.value(min)-1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),ret==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),sign>0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("Intervalerror:");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("Failedtoparse:");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("Failedtoparse");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("Failedtoparse:"+min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(isInterval()||isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(isInterval()||isEnabled(Feature.QUOTE_FIELD_NAME)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(isInterval());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(isInterval()||isEnabled(Feature.QUOTE_FIELD_NON_NULL)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!isInterval()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(isInterval()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!this.setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!setResult(),sign){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals()*1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals()[0];
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(ret,min,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,min,ret,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,min,ret,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!setResult()&&isEnabled(Feature.QUOTE_FIELD_NAMES));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!setResult()&&isEnabled(Feature.QUOTE_FIELD_NAME));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getDoubleValue();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,f.value(max));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMismatch();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMutableState();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableFormat.checkArgument(!isInterval()){thrownewIllegalArgumentException("".);}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(max)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max-1)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals().length;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkArgument(!result());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.NaN-1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doublemin=f.value(min).doubleValue();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max-1));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkArgument(isInterval());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(sign,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min-min),f.value(max+1));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max+1)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max/1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,min-sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max)>0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns().doubleValue();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Thread.currentThread().interval(this,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()||isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkArgument(!setResult()&&isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult()&&isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult()&&isEnabled(Feature.QUOTE_FIELD_NAME)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),sign<=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("Cannotinstantiatevalueoftype");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("NaNerror:");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("NaNvaluemustbe>0");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128thrownewIllegalStateException("");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128thrownewIllegalArgumentException("".equals(getMessage()));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)!=null&&f.value(max)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY="NaN";
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!isInterval()){thrownewIllegalArgumentException("".);}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max-1)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableToJavaType.checkState(!resolved());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableToJavaType.checkState(!result());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max/1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=0.5;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min)==f.value(max)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,min-sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max-sign,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkArgument(!setResult(),min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(256,512);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.notNull(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128verifyInterval(min,max-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128verifyInterval(min,max-sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,ret,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult(),true);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkArgument(this.result!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(tokenBuffer(),max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(tokenBuffer(),1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(tokenBuffer(),min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!setResult(),min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(ret,min,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,min)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min)==f.value(max)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=-1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)+2);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)+3);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128rehashTable(true);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,f.value(min));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),max==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),f.sign<=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),f.type==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckInterval(ret,min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckInterval(ret,min,0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkArgument(!setResult()&&!isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,min)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(false,false);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)==null,f.value(max)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkInterval(min,max-sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkInterval(min,max+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.NaN||Float.isInfinite(min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getDoubleBounds();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(ret,max,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult()||!setResult()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(isInterval()||isEnabled(Feature.FLUSH_PASSED_TO_STREAM)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(isInterval()||isEnabled(Feature.QUOTE_FIELD_NON_NULL_OBJECT)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(ret,min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max)<=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()||!isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min+1)==0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(sign)==0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(setResult()||isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(setResult()||isEnabled(Feature.QUOTE_FIELD_NAME)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!setResult()){thrownewIllegalStateException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128RehashTable<Double,Object>solve=solve();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128rehashTable(this);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max+1)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min-min+1)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(ret,sign,Sign.NaN);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(ret,Sign.NaN);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(sign,ret,Sign.NaN);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(ret,min,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(sign,ret,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max+1,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.notNull(ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkArgument(!setResult()||!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!result());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwables.thrownewIllegalArgumentException(",");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(sign),sign==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMissingClass();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentArgumentException();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,0,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(false,true);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkInterval(min,null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min+1)!=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(ret,min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(ret,yMin);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Thread.currentThread().interval(ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Thread.currentThread().interval(this,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Thread.currentThread().interval(thread);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableFormat.checkArgument(!setResult()||!setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableFormat.checkArgument(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doubleret=getNumber().longValue();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doubleret=getNumberOfSigns(false);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(min)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY="Infinity";
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min+1,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkArgument(!setResult(),null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!setResult()&&!Double.isNaN(min));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!result());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableToJavaType.checkState(!resolved);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(sign,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("Expectedanerror:");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("Expectedavalue");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(tokenBuffer(),tokenBuffer());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(tokenBuffer(),this);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max-1,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)>0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(255);
