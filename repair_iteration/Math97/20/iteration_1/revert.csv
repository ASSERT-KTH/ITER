projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128clearResult();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128rehash();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),f.value(max)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),f.value(max)<=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)<=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()){clearResult();}else{thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),sign==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkState(!setResult()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Context.checkArgument(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,ret)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)==0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)<0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)>=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),f.value(max)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min),f.value(max)>=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns()+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns(true);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns()-1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(ret,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,ret,Sign.NaN);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkState(!setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128thrownewIllegalArgumentException("");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Thread.currentThread().interval();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)!=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),sign==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doublemin=f.value(min+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doublemin=f.value(min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max+1));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(min));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals()+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(true);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getDoubleOfIntervals();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,ret)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=0;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=0.0;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=false;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128rehashCode();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(isInterval()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue()+1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128doubleret=getNumber().doubleValue();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue()+2;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,min,ret);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max-sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128checkInterval(min,max+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128verifyInterval(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128validateInterval(min,max-sign);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Preconditions.checkState(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkArgument(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,max),f.value(max));
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)+1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)!=null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableFormat.checkArgument(!setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!setResult()){thrownewIllegalArgumentException("");}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Parchet.checkArgument(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfSigns(-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableToJavaType.checkState(!setResult());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128NullPointer.checkInterval(min,max);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.POSITIVE_INFINITY;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=Float.NaN;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min),f.value(max)==null);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals(-1);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min)!=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.notNull(min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumberOfIntervals()-1;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()&&isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(setResult()){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128if(!setResult()&&!isEnabled(Feature.QUOTE_FIELD_NAMES)){clearResult();}
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentMatcherException("");
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Throwablecause=getCurrentStatus();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(sign)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Doubleret=getNumber().doubleValue()*sign;
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckInterval(ret,min);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(tokenBuffer());
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128MutableTokenBuffertokens=newMutableTokenBuffer(256);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Validate.isTrue(f.value(min,max),f.value(max)<=0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(sign)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min+1)==0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128rehashTable();
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128CheckArgumentException.checkArgument(f.value(min,0.0)<=0.0);
projects/Math97/src/java/org/apache/commons/math/analysis/BrentSolver.java128Double.POSITIVE_INFINITY=true;
